{"ast":null,"code":"var _jsxFileName = \"/Users/hamishnicklin/Desktop/Accordion/src/TimelineBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport AssetSelector from './components/AssetSelector';\nimport CampaignSetup from './components/CampaignSetup';\nimport GanttChart from './components/GanttChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimelineBuilder = () => {\n  _s();\n  // CSV and asset data\n  const [csvData, setCsvData] = useState([]);\n  const [uniqueAssets, setUniqueAssets] = useState([]);\n  const [selectedAssets, setSelectedAssets] = useState([]);\n\n  // Live date management\n  const [globalLiveDate, setGlobalLiveDate] = useState('');\n  const [useGlobalDate, setUseGlobalDate] = useState(true);\n  const [assetLiveDates, setAssetLiveDates] = useState({}); // {assetName: 'YYYY-MM-DD'}\n\n  // Calculated results\n  const [calculatedStartDates, setCalculatedStartDates] = useState({}); // {assetName: 'YYYY-MM-DD'}\n  const [projectStartDate, setProjectStartDate] = useState(''); // Earliest start date across all assets\n  const [dateErrors, setDateErrors] = useState([]); // Array of asset names that start before today\n\n  // Final timeline for display\n  const [timelineTasks, setTimelineTasks] = useState([]);\n\n  // Helper function to check if date is weekend\n  const isWeekend = date => {\n    const day = date.getDay();\n    return day === 0 || day === 6; // Sunday = 0, Saturday = 6\n  };\n\n  // Helper function to get previous working day\n  const getPreviousWorkingDay = date => {\n    let workingDate = new Date(date);\n    do {\n      workingDate.setDate(workingDate.getDate() - 1);\n    } while (isWeekend(workingDate));\n    return workingDate;\n  };\n\n  // Helper function to get next working day\n  const getNextWorkingDay = date => {\n    let workingDate = new Date(date);\n    do {\n      workingDate.setDate(workingDate.getDate() + 1);\n    } while (isWeekend(workingDate));\n    return workingDate;\n  };\n\n  // Helper function to subtract working days (backwards calculation)\n  const subtractWorkingDays = (endDate, workingDaysToSubtract) => {\n    let currentDate = new Date(endDate);\n    let remainingDays = workingDaysToSubtract;\n\n    // Subtract working days\n    while (remainingDays > 0) {\n      currentDate.setDate(currentDate.getDate() - 1);\n\n      // Only count non-weekend days\n      if (!isWeekend(currentDate)) {\n        remainingDays--;\n      }\n    }\n    return currentDate;\n  };\n\n  // Helper function to add working days (forward calculation for display)\n  const addWorkingDays = (startDate, workingDaysToAdd) => {\n    let currentDate = new Date(startDate);\n    let remainingDays = workingDaysToAdd - 1; // -1 because start date counts as day 1\n\n    // Add working days\n    while (remainingDays > 0) {\n      currentDate.setDate(currentDate.getDate() + 1);\n      if (!isWeekend(currentDate)) {\n        remainingDays--;\n      }\n    }\n    return currentDate;\n  };\n\n  // Load CSV data\n  useEffect(() => {\n    Papa.parse(`${window.location.origin}/Group_Asset_Task_Time.csv`, {\n      download: true,\n      header: true,\n      skipEmptyLines: true,\n      complete: results => {\n        const parsedData = results.data;\n        setCsvData(parsedData);\n\n        // Extract unique asset types from CSV\n        const assetTypes = [...new Set(parsedData.map(row => row['Asset Type']))].filter(type => type);\n        setUniqueAssets(assetTypes);\n      },\n      error: error => {\n        console.error(\"Error parsing CSV file:\", error);\n      }\n    });\n  }, []);\n\n  // Calculate backwards timeline when live dates or assets change\n  useEffect(() => {\n    if (selectedAssets.length === 0 || csvData.length === 0) {\n      setTimelineTasks([]);\n      setCalculatedStartDates({});\n      setProjectStartDate('');\n      setDateErrors([]);\n      return;\n    }\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Reset time for accurate comparison\n\n    const newCalculatedStartDates = {};\n    const newDateErrors = [];\n    const allStartDates = [];\n\n    // Calculate for each selected asset\n    selectedAssets.forEach(assetName => {\n      // Determine the correct live date without the incorrect fallback\n      const liveDate = useGlobalDate ? globalLiveDate : assetLiveDates[assetName];\n\n      // If no date is available for this asset, skip it\n      if (!liveDate) return;\n\n      // Get tasks for this asset\n      const assetTasks = csvData.filter(row => row['Asset Type'] === assetName);\n      if (assetTasks.length === 0) return;\n\n      // Work backwards through tasks sequentially\n      let currentEndDate = new Date(liveDate);\n\n      // Process tasks in reverse order (last task ends on live date)\n      for (let i = assetTasks.length - 1; i >= 0; i--) {\n        const task = assetTasks[i];\n        const duration = parseInt(task['Duration (Days)'], 10) || 1;\n\n        // Calculate when this task must start\n        const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n\n        // Next task ends the working day before this task starts\n        currentEndDate = new Date(taskStartDate);\n        currentEndDate.setDate(currentEndDate.getDate() - 1);\n\n        // Ensure end date is a working day\n        if (isWeekend(currentEndDate)) {\n          currentEndDate = getPreviousWorkingDay(currentEndDate);\n        }\n      }\n\n      // The project start date is the day after the last calculated end date\n      let calculatedStart = new Date(currentEndDate);\n      calculatedStart.setDate(calculatedStart.getDate() + 1);\n\n      // Ensure start date is a working day\n      if (isWeekend(calculatedStart)) {\n        calculatedStart = getNextWorkingDay(calculatedStart);\n      }\n      const calculatedStartDate = calculatedStart.toISOString().split('T')[0];\n      newCalculatedStartDates[assetName] = calculatedStartDate;\n      allStartDates.push(new Date(calculatedStartDate));\n\n      // Check if start date is before today\n      if (calculatedStart < today) {\n        newDateErrors.push(assetName);\n      }\n    });\n\n    // Find earliest start date across all assets\n    if (allStartDates.length > 0) {\n      const earliestDate = new Date(Math.min(...allStartDates));\n      setProjectStartDate(earliestDate.toISOString().split('T')[0]);\n    }\n    setCalculatedStartDates(newCalculatedStartDates);\n    setDateErrors(newDateErrors);\n\n    // Generate timeline tasks for display\n    generateTimelineTasks(newCalculatedStartDates);\n  }, [selectedAssets, globalLiveDate, useGlobalDate, assetLiveDates, csvData]);\n  // This new useEffect pre-populates individual dates when switching from global mode\n  useEffect(() => {\n    if (!useGlobalDate && globalLiveDate && selectedAssets.length > 0) {\n      const newLiveDates = {\n        ...assetLiveDates\n      };\n      let updated = false;\n      selectedAssets.forEach(asset => {\n        // Pre-fill only if the asset doesn't have an individual date set\n        if (!newLiveDates[asset]) {\n          newLiveDates[asset] = globalLiveDate;\n          updated = true;\n        }\n      });\n      if (updated) {\n        setAssetLiveDates(newLiveDates);\n      }\n    }\n  }, [useGlobalDate, globalLiveDate, selectedAssets, assetLiveDates]);\n  // Generate timeline tasks for Gantt chart\n  const generateTimelineTasks = startDates => {\n    if (selectedAssets.length === 0 || Object.keys(startDates).length === 0) {\n      setTimelineTasks([]);\n      return;\n    }\n    const allTasks = [];\n    let taskIndex = 0;\n    selectedAssets.forEach(assetName => {\n      const startDate = startDates[assetName];\n      if (!startDate) return;\n      const assetTasks = csvData.filter(row => row['Asset Type'] === assetName);\n      let currentStartDate = new Date(startDate);\n\n      // Ensure project starts on working day\n      if (isWeekend(currentStartDate)) {\n        currentStartDate = getNextWorkingDay(currentStartDate);\n      }\n      assetTasks.forEach(taskInfo => {\n        const duration = parseInt(taskInfo['Duration (Days)'], 10) || 1;\n        const taskStart = new Date(currentStartDate);\n        const taskEnd = addWorkingDays(taskStart, duration);\n        const ganttTask = {\n          id: `task-${taskIndex}`,\n          name: `${taskInfo['Asset Type']}: ${taskInfo['Task']}`,\n          start: taskStart.toISOString().split('T')[0],\n          end: taskEnd.toISOString().split('T')[0],\n          progress: 0\n        };\n        allTasks.push(ganttTask);\n        taskIndex++;\n\n        // Move to next start date (day after current task ends)\n        currentStartDate = new Date(taskEnd);\n        currentStartDate.setDate(taskEnd.getDate() + 1);\n\n        // Ensure next start date is working day\n        if (isWeekend(currentStartDate)) {\n          currentStartDate = getNextWorkingDay(currentStartDate);\n        }\n      });\n    });\n    setTimelineTasks(allTasks);\n  };\n  const handleAssetToggle = asset => {\n    setSelectedAssets(prev => prev.includes(asset) ? prev.filter(a => a !== asset) : [...prev, asset]);\n  };\n  const handleAssetLiveDateChange = (assetName, date) => {\n    setAssetLiveDates(prev => ({\n      ...prev,\n      [assetName]: date\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-100 min-h-screen font-sans\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-white shadow-md\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto px-6 py-4\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-3xl font-bold text-gray-800\",\n          children: \"Accordion Timeline Builder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container mx-auto p-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 lg:grid-cols-3 gap-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lg:col-span-1 bg-white p-6 rounded-xl shadow-lg\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\",\n            children: \"Timeline Setup\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CampaignSetup, {\n            globalLiveDate: globalLiveDate,\n            onGlobalLiveDateChange: setGlobalLiveDate,\n            useGlobalDate: useGlobalDate,\n            onUseGlobalDateChange: setUseGlobalDate,\n            projectStartDate: projectStartDate,\n            dateErrors: dateErrors\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AssetSelector, {\n            assets: uniqueAssets || [],\n            selectedAssets: selectedAssets || [],\n            onAssetToggle: handleAssetToggle,\n            useGlobalDate: useGlobalDate // <-- CORRECTED LINE\n            ,\n            globalLiveDate: globalLiveDate || '',\n            assetLiveDates: assetLiveDates || {},\n            onAssetLiveDateChange: handleAssetLiveDateChange,\n            calculatedStartDates: calculatedStartDates || {},\n            dateErrors: dateErrors || []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 1\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lg:col-span-2 bg-white p-6 rounded-xl shadow-lg\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\",\n            children: \"Generated Timeline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 25\n          }, this), timelineTasks && timelineTasks.length > 0 ? /*#__PURE__*/_jsxDEV(GanttChart, {\n            tasks: timelineTasks\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-gray-500 py-10\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-lg\",\n              children: \"Your timeline will appear here.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm\",\n              children: \"Set a live date and select some assets to begin.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 9\n  }, this);\n};\n_s(TimelineBuilder, \"yJht16eeZsG67S/wnFGlwQLEgq8=\");\n_c = TimelineBuilder;\nexport default TimelineBuilder;\nvar _c;\n$RefreshReg$(_c, \"TimelineBuilder\");","map":{"version":3,"names":["React","useState","useEffect","Papa","AssetSelector","CampaignSetup","GanttChart","jsxDEV","_jsxDEV","TimelineBuilder","_s","csvData","setCsvData","uniqueAssets","setUniqueAssets","selectedAssets","setSelectedAssets","globalLiveDate","setGlobalLiveDate","useGlobalDate","setUseGlobalDate","assetLiveDates","setAssetLiveDates","calculatedStartDates","setCalculatedStartDates","projectStartDate","setProjectStartDate","dateErrors","setDateErrors","timelineTasks","setTimelineTasks","isWeekend","date","day","getDay","getPreviousWorkingDay","workingDate","Date","setDate","getDate","getNextWorkingDay","subtractWorkingDays","endDate","workingDaysToSubtract","currentDate","remainingDays","addWorkingDays","startDate","workingDaysToAdd","parse","window","location","origin","download","header","skipEmptyLines","complete","results","parsedData","data","assetTypes","Set","map","row","filter","type","error","console","length","today","setHours","newCalculatedStartDates","newDateErrors","allStartDates","forEach","assetName","liveDate","assetTasks","currentEndDate","i","task","duration","parseInt","taskStartDate","calculatedStart","calculatedStartDate","toISOString","split","push","earliestDate","Math","min","generateTimelineTasks","newLiveDates","updated","asset","startDates","Object","keys","allTasks","taskIndex","currentStartDate","taskInfo","taskStart","taskEnd","ganttTask","id","name","start","end","progress","handleAssetToggle","prev","includes","a","handleAssetLiveDateChange","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onGlobalLiveDateChange","onUseGlobalDateChange","assets","onAssetToggle","onAssetLiveDateChange","tasks","_c","$RefreshReg$"],"sources":["/Users/hamishnicklin/Desktop/Accordion/src/TimelineBuilder.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport AssetSelector from './components/AssetSelector';\nimport CampaignSetup from './components/CampaignSetup';\nimport GanttChart from './components/GanttChart';\n\nconst TimelineBuilder = () => {\n    // CSV and asset data\n    const [csvData, setCsvData] = useState([]);\n    const [uniqueAssets, setUniqueAssets] = useState([]);\n    const [selectedAssets, setSelectedAssets] = useState([]);\n    \n    // Live date management\n    const [globalLiveDate, setGlobalLiveDate] = useState('');\n    const [useGlobalDate, setUseGlobalDate] = useState(true);\n    const [assetLiveDates, setAssetLiveDates] = useState({}); // {assetName: 'YYYY-MM-DD'}\n    \n    // Calculated results\n    const [calculatedStartDates, setCalculatedStartDates] = useState({}); // {assetName: 'YYYY-MM-DD'}\n    const [projectStartDate, setProjectStartDate] = useState(''); // Earliest start date across all assets\n    const [dateErrors, setDateErrors] = useState([]); // Array of asset names that start before today\n    \n    // Final timeline for display\n    const [timelineTasks, setTimelineTasks] = useState([]);\n\n    // Helper function to check if date is weekend\n    const isWeekend = (date) => {\n        const day = date.getDay();\n        return day === 0 || day === 6; // Sunday = 0, Saturday = 6\n    };\n\n    // Helper function to get previous working day\n    const getPreviousWorkingDay = (date) => {\n        let workingDate = new Date(date);\n        do {\n            workingDate.setDate(workingDate.getDate() - 1);\n        } while (isWeekend(workingDate));\n        return workingDate;\n    };\n\n    // Helper function to get next working day\n    const getNextWorkingDay = (date) => {\n        let workingDate = new Date(date);\n        do {\n            workingDate.setDate(workingDate.getDate() + 1);\n        } while (isWeekend(workingDate));\n        return workingDate;\n    };\n\n    // Helper function to subtract working days (backwards calculation)\n    const subtractWorkingDays = (endDate, workingDaysToSubtract) => {\n        let currentDate = new Date(endDate);\n        let remainingDays = workingDaysToSubtract;\n        \n        // Subtract working days\n        while (remainingDays > 0) {\n            currentDate.setDate(currentDate.getDate() - 1);\n            \n            // Only count non-weekend days\n            if (!isWeekend(currentDate)) {\n                remainingDays--;\n            }\n        }\n        \n        return currentDate;\n    };\n\n    // Helper function to add working days (forward calculation for display)\n    const addWorkingDays = (startDate, workingDaysToAdd) => {\n        let currentDate = new Date(startDate);\n        let remainingDays = workingDaysToAdd - 1; // -1 because start date counts as day 1\n        \n        // Add working days\n        while (remainingDays > 0) {\n            currentDate.setDate(currentDate.getDate() + 1);\n            if (!isWeekend(currentDate)) {\n                remainingDays--;\n            }\n        }\n        \n        return currentDate;\n    };\n\n    // Load CSV data\n    useEffect(() => {\n        Papa.parse(`${window.location.origin}/Group_Asset_Task_Time.csv`, {\n            download: true,\n            header: true,\n            skipEmptyLines: true,\n            complete: (results) => {\n                const parsedData = results.data;\n                setCsvData(parsedData);\n                \n                // Extract unique asset types from CSV\n                const assetTypes = [...new Set(parsedData.map(row => row['Asset Type']))].filter(type => type);\n                setUniqueAssets(assetTypes);\n            },\n            error: (error) => {\n                console.error(\"Error parsing CSV file:\", error);\n            }\n        });\n    }, []);\n\n    // Calculate backwards timeline when live dates or assets change\n    useEffect(() => {\n        if (selectedAssets.length === 0 || csvData.length === 0) {\n            setTimelineTasks([]);\n            setCalculatedStartDates({});\n            setProjectStartDate('');\n            setDateErrors([]);\n            return;\n        }\n\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Reset time for accurate comparison\n        \n        const newCalculatedStartDates = {};\n        const newDateErrors = [];\n        const allStartDates = [];\n\n        // Calculate for each selected asset\n        selectedAssets.forEach(assetName => {\n    // Determine the correct live date without the incorrect fallback\n    const liveDate = useGlobalDate ? globalLiveDate : assetLiveDates[assetName];\n    \n    // If no date is available for this asset, skip it\n    if (!liveDate) return;\n\n            // Get tasks for this asset\n            const assetTasks = csvData.filter(row => row['Asset Type'] === assetName);\n            \n            if (assetTasks.length === 0) return;\n\n            // Work backwards through tasks sequentially\n            let currentEndDate = new Date(liveDate);\n            \n            // Process tasks in reverse order (last task ends on live date)\n            for (let i = assetTasks.length - 1; i >= 0; i--) {\n                const task = assetTasks[i];\n                const duration = parseInt(task['Duration (Days)'], 10) || 1;\n                \n                // Calculate when this task must start\n                const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n                \n                // Next task ends the working day before this task starts\n                currentEndDate = new Date(taskStartDate);\n                currentEndDate.setDate(currentEndDate.getDate() - 1);\n                \n                // Ensure end date is a working day\n                if (isWeekend(currentEndDate)) {\n                    currentEndDate = getPreviousWorkingDay(currentEndDate);\n                }\n            }\n            \n            // The project start date is the day after the last calculated end date\n            let calculatedStart = new Date(currentEndDate);\n            calculatedStart.setDate(calculatedStart.getDate() + 1);\n            \n            // Ensure start date is a working day\n            if (isWeekend(calculatedStart)) {\n                calculatedStart = getNextWorkingDay(calculatedStart);\n            }\n            \n            const calculatedStartDate = calculatedStart.toISOString().split('T')[0];\n            newCalculatedStartDates[assetName] = calculatedStartDate;\n            allStartDates.push(new Date(calculatedStartDate));\n            \n            // Check if start date is before today\n            if (calculatedStart < today) {\n                newDateErrors.push(assetName);\n            }\n        });\n\n        // Find earliest start date across all assets\n        if (allStartDates.length > 0) {\n            const earliestDate = new Date(Math.min(...allStartDates));\n            setProjectStartDate(earliestDate.toISOString().split('T')[0]);\n        }\n\n        setCalculatedStartDates(newCalculatedStartDates);\n        setDateErrors(newDateErrors);\n\n        // Generate timeline tasks for display\n        generateTimelineTasks(newCalculatedStartDates);\n\n    }, [selectedAssets, globalLiveDate, useGlobalDate, assetLiveDates, csvData]);\n// This new useEffect pre-populates individual dates when switching from global mode\n    useEffect(() => {\n        if (!useGlobalDate && globalLiveDate && selectedAssets.length > 0) {\n            const newLiveDates = { ...assetLiveDates };\n            let updated = false;\n            selectedAssets.forEach(asset => {\n                // Pre-fill only if the asset doesn't have an individual date set\n                if (!newLiveDates[asset]) {\n                    newLiveDates[asset] = globalLiveDate;\n                    updated = true;\n                }\n            });\n            if (updated) {\n                setAssetLiveDates(newLiveDates);\n            }\n        }\n    }, [useGlobalDate, globalLiveDate, selectedAssets, assetLiveDates]);\n    // Generate timeline tasks for Gantt chart\n    const generateTimelineTasks = (startDates) => {\n        if (selectedAssets.length === 0 || Object.keys(startDates).length === 0) {\n            setTimelineTasks([]);\n            return;\n        }\n\n        const allTasks = [];\n        let taskIndex = 0;\n\n        selectedAssets.forEach(assetName => {\n            const startDate = startDates[assetName];\n            if (!startDate) return;\n\n            const assetTasks = csvData.filter(row => row['Asset Type'] === assetName);\n            let currentStartDate = new Date(startDate);\n\n            // Ensure project starts on working day\n            if (isWeekend(currentStartDate)) {\n                currentStartDate = getNextWorkingDay(currentStartDate);\n            }\n\n            assetTasks.forEach(taskInfo => {\n                const duration = parseInt(taskInfo['Duration (Days)'], 10) || 1;\n                \n                const taskStart = new Date(currentStartDate);\n                const taskEnd = addWorkingDays(taskStart, duration);\n                \n                const ganttTask = {\n                    id: `task-${taskIndex}`,\n                    name: `${taskInfo['Asset Type']}: ${taskInfo['Task']}`,\n                    start: taskStart.toISOString().split('T')[0],\n                    end: taskEnd.toISOString().split('T')[0],\n                    progress: 0,\n                };\n                \n                allTasks.push(ganttTask);\n                taskIndex++;\n                \n                // Move to next start date (day after current task ends)\n                currentStartDate = new Date(taskEnd);\n                currentStartDate.setDate(taskEnd.getDate() + 1);\n                \n                // Ensure next start date is working day\n                if (isWeekend(currentStartDate)) {\n                    currentStartDate = getNextWorkingDay(currentStartDate);\n                }\n            });\n        });\n\n        setTimelineTasks(allTasks);\n    };\n\n    const handleAssetToggle = (asset) => {\n        setSelectedAssets(prev => \n            prev.includes(asset) \n                ? prev.filter(a => a !== asset)\n                : [...prev, asset]\n        );\n    };\n\n    const handleAssetLiveDateChange = (assetName, date) => {\n        setAssetLiveDates(prev => ({\n            ...prev,\n            [assetName]: date\n        }));\n    };\n\n    return (\n        <div className=\"bg-gray-100 min-h-screen font-sans\">\n            <header className=\"bg-white shadow-md\">\n                <div className=\"container mx-auto px-6 py-4\">\n                    <h1 className=\"text-3xl font-bold text-gray-800\">Accordion Timeline Builder</h1>\n                </div>\n            </header>\n            <main className=\"container mx-auto p-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                    {/* LEFT COLUMN: CONTROLS */}\n                    <div className=\"lg:col-span-1 bg-white p-6 rounded-xl shadow-lg\">\n                        <h2 className=\"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\">Timeline Setup</h2>\n                        <CampaignSetup \n                            globalLiveDate={globalLiveDate}\n                            onGlobalLiveDateChange={setGlobalLiveDate}\n                            useGlobalDate={useGlobalDate}\n                            onUseGlobalDateChange={setUseGlobalDate}\n                            projectStartDate={projectStartDate}\n                            dateErrors={dateErrors}\n                        />\n<AssetSelector\n    assets={uniqueAssets || []}\n    selectedAssets={selectedAssets || []}\n    onAssetToggle={handleAssetToggle}\n    useGlobalDate={useGlobalDate} // <-- CORRECTED LINE\n    globalLiveDate={globalLiveDate || ''}\n    assetLiveDates={assetLiveDates || {}}\n    onAssetLiveDateChange={handleAssetLiveDateChange}\n    calculatedStartDates={calculatedStartDates || {}}\n    dateErrors={dateErrors || []}\n/>\n                    </div>\n                    \n                    {/* RIGHT COLUMN: TIMELINE */}\n                    <div className=\"lg:col-span-2 bg-white p-6 rounded-xl shadow-lg\">\n                        <h2 className=\"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\">Generated Timeline</h2>\n                        \n                     {/* Error Messages - Temporarily Disabled */}\n{/* {dateErrors.length > 0 && (\n    <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-md\">\n        <h3 className=\"text-red-800 font-medium mb-2\">⚠️ Timeline Conflicts</h3>\n        <p className=\"text-red-700 text-sm mb-2\">\n            The following assets cannot be completed by their live dates:\n        </p>\n        <ul className=\"text-red-700 text-sm\">\n            {dateErrors.map(asset => (\n                <li key={asset} className=\"ml-4\">\n                    • {asset} (would need to start on {calculatedStartDates[asset]})\n                </li>\n            ))}\n        </ul>\n        <p className=\"text-red-700 text-sm mt-2 font-medium\">\n            Manual adjustment of task durations required.\n        </p>\n    </div>\n)} */}\n\n                        {timelineTasks && timelineTasks.length > 0 ? (\n                            <GanttChart tasks={timelineTasks} />\n                        ) : (\n                            <div className=\"text-center text-gray-500 py-10\">\n                                <p className=\"text-lg\">Your timeline will appear here.</p>\n                                <p className=\"text-sm\">Set a live date and select some assets to begin.</p>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </main>\n        </div>\n    );\n};\n\nexport default TimelineBuilder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}