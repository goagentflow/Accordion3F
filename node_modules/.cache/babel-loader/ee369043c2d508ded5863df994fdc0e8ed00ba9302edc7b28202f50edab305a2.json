{"ast":null,"code":"var _jsxFileName = \"/Users/hamishnicklin/Accordion3F/src/TimelineBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport AssetSelector from './components/AssetSelector';\nimport CampaignSetup from './components/CampaignSetup';\nimport GanttChart from './components/GanttChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimelineBuilder = () => {\n  _s();\n  // CSV and asset data\n  const [csvData, setCsvData] = useState([]);\n  const [uniqueAssets, setUniqueAssets] = useState([]);\n  // Each selected asset is now an object with a unique id, type, name, and startDate\n  const [selectedAssets, setSelectedAssets] = useState([]);\n\n  // Live date management\n  const [globalLiveDate, setGlobalLiveDate] = useState('');\n  const [useGlobalDate, setUseGlobalDate] = useState(true);\n  const [assetLiveDates, setAssetLiveDates] = useState({}); // {assetName: 'YYYY-MM-DD'}\n\n  // Calculated results\n  const [calculatedStartDates, setCalculatedStartDates] = useState({}); // {assetName: 'YYYY-MM-DD'}\n  const [projectStartDate, setProjectStartDate] = useState(''); // Earliest start date across all assets\n  const [dateErrors, setDateErrors] = useState([]); // Array of asset names that start before today\n\n  // Final timeline for display\n  const [timelineTasks, setTimelineTasks] = useState([]);\n  const [showInfoBox, setShowInfoBox] = useState(true); // Add state for info box\n\n  // Add state to store custom task durations for each asset instance\n  const [assetTaskDurations, setAssetTaskDurations] = useState({}); // { assetId: { taskName: duration, ... } }\n\n  // Add state to store custom tasks separately\n  const [customTasks, setCustomTasks] = useState([]); // Array of custom task objects\n\n  // Add state to store custom task names\n  const [customTaskNames, setCustomTaskNames] = useState({}); // { taskId: customName }\n\n  // Add state to store bank holidays\n  const [bankHolidays, setBankHolidays] = useState([]); // Array of YYYY-MM-DD strings\n\n  // Undo/Redo infrastructure\n  const [history, setHistory] = useState([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  const [isUndoRedoAction, setIsUndoRedoAction] = useState(false);\n\n  // Helper function to get task name (custom or default)\n  const getTaskName = (taskId, assetName, taskInfo) => {\n    // Check if there's a custom name for this task\n    if (customTaskNames[taskId]) {\n      return customTaskNames[taskId];\n    }\n    // Return default format\n    return `${assetName}: ${taskInfo['Task']}`;\n  };\n\n  // Create a snapshot of the current app state for undo/redo\n  const createStateSnapshot = actionDescription => ({\n    // Asset state\n    selectedAssets: JSON.parse(JSON.stringify(selectedAssets)),\n    assetLiveDates: JSON.parse(JSON.stringify(assetLiveDates)),\n    useGlobalDate,\n    globalLiveDate,\n    // Task state\n    customTaskNames: JSON.parse(JSON.stringify(customTaskNames)),\n    assetTaskDurations: JSON.parse(JSON.stringify(assetTaskDurations)),\n    customTasks: JSON.parse(JSON.stringify(customTasks)),\n    // UI state\n    showInfoBox,\n    // Calculated state (will be recalculated after restoration)\n    timelineTasks: JSON.parse(JSON.stringify(timelineTasks)),\n    calculatedStartDates: JSON.parse(JSON.stringify(calculatedStartDates)),\n    dateErrors: JSON.parse(JSON.stringify(dateErrors)),\n    projectStartDate,\n    // Metadata\n    timestamp: Date.now(),\n    actionDescription,\n    actionType: 'user_action'\n  });\n\n  // Restore app state from a snapshot\n  const restoreFromSnapshot = snapshot => {\n    // Validate snapshot before restoring\n    if (!snapshot || typeof snapshot !== 'object') {\n      console.error('Invalid snapshot provided to restoreFromSnapshot');\n      return;\n    }\n\n    // Restore only the input state (what the user controls)\n    if (snapshot.selectedAssets) setSelectedAssets(snapshot.selectedAssets);\n    if (snapshot.assetLiveDates) setAssetLiveDates(snapshot.assetLiveDates);\n    if (snapshot.useGlobalDate !== undefined) setUseGlobalDate(snapshot.useGlobalDate);\n    if (snapshot.globalLiveDate) setGlobalLiveDate(snapshot.globalLiveDate);\n    if (snapshot.customTaskNames) setCustomTaskNames(snapshot.customTaskNames);\n    if (snapshot.assetTaskDurations) setAssetTaskDurations(snapshot.assetTaskDurations);\n    if (snapshot.customTasks) setCustomTasks(snapshot.customTasks);\n    if (snapshot.showInfoBox !== undefined) setShowInfoBox(snapshot.showInfoBox);\n\n    // Don't restore calculated state - let the useEffect recalculate it fresh\n    // This prevents conflicts between old calculated state and new input state\n    // setTimelineTasks(snapshot.timelineTasks);\n    // setCalculatedStartDates(snapshot.calculatedStartDates);\n    // setDateErrors(snapshot.dateErrors);\n    // setProjectStartDate(snapshot.projectStartDate);\n  };\n\n  // Undo function\n  const undo = () => {\n    if (historyIndex > 0 && history[historyIndex - 1]) {\n      setIsUndoRedoAction(true);\n      const previousSnapshot = history[historyIndex - 1];\n      if (previousSnapshot && previousSnapshot.selectedAssets) {\n        restoreFromSnapshot(previousSnapshot);\n        setHistoryIndex(prev => prev - 1);\n      } else {\n        console.error('Invalid snapshot found in history during undo');\n        // Remove the invalid snapshot and try again\n        setHistory(prev => prev.filter(snapshot => snapshot && snapshot.selectedAssets));\n        setHistoryIndex(prev => Math.max(0, prev - 1));\n      }\n      setIsUndoRedoAction(false);\n    }\n  };\n\n  // Redo function\n  const redo = () => {\n    if (historyIndex < history.length - 1 && history[historyIndex + 1]) {\n      setIsUndoRedoAction(true);\n      const nextSnapshot = history[historyIndex + 1];\n      if (nextSnapshot && nextSnapshot.selectedAssets) {\n        restoreFromSnapshot(nextSnapshot);\n        setHistoryIndex(prev => prev + 1);\n      } else {\n        console.error('Invalid snapshot found in history during redo');\n        // Remove the invalid snapshot and try again\n        setHistory(prev => prev.filter(snapshot => snapshot && snapshot.selectedAssets));\n        setHistoryIndex(prev => Math.min(prev, history.length - 1));\n      }\n      setIsUndoRedoAction(false);\n    }\n  };\n\n  // Execute an action and save to history\n  const executeAction = (actionFunction, actionDescription) => {\n    // Save current state before action\n    const currentSnapshot = createStateSnapshot(actionDescription);\n\n    // Execute the action\n    actionFunction();\n\n    // Add to history (unless this is an undo/redo action)\n    if (!isUndoRedoAction) {\n      setHistory(prev => {\n        const newHistory = [...prev.slice(0, historyIndex + 1), currentSnapshot];\n        // Limit history to last 50 actions to prevent memory issues\n        return newHistory.slice(-50);\n      });\n      setHistoryIndex(prev => Math.min(prev + 1, 49));\n    }\n  };\n\n  // Helper function to check if date is a non-working day (weekend or bank holiday)\n  const isNonWorkingDay = date => {\n    const day = date.getDay();\n    const yyyy_mm_dd = date.toISOString().split('T')[0];\n    return day === 0 || day === 6 || bankHolidays.includes(yyyy_mm_dd);\n  };\n\n  // Helper function to get previous working day\n  const getPreviousWorkingDay = date => {\n    let workingDate = new Date(date);\n    do {\n      workingDate.setDate(workingDate.getDate() - 1);\n    } while (isNonWorkingDay(workingDate));\n    return workingDate;\n  };\n\n  // Helper function to get next working day\n  const getNextWorkingDay = date => {\n    let workingDate = new Date(date);\n    do {\n      workingDate.setDate(workingDate.getDate() + 1);\n    } while (isNonWorkingDay(workingDate));\n    return workingDate;\n  };\n\n  // Helper function to subtract working days (backwards calculation)\n  const subtractWorkingDays = (endDate, workingDaysToSubtract) => {\n    let currentDate = new Date(endDate);\n    let remainingDays = workingDaysToSubtract;\n    // Subtract working days\n    while (remainingDays > 0) {\n      currentDate.setDate(currentDate.getDate() - 1);\n      // Only count non-non-working days\n      if (!isNonWorkingDay(currentDate)) {\n        remainingDays--;\n      }\n    }\n    return currentDate;\n  };\n\n  // Helper function to add working days (forward calculation for display)\n  const addWorkingDays = (startDate, workingDaysToAdd) => {\n    if (workingDaysToAdd <= 0) {\n      return new Date(startDate);\n    }\n    let currentDate = new Date(startDate);\n    let remainingDays = workingDaysToAdd - 1;\n    while (remainingDays > 0) {\n      currentDate.setDate(currentDate.getDate() + 1);\n      if (!isNonWorkingDay(currentDate)) {\n        remainingDays--;\n      }\n    }\n    // Ensure the final day is a working day\n    while (isNonWorkingDay(currentDate)) {\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    return currentDate;\n  };\n\n  // Load CSV data\n  useEffect(() => {\n    Papa.parse(`${window.location.origin}/Group_Asset_Task_Time.csv`, {\n      download: true,\n      header: true,\n      skipEmptyLines: true,\n      complete: results => {\n        const parsedData = results.data;\n        setCsvData(parsedData);\n\n        // Extract unique asset types from CSV\n        const assetTypes = [...new Set(parsedData.map(row => row['Asset Type']))].filter(type => type);\n        setUniqueAssets(assetTypes);\n      },\n      error: error => {\n        console.error(\"Error parsing CSV file:\", error);\n      }\n    });\n  }, []);\n\n  // Fetch UK bank holidays for England and Wales on app load\n  useEffect(() => {\n    fetch('https://www.gov.uk/bank-holidays.json').then(response => response.json()).then(data => {\n      // Get all dates for England and Wales\n      const events = data['england-and-wales'].events;\n      // Get all dates for the next 10 years\n      const now = new Date();\n      const tenYearsFromNow = new Date(now.getFullYear() + 10, now.getMonth(), now.getDate());\n      const holidayDates = events.map(event => event.date).filter(dateStr => {\n        const date = new Date(dateStr);\n        return date >= now && date <= tenYearsFromNow;\n      });\n      setBankHolidays(holidayDates);\n    }).catch(err => {\n      // If fetch fails, fallback to an empty array (or you could use a static list)\n      setBankHolidays([]);\n    });\n  }, []);\n\n  // Calculate backwards timeline when live dates or assets change\n  useEffect(() => {\n    if (selectedAssets.length === 0 || csvData.length === 0) {\n      setTimelineTasks([]);\n      setCalculatedStartDates({});\n      setProjectStartDate('');\n      setDateErrors([]);\n      return;\n    }\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Reset time for accurate comparison\n\n    const newCalculatedStartDates = {};\n    const newDateErrors = [];\n    const allStartDates = [];\n    const allTasks = [];\n\n    // Loop over each selected asset instance (not just type)\n    selectedAssets.forEach(asset => {\n      // asset: { id, type, name, startDate }\n      if (!asset.startDate) return; // Skip if no start date set\n\n      // Find all tasks for this asset type from the CSV\n      const assetTasks = csvData.filter(row => row['Asset Type'] === asset.type);\n      if (assetTasks.length === 0) return;\n\n      // Use the asset instance's startDate as the go-live date\n      const liveDate = new Date(asset.startDate);\n      if (isNaN(liveDate.getTime())) return;\n\n      // We'll build the tasks in reverse (from go-live backwards)\n      let currentEndDate = new Date(liveDate);\n      const ganttTasks = [];\n      let taskIndex = 0;\n\n      // Go-live task (single day)\n      const goLiveTaskId = `${asset.id}-go-live`;\n      ganttTasks.unshift({\n        id: goLiveTaskId,\n        name: getTaskName(goLiveTaskId, asset.name, {\n          'Task': 'Go-Live'\n        }),\n        start: liveDate.toISOString().split('T')[0],\n        end: liveDate.toISOString().split('T')[0],\n        progress: 0\n      });\n      taskIndex++;\n\n      // Process all other tasks in reverse order\n      for (let i = assetTasks.length - 1; i >= 0; i--) {\n        const taskInfo = assetTasks[i];\n        // Use custom duration if present, else default from CSV\n        // Use asset.type as the key to match CSV task names consistently\n        const customDurations = assetTaskDurations[asset.type] || {};\n        const duration = customDurations[taskInfo['Task']] !== undefined ? customDurations[taskInfo['Task']] : parseInt(taskInfo['Duration (Days)'], 10) || 1;\n        // Subtract working days to get the start date\n        const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n        // Task ends the working day before currentEndDate\n        const taskEndDate = new Date(currentEndDate);\n        taskEndDate.setDate(taskEndDate.getDate() - 1);\n        // Ensure end date is a working day\n        let finalTaskEndDate = new Date(taskEndDate);\n        if (isNonWorkingDay(finalTaskEndDate)) {\n          finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n        }\n        const taskId = `${asset.id}-task-${taskIndex}`;\n        ganttTasks.unshift({\n          id: taskId,\n          name: getTaskName(taskId, asset.name, taskInfo),\n          start: taskStartDate.toISOString().split('T')[0],\n          end: finalTaskEndDate.toISOString().split('T')[0],\n          progress: 0\n        });\n        taskIndex++;\n        // Update currentEndDate for the next task\n        currentEndDate = new Date(taskStartDate);\n      }\n\n      // Add all tasks for this asset instance to the main list\n      allTasks.push(...ganttTasks);\n\n      // Set the calculated start date for this asset to the start date of the first (earliest) task\n      if (ganttTasks.length > 0 && ganttTasks[0].start) {\n        newCalculatedStartDates[asset.id] = ganttTasks[0].start;\n        allStartDates.push(new Date(ganttTasks[0].start));\n      }\n\n      // Check if start date is before today\n      if (ganttTasks.length > 0 && new Date(ganttTasks[0].start) < today) {\n        newDateErrors.push(asset.id);\n      }\n    });\n\n    // Find earliest start date across all assets\n    if (allStartDates.length > 0) {\n      const earliestDate = new Date(Math.min(...allStartDates));\n      setProjectStartDate(earliestDate.toISOString().split('T')[0]);\n    }\n\n    // Integrate custom tasks into the main timeline calculation\n    const currentCustomTasks = timelineTasks.filter(task => task.isCustom);\n    if (currentCustomTasks.length > 0) {\n      setCustomTasks(currentCustomTasks);\n\n      // Create a unified timeline that includes both asset tasks and custom tasks\n      const unifiedTimeline = [...allTasks];\n\n      // Sort custom tasks by their original insertion order\n      const sortedCustomTasks = [...currentCustomTasks].sort((a, b) => {\n        const aIndex = timelineTasks.findIndex(task => task.id === a.id);\n        const bIndex = timelineTasks.findIndex(task => task.id === b.id);\n        return aIndex - bIndex;\n      });\n\n      // Insert custom tasks at their correct positions in the unified timeline\n      sortedCustomTasks.forEach(customTask => {\n        let insertIndex = 0;\n        if (customTask.insertAfterTaskId) {\n          const afterTaskIndex = unifiedTimeline.findIndex(task => task.id === customTask.insertAfterTaskId);\n          if (afterTaskIndex !== -1) {\n            insertIndex = afterTaskIndex + 1;\n          }\n        }\n\n        // Calculate the custom task dates based on the current unified timeline\n        let newTaskStartDate;\n        if (insertIndex === 0) {\n          // Insert at the beginning\n          newTaskStartDate = new Date(projectStartDate);\n        } else {\n          // Insert after another task\n          const previousTask = unifiedTimeline[insertIndex - 1];\n          const previousTaskEnd = new Date(previousTask.end);\n          newTaskStartDate = new Date(previousTaskEnd);\n          newTaskStartDate.setDate(newTaskStartDate.getDate() + 1);\n\n          // Ensure the start date is a working day\n          while (isNonWorkingDay(newTaskStartDate)) {\n            newTaskStartDate.setDate(newTaskStartDate.getDate() + 1);\n          }\n        }\n\n        // Calculate the end date based on duration (inclusive)\n        let newTaskEndDate = new Date(newTaskStartDate);\n        let newTaskRemainingDays = customTask.duration - 1;\n        while (newTaskRemainingDays > 0) {\n          newTaskEndDate.setDate(newTaskEndDate.getDate() + 1);\n          if (!isNonWorkingDay(newTaskEndDate)) {\n            newTaskRemainingDays--;\n          }\n        }\n\n        // Create the custom task with recalculated dates\n        const newCustomTask = {\n          ...customTask,\n          id: customTask.id,\n          name: customTask.name,\n          duration: customTask.duration,\n          start: newTaskStartDate.toISOString().split('T')[0],\n          end: newTaskEndDate.toISOString().split('T')[0],\n          isCustom: true\n        };\n\n        // Insert the custom task into the unified timeline\n        unifiedTimeline.splice(insertIndex, 0, newCustomTask);\n      });\n\n      // After inserting custom tasks, rebuild the timeline backwards from go-live\n      // This preserves the fixed go-live date and respects manual duration overrides\n      const finalTimeline = [];\n\n      // Group tasks by asset to maintain the backwards calculation\n      const tasksByAsset = {};\n      unifiedTimeline.forEach(task => {\n        if (task.isCustom) {\n          // Custom tasks will be inserted at their specified positions\n          if (!tasksByAsset.custom) tasksByAsset.custom = [];\n          tasksByAsset.custom.push(task);\n        } else {\n          // Asset tasks are grouped by their asset ID\n          const assetId = task.id.split('-')[0];\n          if (!tasksByAsset[assetId]) tasksByAsset[assetId] = [];\n          tasksByAsset[assetId].push(task);\n        }\n      });\n\n      // Rebuild each asset's timeline backwards from go-live\n      selectedAssets.forEach(asset => {\n        const assetTasks = tasksByAsset[asset.id] || [];\n        if (assetTasks.length === 0) return;\n\n        // Separate go-live task from other tasks\n        const goLiveTask = assetTasks.find(task => task.name.includes('Go-Live'));\n        const regularTasks = assetTasks.filter(task => !task.name.includes('Go-Live'));\n\n        // Build backwards from go-live to calculate dates\n        let currentEndDate = new Date(asset.startDate);\n        const calculatedTasks = [];\n\n        // Calculate dates for regular tasks in reverse order (backwards from go-live)\n        for (let i = regularTasks.length - 1; i >= 0; i--) {\n          const task = regularTasks[i];\n          const taskInfo = csvData.find(row => row['Asset Type'] === asset.type && row['Task'] === task.name.split(': ')[1]);\n\n          // Use manual duration override if available\n          const customDurations = assetTaskDurations[asset.id] || {};\n          const duration = customDurations[taskInfo === null || taskInfo === void 0 ? void 0 : taskInfo['Task']] !== undefined ? customDurations[taskInfo['Task']] : parseInt(taskInfo === null || taskInfo === void 0 ? void 0 : taskInfo['Duration (Days)'], 10) || 1;\n          const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n          const taskEndDate = new Date(currentEndDate);\n          taskEndDate.setDate(taskEndDate.getDate() - 1);\n\n          // Ensure end date is a working day\n          let finalTaskEndDate = new Date(taskEndDate);\n          if (isNonWorkingDay(finalTaskEndDate)) {\n            finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n          }\n          calculatedTasks.unshift({\n            ...task,\n            start: taskStartDate.toISOString().split('T')[0],\n            end: finalTaskEndDate.toISOString().split('T')[0]\n          });\n          currentEndDate = new Date(taskStartDate);\n        }\n\n        // Add go-live task at the end\n        if (goLiveTask) {\n          calculatedTasks.push({\n            ...goLiveTask,\n            start: asset.startDate,\n            end: asset.startDate\n          });\n        }\n\n        // Add all tasks to final timeline in correct order\n        finalTimeline.push(...calculatedTasks);\n      });\n\n      // Now rebuild the entire timeline sequentially including custom tasks\n      const allTasksSequential = [];\n\n      // First, collect all tasks (asset tasks + custom tasks) in the correct order\n      selectedAssets.forEach(asset => {\n        const assetTasks = tasksByAsset[asset.id] || [];\n        const customTasksForAsset = customTasks.filter(ct => {\n          // Find which asset this custom task belongs to based on insertAfterTaskId\n          if (ct.insertAfterTaskId) {\n            const afterTask = assetTasks.find(task => task.id === ct.insertAfterTaskId);\n            return afterTask !== undefined;\n          }\n          return false;\n        });\n\n        // Separate go-live task from regular tasks\n        const goLiveTask = assetTasks.find(task => task.name.includes('Go-Live'));\n        const regularTasks = assetTasks.filter(task => !task.name.includes('Go-Live'));\n\n        // Create ordered task list for this asset\n        const orderedTasks = [];\n\n        // Add regular tasks in their original order\n        regularTasks.forEach((task, index) => {\n          orderedTasks.push(task);\n\n          // Insert custom tasks that should go after this task\n          const customTasksAfterThis = customTasksForAsset.filter(ct => ct.insertAfterTaskId === task.id);\n          orderedTasks.push(...customTasksAfterThis);\n        });\n\n        // Add go-live task at the end\n        if (goLiveTask) {\n          orderedTasks.push(goLiveTask);\n        }\n\n        // Now build the timeline backwards from go-live for this asset\n        let currentEndDate = new Date(asset.startDate);\n        const assetTimeline = [];\n\n        // Process tasks in reverse order (backwards from go-live)\n        for (let i = orderedTasks.length - 1; i >= 0; i--) {\n          const task = orderedTasks[i];\n          if (task.isCustom) {\n            // Custom task - calculate backwards\n            const taskStartDate = subtractWorkingDays(currentEndDate, task.duration);\n            const taskEndDate = new Date(currentEndDate);\n            taskEndDate.setDate(taskEndDate.getDate() - 1);\n\n            // Ensure end date is a working day\n            let finalTaskEndDate = new Date(taskEndDate);\n            if (isNonWorkingDay(finalTaskEndDate)) {\n              finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n            }\n            assetTimeline.unshift({\n              ...task,\n              start: taskStartDate.toISOString().split('T')[0],\n              end: finalTaskEndDate.toISOString().split('T')[0]\n            });\n            currentEndDate = new Date(taskStartDate);\n          } else if (task.name.includes('Go-Live')) {\n            // Go-live task\n            assetTimeline.unshift({\n              ...task,\n              start: currentEndDate.toISOString().split('T')[0],\n              end: currentEndDate.toISOString().split('T')[0]\n            });\n          } else {\n            // Regular asset task - calculate backwards\n            const taskInfo = csvData.find(row => row['Asset Type'] === asset.type && row['Task'] === task.name.split(': ')[1]);\n\n            // Use manual duration override if available\n            const customDurations = assetTaskDurations[asset.id] || {};\n            const duration = customDurations[taskInfo === null || taskInfo === void 0 ? void 0 : taskInfo['Task']] !== undefined ? customDurations[taskInfo['Task']] : parseInt(taskInfo === null || taskInfo === void 0 ? void 0 : taskInfo['Duration (Days)'], 10) || 1;\n            const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n            const taskEndDate = new Date(currentEndDate);\n            taskEndDate.setDate(taskEndDate.getDate() - 1);\n\n            // Ensure end date is a working day\n            let finalTaskEndDate = new Date(taskEndDate);\n            if (isNonWorkingDay(finalTaskEndDate)) {\n              finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n            }\n            assetTimeline.unshift({\n              ...task,\n              start: taskStartDate.toISOString().split('T')[0],\n              end: finalTaskEndDate.toISOString().split('T')[0]\n            });\n            currentEndDate = new Date(taskStartDate);\n          }\n        }\n\n        // Add this asset's timeline to the main timeline\n        allTasksSequential.push(...assetTimeline);\n      });\n\n      // Update the final timeline\n      finalTimeline.length = 0;\n      finalTimeline.push(...allTasksSequential);\n      setTimelineTasks(finalTimeline);\n\n      // Recalculate dateErrors based on the final timeline\n      const finalDateErrors = [];\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      selectedAssets.forEach(asset => {\n        const assetTasks = finalTimeline.filter(task => task.id.startsWith(`${asset.id}-`) && !task.name.includes('Go-Live'));\n        if (assetTasks.length > 0) {\n          // Find the earliest task for this asset\n          const earliestTask = assetTasks.reduce((earliest, task) => {\n            return new Date(task.start) < new Date(earliest.start) ? task : earliest;\n          });\n\n          // Update calculated start date\n          newCalculatedStartDates[asset.id] = earliestTask.start;\n\n          // Check if start date is before today\n          if (new Date(earliestTask.start) < today) {\n            finalDateErrors.push(asset.id);\n          }\n        }\n      });\n      setCalculatedStartDates(newCalculatedStartDates);\n      setDateErrors(finalDateErrors);\n    } else {\n      setTimelineTasks(allTasks);\n      setCalculatedStartDates(newCalculatedStartDates);\n      setDateErrors(newDateErrors);\n    }\n  }, [selectedAssets, globalLiveDate, useGlobalDate, assetLiveDates, csvData, assetTaskDurations, customTaskNames]);\n\n  // Keyboard shortcuts for undo/redo\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if ((e.ctrlKey || e.metaKey) && e.key === 'z' && !e.shiftKey) {\n        e.preventDefault();\n        undo();\n      }\n      if ((e.ctrlKey || e.metaKey) && e.key === 'y' || (e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'z') {\n        e.preventDefault();\n        redo();\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [historyIndex, history.length]);\n  // This new useEffect pre-populates individual dates when switching from global mode\n  useEffect(() => {\n    if (!useGlobalDate && globalLiveDate && selectedAssets.length > 0) {\n      const newLiveDates = {\n        ...assetLiveDates\n      };\n      let updated = false;\n      selectedAssets.forEach(asset => {\n        // Pre-fill only if the asset doesn't have an individual date set\n        if (!newLiveDates[asset.name]) {\n          // Changed to asset.name\n          newLiveDates[asset.name] = globalLiveDate; // Changed to asset.name\n          updated = true;\n        }\n      });\n      if (updated) {\n        setAssetLiveDates(newLiveDates);\n      }\n    }\n  }, [useGlobalDate, globalLiveDate, selectedAssets, assetLiveDates]);\n\n  // Sync all asset instance startDates to globalLiveDate if useGlobalDate is true\n  useEffect(() => {\n    if (useGlobalDate && globalLiveDate && !isUndoRedoAction) {\n      setSelectedAssets(prev => prev.map(asset => asset.startDate !== globalLiveDate ? {\n        ...asset,\n        startDate: globalLiveDate\n      } : asset));\n    }\n    // Optionally, if unchecked, you could clear the dates or leave as-is\n  }, [useGlobalDate, globalLiveDate]);\n\n  // Preserve custom tasks whenever timelineTasks changes\n  useEffect(() => {\n    const currentCustomTasks = timelineTasks.filter(task => task.isCustom);\n    if (currentCustomTasks.length > 0) {\n      setCustomTasks(currentCustomTasks);\n    }\n  }, [timelineTasks]);\n\n  // REMOVED: Separate custom task merging useEffect\n  // Custom tasks are now integrated directly into the main timeline calculation\n\n  // REMOVED: Custom task merging useEffect that was causing timeline disruption\n  // Custom tasks are now handled properly in the main timeline calculation\n  // Generate timeline tasks for Gantt chart\n  const generateTimelineTasks = startDates => {\n    if (selectedAssets.length === 0 || Object.keys(startDates).length === 0) {\n      setTimelineTasks([]);\n      return;\n    }\n    const allTasks = [];\n    let taskIndex = 0;\n    selectedAssets.forEach(asset => {\n      const assetName = asset.name; // Assuming asset object has a 'name' property\n      const assetTasks = csvData.filter(row => row['Asset Type'] === assetName);\n      if (assetTasks.length === 0) return;\n\n      // Get the correct live date for this asset\n      const liveDate = new Date(useGlobalDate ? globalLiveDate : assetLiveDates[assetName]);\n      if (isNaN(liveDate.getTime())) return;\n\n      // We'll build the tasks in reverse (from go-live backwards)\n      let currentEndDate = new Date(liveDate);\n      const ganttTasks = [];\n      let taskIndex = 0;\n\n      // Go-live task (single day)\n      ganttTasks.unshift({\n        id: `task-${taskIndex}`,\n        name: `${assetName}: Go-Live`,\n        start: liveDate.toISOString().split('T')[0],\n        end: liveDate.toISOString().split('T')[0],\n        progress: 0\n      });\n      taskIndex++;\n\n      // Process all other tasks in reverse order\n      for (let i = assetTasks.length - 1; i >= 0; i--) {\n        const taskInfo = assetTasks[i];\n        const duration = parseInt(taskInfo['Duration (Days)'], 10) || 1;\n        // Subtract working days to get the start date\n        const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n        // Task ends the working day before currentEndDate\n        const taskEndDate = new Date(currentEndDate);\n        taskEndDate.setDate(taskEndDate.getDate() - 1);\n        // Ensure end date is a working day\n        let finalTaskEndDate = new Date(taskEndDate);\n        if (isNonWorkingDay(finalTaskEndDate)) {\n          finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n        }\n        ganttTasks.unshift({\n          id: `task-${taskIndex}`,\n          name: `${taskInfo['Asset Type']}: ${taskInfo['Task']}`,\n          start: taskStartDate.toISOString().split('T')[0],\n          end: finalTaskEndDate.toISOString().split('T')[0],\n          progress: 0\n        });\n        taskIndex++;\n        // Update currentEndDate for the next task\n        currentEndDate = new Date(taskStartDate);\n      }\n\n      // Add all tasks for this asset to the main list\n      allTasks.push(...ganttTasks);\n\n      // Set the calculated start date for this asset to the start date of the first (earliest) task\n      if (ganttTasks.length > 0 && ganttTasks[0].start) {\n        newCalculatedStartDates[assetName] = ganttTasks[0].start;\n      }\n    });\n\n    // Merge custom tasks back into the timeline\n    if (customTasks.length > 0) {\n      // Insert custom tasks at their specified positions\n      customTasks.forEach(customTask => {\n        let insertIndex = 0;\n        if (customTask.insertAfterTaskId) {\n          const afterTaskIndex = allTasks.findIndex(task => task.id === customTask.insertAfterTaskId);\n          if (afterTaskIndex !== -1) {\n            insertIndex = afterTaskIndex + 1;\n          }\n        }\n\n        // Create a new custom task with updated dates\n        const newCustomTask = {\n          ...customTask,\n          id: customTask.id,\n          // Keep the same ID\n          name: customTask.name,\n          duration: customTask.duration,\n          isCustom: true\n        };\n\n        // Insert the custom task\n        allTasks.splice(insertIndex, 0, newCustomTask);\n      });\n\n      // Recalculate all task dates to accommodate custom tasks\n      // This is a simplified version - in practice, you'd want to recalculate dates\n      // based on the new timeline structure\n    }\n    setCalculatedStartDates(newCalculatedStartDates);\n    setTimelineTasks(allTasks);\n  };\n\n  // Helper to generate a unique id (could use a counter or Date.now())\n  const generateAssetId = () => Date.now() + Math.random();\n\n  // Add a new asset instance\n  const handleAddAsset = assetType => {\n    executeAction(() => {\n      const newAsset = {\n        id: generateAssetId(),\n        type: assetType,\n        name: assetType,\n        // default name, can be edited later\n        startDate: useGlobalDate && globalLiveDate ? globalLiveDate : ''\n      };\n      setSelectedAssets(prev => [...prev, newAsset]);\n    }, `Add ${assetType} asset`);\n  };\n\n  // Remove an asset instance by id\n  const handleRemoveAsset = assetId => {\n    const assetToRemove = selectedAssets.find(asset => asset.id === assetId);\n    executeAction(() => {\n      setSelectedAssets(prev => prev.filter(asset => asset.id !== assetId));\n    }, `Remove ${(assetToRemove === null || assetToRemove === void 0 ? void 0 : assetToRemove.name) || 'asset'}`);\n  };\n\n  // Handler to rename an asset instance by id\n  const handleRenameAsset = (assetId, newName) => {\n    const assetToRename = selectedAssets.find(asset => asset.id === assetId);\n    executeAction(() => {\n      setSelectedAssets(prev => prev.map(asset => asset.id === assetId ? {\n        ...asset,\n        name: newName\n      } : asset));\n    }, `Rename asset to \"${newName}\"`);\n  };\n\n  // Handler to rename a task\n  const handleRenameTask = (taskId, newName) => {\n    const currentTask = timelineTasks.find(task => task.id === taskId);\n    executeAction(() => {\n      setCustomTaskNames(prev => ({\n        ...prev,\n        [taskId]: newName\n      }));\n    }, `Rename task to \"${newName}\"`);\n  };\n  const handleAssetLiveDateChange = (assetName, date) => {\n    executeAction(() => {\n      setAssetLiveDates(prev => ({\n        ...prev,\n        [assetName]: date\n      }));\n    }, `Change ${assetName} go-live date to ${date}`);\n  };\n  const handleAssetStartDateChange = (assetId, newDate) => {\n    const assetToUpdate = selectedAssets.find(asset => asset.id === assetId);\n    executeAction(() => {\n      setSelectedAssets(prev => prev.map(asset => asset.id === assetId ? {\n        ...asset,\n        startDate: newDate\n      } : asset));\n    }, `Change ${(assetToUpdate === null || assetToUpdate === void 0 ? void 0 : assetToUpdate.name) || 'asset'} go-live date to ${newDate}`);\n  };\n\n  // Handler to save custom task durations for an asset\n  const handleSaveTaskDurations = (assetId, durations) => {\n    const assetToUpdate = selectedAssets.find(asset => asset.id === assetId);\n    executeAction(() => {\n      setAssetTaskDurations(prev => ({\n        ...prev,\n        [assetId]: durations\n      }));\n\n      // Preserve custom tasks before timeline recalculation\n      const currentCustomTasks = timelineTasks.filter(task => task.isCustom);\n      setCustomTasks(currentCustomTasks);\n    }, `Update task durations for ${(assetToUpdate === null || assetToUpdate === void 0 ? void 0 : assetToUpdate.name) || 'asset'}`);\n  };\n\n  // Handler for drag-to-resize task duration\n  const handleTaskDurationChange = (taskId, newDuration, newEndDate) => {\n    // Find the task being modified\n    const taskIndex = timelineTasks.findIndex(task => task.id === taskId);\n    if (taskIndex === -1) return;\n    const task = timelineTasks[taskIndex];\n    const taskName = task.name.split(': ')[1]; // Get task name after the colon\n    const assetName = task.name.split(': ')[0]; // Get asset name before the colon\n\n    // Find the asset by name\n    const asset = selectedAssets.find(a => a.name === assetName);\n    if (!asset) return;\n    executeAction(() => {\n      // Update the assetTaskDurations state to trigger the same recalculation logic\n      // that the manual duration editing uses\n      // Use asset.type as the key to match CSV task names consistently\n      setAssetTaskDurations(prev => {\n        const currentDurations = prev[asset.type] || {};\n        return {\n          ...prev,\n          [asset.type]: {\n            ...currentDurations,\n            [taskName]: newDuration\n          }\n        };\n      });\n    }, `Change ${taskName} duration to ${newDuration} days`);\n  };\n\n  // Handler for adding custom tasks\n  const handleAddCustomTask = customTaskData => {\n    const {\n      name,\n      duration,\n      insertAfterTaskId\n    } = customTaskData;\n    executeAction(() => {\n      // Create the new custom task\n      const newTaskId = `custom-task-${Date.now()}`;\n      const newTask = {\n        id: newTaskId,\n        name: `Custom: ${name}`,\n        duration: duration,\n        insertAfterTaskId: insertAfterTaskId,\n        isCustom: true,\n        progress: 0\n      };\n\n      // Add to custom tasks - this will trigger the main timeline calculation useEffect\n      setCustomTasks(prev => [...prev, newTask]);\n\n      // Don't manually insert into timelineTasks here - let the main useEffect handle it\n      // This ensures proper timeline recalculation and date adjustments\n    }, `Add custom task \"${name}\"`);\n  };\n\n  // Helper function to count working days between two dates (exclusive)\n  const countWorkingDays = (startDate, endDate) => {\n    let count = 0;\n    const current = new Date(startDate);\n    const end = new Date(endDate);\n\n    // Move to next day to make it exclusive\n    current.setDate(current.getDate() + 1);\n    while (current <= end) {\n      if (!isNonWorkingDay(current)) {\n        count++;\n      }\n      current.setDate(current.getDate() + 1);\n    }\n    return count;\n  };\n\n  // Single source of truth for working days calculation (same as AssetSelector)\n  const calculateWorkingDaysBetween = (startDate, endDate) => {\n    if (!startDate || !endDate) return 0;\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    if (start >= end) return 0;\n    let workingDays = 0;\n    let currentDate = new Date(start);\n    while (currentDate < end) {\n      const dayOfWeek = currentDate.getDay();\n      // Count if not weekend (0 = Sunday, 6 = Saturday)\n      if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n        workingDays++;\n      }\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    return workingDays;\n  };\n\n  // Helper function to calculate task end date based on start date and duration\n  const calculateTaskEndDate = (startDate, duration) => {\n    let endDate = new Date(startDate);\n    let remainingDays = duration - 1; // -1 because we count the start date\n\n    while (remainingDays > 0) {\n      endDate.setDate(endDate.getDate() + 1);\n      if (!isNonWorkingDay(endDate)) {\n        remainingDays--;\n      }\n    }\n    return endDate.toISOString().split('T')[0];\n  };\n\n  // Calculate working days needed per asset for detailed timeline alerts\n  const calculateWorkingDaysNeededPerAsset = () => {\n    if (!globalLiveDate || timelineTasks.length === 0) return [];\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const assetAlerts = [];\n\n    // Calculate for each asset that has date errors\n    selectedAssets.forEach(asset => {\n      const calculatedStart = calculatedStartDates[asset.id];\n      if (calculatedStart && dateErrors.includes(asset.id)) {\n        const startDate = new Date(calculatedStart);\n        const daysInPast = calculateWorkingDaysBetween(startDate, today);\n        if (daysInPast > 0) {\n          assetAlerts.push({\n            assetId: asset.id,\n            assetName: asset.name,\n            assetType: asset.type,\n            daysNeeded: daysInPast,\n            daysSaved: 0,\n            // This would need to be calculated based on original vs current durations\n            startDate: calculatedStart,\n            isCritical: daysInPast > 5 // Mark as critical if more than 5 days needed\n          });\n        }\n      }\n    });\n\n    // Sort by urgency (most days needed first)\n    return assetAlerts.sort((a, b) => b.daysNeeded - a.daysNeeded);\n  };\n\n  // Single source of truth for working days needed (same as AssetSelector's getWorkingDaysToSave)\n  const calculateWorkingDaysNeeded = () => {\n    if (!globalLiveDate || timelineTasks.length === 0) return null;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    // Use the exact same logic as AssetSelector's getWorkingDaysToSave\n    let totalDaysInPast = 0;\n\n    // Only count assets that are in dateErrors (same as asset-specific calculation)\n    selectedAssets.forEach(asset => {\n      const calculatedStart = calculatedStartDates[asset.id];\n      if (calculatedStart && dateErrors.includes(asset.id)) {\n        const startDate = new Date(calculatedStart);\n        totalDaysInPast += calculateWorkingDaysBetween(startDate, today);\n      }\n    });\n\n    // Also check custom tasks that start in the past\n    timelineTasks.forEach(task => {\n      if (task.isCustom) {\n        const taskStart = new Date(task.start);\n        if (taskStart < today) {\n          totalDaysInPast += calculateWorkingDaysBetween(taskStart, today);\n        }\n      }\n    });\n    return {\n      available: 0,\n      // Not used in this calculation\n      allocated: 0,\n      // Not used in this calculation\n      needed: totalDaysInPast\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-100 min-h-screen font-sans\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-white shadow-md\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto px-6 py-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-3xl font-bold text-gray-800\",\n            children: \"Accordion Timeline Builder\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1097,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: undo,\n              disabled: historyIndex <= 0,\n              className: \"px-3 py-1 bg-gray-500 text-white rounded text-sm hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\",\n              title: \"Undo (Ctrl+Z)\",\n              children: \"\\u21A9\\uFE0F Undo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1099,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: redo,\n              disabled: historyIndex >= history.length - 1,\n              className: \"px-3 py-1 bg-gray-500 text-white rounded text-sm hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\",\n              title: \"Redo (Ctrl+Y)\",\n              children: \"\\u21AA\\uFE0F Redo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1107,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1098,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1096,\n          columnNumber: 21\n        }, this), showInfoBox && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative mb-6 mt-4 p-4 bg-blue-50 border border-blue-200 rounded-md text-sm text-blue-900\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"absolute top-2 right-2 text-blue-700 hover:text-blue-900 text-lg font-bold focus:outline-none\",\n            onClick: () => {\n              executeAction(() => setShowInfoBox(false), \"Hide instructions\");\n            },\n            \"aria-label\": \"Close instructions\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1120,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"How to Build Your Campaign Timeline:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1129,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n            className: \"list-decimal pl-5 mt-2 space-y-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Choose Your Campaign Start Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1132,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1132,\n                columnNumber: 86\n              }, this), \"If all assets launch on the same day, set a global start date and check \\u201CUse same live date for all assets.\\u201D\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1133,\n                columnNumber: 145\n              }, this), \"If assets launch on different days, uncheck the box and set dates individually for each asset.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1131,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Add Assets:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1137,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1137,\n                columnNumber: 65\n              }, this), \"Click \\u201CAdd\\u201D next to each asset type you need.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1138,\n                columnNumber: 82\n              }, this), \"Need the same asset type more than once? Click \\u201CAdd\\u201D again and give each a unique name.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1136,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Customize Assets:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1142,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1142,\n                columnNumber: 71\n              }, this), \"Rename each asset for clarity (e.g., \\u201CMetro Advertorial \\u2013 August\\u201D).\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1143,\n                columnNumber: 104\n              }, this), \"Set or confirm the start date for each asset.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1141,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Review Your Timeline:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1147,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1147,\n                columnNumber: 75\n              }, this), \"Remove any asset you don\\u2019t need.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1148,\n                columnNumber: 69\n              }, this), \"Check the timeline to ensure all assets are scheduled as planned.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1146,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Adjust Your Timeline if Needed:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1152,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1152,\n                columnNumber: 85\n              }, this), \"If an asset\\u2019s timeline can\\u2019t be completed by the selected start date, you\\u2019ll see a warning.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1153,\n                columnNumber: 128\n              }, this), \"\\u2013 You can either change the go-live date, or\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1154,\n                columnNumber: 81\n              }, this), \"\\u2013 Manually shorten the durations of individual tasks (\\u201Caccordion\\u201D your timeline) until the schedule fits.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1151,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Undo/Redo:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1158,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1158,\n                columnNumber: 64\n              }, this), \"Use Ctrl+Z to undo and Ctrl+Y to redo any changes you make.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1159,\n                columnNumber: 96\n              }, this), \"You can also use the Undo/Redo buttons in the top-right corner.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1157,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1130,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1119,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1095,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1094,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container mx-auto p-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 lg:grid-cols-3 gap-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lg:col-span-1 bg-white p-6 rounded-xl shadow-lg overflow-x-auto\",\n          style: {\n            minWidth: 380\n          } // You can adjust 380 to your needs\n          ,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\",\n            children: \"Timeline Setup\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1174,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CampaignSetup, {\n            globalLiveDate: globalLiveDate,\n            onGlobalLiveDateChange: date => {\n              executeAction(() => setGlobalLiveDate(date), `Change global go-live date to ${date}`);\n            },\n            useGlobalDate: useGlobalDate,\n            onUseGlobalDateChange: useGlobal => {\n              executeAction(() => setUseGlobalDate(useGlobal), `Switch to ${useGlobal ? 'global' : 'individual'} date mode`);\n            },\n            projectStartDate: projectStartDate,\n            dateErrors: dateErrors,\n            workingDaysNeeded: calculateWorkingDaysNeeded()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1175,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AssetSelector, {\n            assets: uniqueAssets || [],\n            selectedAssets: selectedAssets || [],\n            onAddAsset: handleAddAsset,\n            onRemoveAsset: handleRemoveAsset,\n            useGlobalDate: useGlobalDate,\n            globalLiveDate: globalLiveDate || '',\n            assetLiveDates: assetLiveDates || {},\n            onAssetLiveDateChange: handleAssetLiveDateChange,\n            calculatedStartDates: calculatedStartDates || {},\n            dateErrors: dateErrors || [],\n            onRenameAsset: handleRenameAsset,\n            onAssetStartDateChange: handleAssetStartDateChange,\n            csvData: csvData,\n            onSaveTaskDurations: handleSaveTaskDurations,\n            isNonWorkingDay: isNonWorkingDay,\n            calculateWorkingDaysBetween: calculateWorkingDaysBetween\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1188,\n            columnNumber: 1\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1170,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lg:col-span-2 bg-white p-6 rounded-xl shadow-lg\",\n          style: {\n            minWidth: 0,\n            maxWidth: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\",\n            children: \"Generated Timeline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1213,\n            columnNumber: 25\n          }, this), timelineTasks && timelineTasks.length > 0 ? /*#__PURE__*/_jsxDEV(GanttChart, {\n            tasks: timelineTasks,\n            bankHolidays: bankHolidays,\n            onTaskDurationChange: handleTaskDurationChange,\n            onTaskNameChange: handleRenameTask,\n            workingDaysNeeded: calculateWorkingDaysNeeded(),\n            assetAlerts: calculateWorkingDaysNeededPerAsset(),\n            onAddCustomTask: handleAddCustomTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1236,\n            columnNumber: 53\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-gray-500 py-10\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-lg\",\n              children: \"Your timeline will appear here.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1247,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm\",\n              children: \"Set a live date and select some assets to begin.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1248,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1246,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1209,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1168,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1167,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1093,\n    columnNumber: 9\n  }, this);\n};\n_s(TimelineBuilder, \"EBwDazg7yUx16OZ1GRS3EIVKCoY=\");\n_c = TimelineBuilder;\nexport default TimelineBuilder;\nvar _c;\n$RefreshReg$(_c, \"TimelineBuilder\");","map":{"version":3,"names":["React","useState","useEffect","Papa","AssetSelector","CampaignSetup","GanttChart","jsxDEV","_jsxDEV","TimelineBuilder","_s","csvData","setCsvData","uniqueAssets","setUniqueAssets","selectedAssets","setSelectedAssets","globalLiveDate","setGlobalLiveDate","useGlobalDate","setUseGlobalDate","assetLiveDates","setAssetLiveDates","calculatedStartDates","setCalculatedStartDates","projectStartDate","setProjectStartDate","dateErrors","setDateErrors","timelineTasks","setTimelineTasks","showInfoBox","setShowInfoBox","assetTaskDurations","setAssetTaskDurations","customTasks","setCustomTasks","customTaskNames","setCustomTaskNames","bankHolidays","setBankHolidays","history","setHistory","historyIndex","setHistoryIndex","isUndoRedoAction","setIsUndoRedoAction","getTaskName","taskId","assetName","taskInfo","createStateSnapshot","actionDescription","JSON","parse","stringify","timestamp","Date","now","actionType","restoreFromSnapshot","snapshot","console","error","undefined","undo","previousSnapshot","prev","filter","Math","max","redo","length","nextSnapshot","min","executeAction","actionFunction","currentSnapshot","newHistory","slice","isNonWorkingDay","date","day","getDay","yyyy_mm_dd","toISOString","split","includes","getPreviousWorkingDay","workingDate","setDate","getDate","getNextWorkingDay","subtractWorkingDays","endDate","workingDaysToSubtract","currentDate","remainingDays","addWorkingDays","startDate","workingDaysToAdd","window","location","origin","download","header","skipEmptyLines","complete","results","parsedData","data","assetTypes","Set","map","row","type","fetch","then","response","json","events","tenYearsFromNow","getFullYear","getMonth","holidayDates","event","dateStr","catch","err","today","setHours","newCalculatedStartDates","newDateErrors","allStartDates","allTasks","forEach","asset","assetTasks","liveDate","isNaN","getTime","currentEndDate","ganttTasks","taskIndex","goLiveTaskId","id","unshift","name","start","end","progress","i","customDurations","duration","parseInt","taskStartDate","taskEndDate","finalTaskEndDate","push","earliestDate","currentCustomTasks","task","isCustom","unifiedTimeline","sortedCustomTasks","sort","a","b","aIndex","findIndex","bIndex","customTask","insertIndex","insertAfterTaskId","afterTaskIndex","newTaskStartDate","previousTask","previousTaskEnd","newTaskEndDate","newTaskRemainingDays","newCustomTask","splice","finalTimeline","tasksByAsset","custom","assetId","goLiveTask","find","regularTasks","calculatedTasks","allTasksSequential","customTasksForAsset","ct","afterTask","orderedTasks","index","customTasksAfterThis","assetTimeline","finalDateErrors","startsWith","earliestTask","reduce","earliest","handleKeyDown","e","ctrlKey","metaKey","key","shiftKey","preventDefault","document","addEventListener","removeEventListener","newLiveDates","updated","generateTimelineTasks","startDates","Object","keys","generateAssetId","random","handleAddAsset","assetType","newAsset","handleRemoveAsset","assetToRemove","handleRenameAsset","newName","assetToRename","handleRenameTask","currentTask","handleAssetLiveDateChange","handleAssetStartDateChange","newDate","assetToUpdate","handleSaveTaskDurations","durations","handleTaskDurationChange","newDuration","newEndDate","taskName","currentDurations","handleAddCustomTask","customTaskData","newTaskId","newTask","countWorkingDays","count","current","calculateWorkingDaysBetween","workingDays","dayOfWeek","calculateTaskEndDate","calculateWorkingDaysNeededPerAsset","assetAlerts","calculatedStart","daysInPast","daysNeeded","daysSaved","isCritical","calculateWorkingDaysNeeded","totalDaysInPast","taskStart","available","allocated","needed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","title","style","minWidth","onGlobalLiveDateChange","onUseGlobalDateChange","useGlobal","workingDaysNeeded","assets","onAddAsset","onRemoveAsset","onAssetLiveDateChange","onRenameAsset","onAssetStartDateChange","onSaveTaskDurations","maxWidth","tasks","onTaskDurationChange","onTaskNameChange","onAddCustomTask","_c","$RefreshReg$"],"sources":["/Users/hamishnicklin/Accordion3F/src/TimelineBuilder.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport AssetSelector from './components/AssetSelector';\nimport CampaignSetup from './components/CampaignSetup';\nimport GanttChart from './components/GanttChart';\n\nconst TimelineBuilder = () => {\n    // CSV and asset data\n    const [csvData, setCsvData] = useState([]);\n    const [uniqueAssets, setUniqueAssets] = useState([]);\n    // Each selected asset is now an object with a unique id, type, name, and startDate\n    const [selectedAssets, setSelectedAssets] = useState([]);\n    \n    // Live date management\n    const [globalLiveDate, setGlobalLiveDate] = useState('');\n    const [useGlobalDate, setUseGlobalDate] = useState(true);\n    const [assetLiveDates, setAssetLiveDates] = useState({}); // {assetName: 'YYYY-MM-DD'}\n    \n    // Calculated results\n    const [calculatedStartDates, setCalculatedStartDates] = useState({}); // {assetName: 'YYYY-MM-DD'}\n    const [projectStartDate, setProjectStartDate] = useState(''); // Earliest start date across all assets\n    const [dateErrors, setDateErrors] = useState([]); // Array of asset names that start before today\n    \n    // Final timeline for display\n    const [timelineTasks, setTimelineTasks] = useState([]);\n    const [showInfoBox, setShowInfoBox] = useState(true); // Add state for info box\n\n    // Add state to store custom task durations for each asset instance\n    const [assetTaskDurations, setAssetTaskDurations] = useState({}); // { assetId: { taskName: duration, ... } }\n\n    // Add state to store custom tasks separately\n    const [customTasks, setCustomTasks] = useState([]); // Array of custom task objects\n\n    // Add state to store custom task names\n    const [customTaskNames, setCustomTaskNames] = useState({}); // { taskId: customName }\n\n    // Add state to store bank holidays\n    const [bankHolidays, setBankHolidays] = useState([]); // Array of YYYY-MM-DD strings\n\n    // Undo/Redo infrastructure\n    const [history, setHistory] = useState([]);\n    const [historyIndex, setHistoryIndex] = useState(-1);\n    const [isUndoRedoAction, setIsUndoRedoAction] = useState(false);\n\n    // Helper function to get task name (custom or default)\n    const getTaskName = (taskId, assetName, taskInfo) => {\n        // Check if there's a custom name for this task\n        if (customTaskNames[taskId]) {\n            return customTaskNames[taskId];\n        }\n        // Return default format\n        return `${assetName}: ${taskInfo['Task']}`;\n    };\n\n    // Create a snapshot of the current app state for undo/redo\n    const createStateSnapshot = (actionDescription) => ({\n        // Asset state\n        selectedAssets: JSON.parse(JSON.stringify(selectedAssets)),\n        assetLiveDates: JSON.parse(JSON.stringify(assetLiveDates)),\n        useGlobalDate,\n        globalLiveDate,\n        \n        // Task state\n        customTaskNames: JSON.parse(JSON.stringify(customTaskNames)),\n        assetTaskDurations: JSON.parse(JSON.stringify(assetTaskDurations)),\n        customTasks: JSON.parse(JSON.stringify(customTasks)),\n        \n        // UI state\n        showInfoBox,\n        \n        // Calculated state (will be recalculated after restoration)\n        timelineTasks: JSON.parse(JSON.stringify(timelineTasks)),\n        calculatedStartDates: JSON.parse(JSON.stringify(calculatedStartDates)),\n        dateErrors: JSON.parse(JSON.stringify(dateErrors)),\n        projectStartDate,\n        \n        // Metadata\n        timestamp: Date.now(),\n        actionDescription,\n        actionType: 'user_action'\n    });\n\n    // Restore app state from a snapshot\n    const restoreFromSnapshot = (snapshot) => {\n        // Validate snapshot before restoring\n        if (!snapshot || typeof snapshot !== 'object') {\n            console.error('Invalid snapshot provided to restoreFromSnapshot');\n            return;\n        }\n        \n        // Restore only the input state (what the user controls)\n        if (snapshot.selectedAssets) setSelectedAssets(snapshot.selectedAssets);\n        if (snapshot.assetLiveDates) setAssetLiveDates(snapshot.assetLiveDates);\n        if (snapshot.useGlobalDate !== undefined) setUseGlobalDate(snapshot.useGlobalDate);\n        if (snapshot.globalLiveDate) setGlobalLiveDate(snapshot.globalLiveDate);\n        if (snapshot.customTaskNames) setCustomTaskNames(snapshot.customTaskNames);\n        if (snapshot.assetTaskDurations) setAssetTaskDurations(snapshot.assetTaskDurations);\n        if (snapshot.customTasks) setCustomTasks(snapshot.customTasks);\n        if (snapshot.showInfoBox !== undefined) setShowInfoBox(snapshot.showInfoBox);\n        \n        // Don't restore calculated state - let the useEffect recalculate it fresh\n        // This prevents conflicts between old calculated state and new input state\n        // setTimelineTasks(snapshot.timelineTasks);\n        // setCalculatedStartDates(snapshot.calculatedStartDates);\n        // setDateErrors(snapshot.dateErrors);\n        // setProjectStartDate(snapshot.projectStartDate);\n    };\n\n    // Undo function\n    const undo = () => {\n        if (historyIndex > 0 && history[historyIndex - 1]) {\n            setIsUndoRedoAction(true);\n            const previousSnapshot = history[historyIndex - 1];\n            if (previousSnapshot && previousSnapshot.selectedAssets) {\n                restoreFromSnapshot(previousSnapshot);\n                setHistoryIndex(prev => prev - 1);\n            } else {\n                console.error('Invalid snapshot found in history during undo');\n                // Remove the invalid snapshot and try again\n                setHistory(prev => prev.filter(snapshot => snapshot && snapshot.selectedAssets));\n                setHistoryIndex(prev => Math.max(0, prev - 1));\n            }\n            setIsUndoRedoAction(false);\n        }\n    };\n\n    // Redo function\n    const redo = () => {\n        if (historyIndex < history.length - 1 && history[historyIndex + 1]) {\n            setIsUndoRedoAction(true);\n            const nextSnapshot = history[historyIndex + 1];\n            if (nextSnapshot && nextSnapshot.selectedAssets) {\n                restoreFromSnapshot(nextSnapshot);\n                setHistoryIndex(prev => prev + 1);\n            } else {\n                console.error('Invalid snapshot found in history during redo');\n                // Remove the invalid snapshot and try again\n                setHistory(prev => prev.filter(snapshot => snapshot && snapshot.selectedAssets));\n                setHistoryIndex(prev => Math.min(prev, history.length - 1));\n            }\n            setIsUndoRedoAction(false);\n        }\n    };\n\n    // Execute an action and save to history\n    const executeAction = (actionFunction, actionDescription) => {\n        // Save current state before action\n        const currentSnapshot = createStateSnapshot(actionDescription);\n        \n        // Execute the action\n        actionFunction();\n        \n        // Add to history (unless this is an undo/redo action)\n        if (!isUndoRedoAction) {\n            setHistory(prev => {\n                const newHistory = [...prev.slice(0, historyIndex + 1), currentSnapshot];\n                // Limit history to last 50 actions to prevent memory issues\n                return newHistory.slice(-50);\n            });\n            setHistoryIndex(prev => Math.min(prev + 1, 49));\n        }\n    };\n\n    // Helper function to check if date is a non-working day (weekend or bank holiday)\n    const isNonWorkingDay = (date) => {\n        const day = date.getDay();\n        const yyyy_mm_dd = date.toISOString().split('T')[0];\n        return day === 0 || day === 6 || bankHolidays.includes(yyyy_mm_dd);\n    };\n\n    // Helper function to get previous working day\n    const getPreviousWorkingDay = (date) => {\n        let workingDate = new Date(date);\n        do {\n            workingDate.setDate(workingDate.getDate() - 1);\n        } while (isNonWorkingDay(workingDate));\n        return workingDate;\n    };\n\n    // Helper function to get next working day\n    const getNextWorkingDay = (date) => {\n        let workingDate = new Date(date);\n        do {\n            workingDate.setDate(workingDate.getDate() + 1);\n        } while (isNonWorkingDay(workingDate));\n        return workingDate;\n    };\n\n    // Helper function to subtract working days (backwards calculation)\n    const subtractWorkingDays = (endDate, workingDaysToSubtract) => {\n        let currentDate = new Date(endDate);\n        let remainingDays = workingDaysToSubtract;\n        // Subtract working days\n        while (remainingDays > 0) {\n            currentDate.setDate(currentDate.getDate() - 1);\n            // Only count non-non-working days\n            if (!isNonWorkingDay(currentDate)) {\n                remainingDays--;\n            }\n        }\n        return currentDate;\n    };\n\n    // Helper function to add working days (forward calculation for display)\n    const addWorkingDays = (startDate, workingDaysToAdd) => {\n        if (workingDaysToAdd <= 0) {\n            return new Date(startDate);\n        }\n        let currentDate = new Date(startDate);\n        let remainingDays = workingDaysToAdd - 1;\n        while (remainingDays > 0) {\n            currentDate.setDate(currentDate.getDate() + 1);\n            if (!isNonWorkingDay(currentDate)) {\n                remainingDays--;\n            }\n        }\n        // Ensure the final day is a working day\n        while (isNonWorkingDay(currentDate)) {\n            currentDate.setDate(currentDate.getDate() + 1);\n        }\n        return currentDate;\n    };\n\n    // Load CSV data\n    useEffect(() => {\n        Papa.parse(`${window.location.origin}/Group_Asset_Task_Time.csv`, {\n            download: true,\n            header: true,\n            skipEmptyLines: true,\n            complete: (results) => {\n                const parsedData = results.data;\n                setCsvData(parsedData);\n                \n                // Extract unique asset types from CSV\n                const assetTypes = [...new Set(parsedData.map(row => row['Asset Type']))].filter(type => type);\n                setUniqueAssets(assetTypes);\n            },\n            error: (error) => {\n                console.error(\"Error parsing CSV file:\", error);\n            }\n        });\n    }, []);\n\n    // Fetch UK bank holidays for England and Wales on app load\n    useEffect(() => {\n        fetch('https://www.gov.uk/bank-holidays.json')\n            .then(response => response.json())\n            .then(data => {\n                // Get all dates for England and Wales\n                const events = data['england-and-wales'].events;\n                // Get all dates for the next 10 years\n                const now = new Date();\n                const tenYearsFromNow = new Date(now.getFullYear() + 10, now.getMonth(), now.getDate());\n                const holidayDates = events\n                    .map(event => event.date)\n                    .filter(dateStr => {\n                        const date = new Date(dateStr);\n                        return date >= now && date <= tenYearsFromNow;\n                    });\n                setBankHolidays(holidayDates);\n            })\n            .catch(err => {\n                // If fetch fails, fallback to an empty array (or you could use a static list)\n                setBankHolidays([]);\n            });\n    }, []);\n\n    // Calculate backwards timeline when live dates or assets change\n    useEffect(() => {\n        if (selectedAssets.length === 0 || csvData.length === 0) {\n            setTimelineTasks([]);\n            setCalculatedStartDates({});\n            setProjectStartDate('');\n            setDateErrors([]);\n            return;\n        }\n\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Reset time for accurate comparison\n        \n        const newCalculatedStartDates = {};\n        const newDateErrors = [];\n        const allStartDates = [];\n        const allTasks = [];\n\n        // Loop over each selected asset instance (not just type)\n        selectedAssets.forEach(asset => {\n            // asset: { id, type, name, startDate }\n            if (!asset.startDate) return; // Skip if no start date set\n\n            // Find all tasks for this asset type from the CSV\n            const assetTasks = csvData.filter(row => row['Asset Type'] === asset.type);\n            if (assetTasks.length === 0) return;\n\n            // Use the asset instance's startDate as the go-live date\n            const liveDate = new Date(asset.startDate);\n            if (isNaN(liveDate.getTime())) return;\n\n            // We'll build the tasks in reverse (from go-live backwards)\n            let currentEndDate = new Date(liveDate);\n            const ganttTasks = [];\n            let taskIndex = 0;\n\n            // Go-live task (single day)\n            const goLiveTaskId = `${asset.id}-go-live`;\n            ganttTasks.unshift({\n                id: goLiveTaskId,\n                name: getTaskName(goLiveTaskId, asset.name, { 'Task': 'Go-Live' }),\n                start: liveDate.toISOString().split('T')[0],\n                end: liveDate.toISOString().split('T')[0],\n                progress: 0,\n            });\n            taskIndex++;\n\n            // Process all other tasks in reverse order\n            for (let i = assetTasks.length - 1; i >= 0; i--) {\n                const taskInfo = assetTasks[i];\n                // Use custom duration if present, else default from CSV\n                // Use asset.type as the key to match CSV task names consistently\n                const customDurations = assetTaskDurations[asset.type] || {};\n                const duration = customDurations[taskInfo['Task']] !== undefined\n                    ? customDurations[taskInfo['Task']]\n                    : parseInt(taskInfo['Duration (Days)'], 10) || 1;\n                // Subtract working days to get the start date\n                const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n                // Task ends the working day before currentEndDate\n                const taskEndDate = new Date(currentEndDate);\n                taskEndDate.setDate(taskEndDate.getDate() - 1);\n                // Ensure end date is a working day\n                let finalTaskEndDate = new Date(taskEndDate);\n                if (isNonWorkingDay(finalTaskEndDate)) {\n                    finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n                }\n                const taskId = `${asset.id}-task-${taskIndex}`;\n                ganttTasks.unshift({\n                    id: taskId,\n                    name: getTaskName(taskId, asset.name, taskInfo),\n                    start: taskStartDate.toISOString().split('T')[0],\n                    end: finalTaskEndDate.toISOString().split('T')[0],\n                    progress: 0,\n                });\n                taskIndex++;\n                // Update currentEndDate for the next task\n                currentEndDate = new Date(taskStartDate);\n            }\n\n            // Add all tasks for this asset instance to the main list\n            allTasks.push(...ganttTasks);\n\n            // Set the calculated start date for this asset to the start date of the first (earliest) task\n            if (ganttTasks.length > 0 && ganttTasks[0].start) {\n                newCalculatedStartDates[asset.id] = ganttTasks[0].start;\n                allStartDates.push(new Date(ganttTasks[0].start));\n            }\n\n            // Check if start date is before today\n            if (ganttTasks.length > 0 && new Date(ganttTasks[0].start) < today) {\n                newDateErrors.push(asset.id);\n            }\n        });\n\n        // Find earliest start date across all assets\n        if (allStartDates.length > 0) {\n            const earliestDate = new Date(Math.min(...allStartDates));\n            setProjectStartDate(earliestDate.toISOString().split('T')[0]);\n        }\n\n        // Integrate custom tasks into the main timeline calculation\n        const currentCustomTasks = timelineTasks.filter(task => task.isCustom);\n        if (currentCustomTasks.length > 0) {\n            setCustomTasks(currentCustomTasks);\n            \n            // Create a unified timeline that includes both asset tasks and custom tasks\n            const unifiedTimeline = [...allTasks];\n            \n            // Sort custom tasks by their original insertion order\n            const sortedCustomTasks = [...currentCustomTasks].sort((a, b) => {\n                const aIndex = timelineTasks.findIndex(task => task.id === a.id);\n                const bIndex = timelineTasks.findIndex(task => task.id === b.id);\n                return aIndex - bIndex;\n            });\n            \n            // Insert custom tasks at their correct positions in the unified timeline\n            sortedCustomTasks.forEach(customTask => {\n                let insertIndex = 0;\n                if (customTask.insertAfterTaskId) {\n                    const afterTaskIndex = unifiedTimeline.findIndex(task => task.id === customTask.insertAfterTaskId);\n                    if (afterTaskIndex !== -1) {\n                        insertIndex = afterTaskIndex + 1;\n                    }\n                }\n                \n                // Calculate the custom task dates based on the current unified timeline\n                let newTaskStartDate;\n                if (insertIndex === 0) {\n                    // Insert at the beginning\n                    newTaskStartDate = new Date(projectStartDate);\n                } else {\n                    // Insert after another task\n                    const previousTask = unifiedTimeline[insertIndex - 1];\n                    const previousTaskEnd = new Date(previousTask.end);\n                    newTaskStartDate = new Date(previousTaskEnd);\n                    newTaskStartDate.setDate(newTaskStartDate.getDate() + 1);\n                    \n                    // Ensure the start date is a working day\n                    while (isNonWorkingDay(newTaskStartDate)) {\n                        newTaskStartDate.setDate(newTaskStartDate.getDate() + 1);\n                    }\n                }\n                \n                // Calculate the end date based on duration (inclusive)\n                let newTaskEndDate = new Date(newTaskStartDate);\n                let newTaskRemainingDays = customTask.duration - 1;\n                \n                while (newTaskRemainingDays > 0) {\n                    newTaskEndDate.setDate(newTaskEndDate.getDate() + 1);\n                    if (!isNonWorkingDay(newTaskEndDate)) {\n                        newTaskRemainingDays--;\n                    }\n                }\n                \n                // Create the custom task with recalculated dates\n                const newCustomTask = {\n                    ...customTask,\n                    id: customTask.id,\n                    name: customTask.name,\n                    duration: customTask.duration,\n                    start: newTaskStartDate.toISOString().split('T')[0],\n                    end: newTaskEndDate.toISOString().split('T')[0],\n                    isCustom: true\n                };\n                \n                // Insert the custom task into the unified timeline\n                unifiedTimeline.splice(insertIndex, 0, newCustomTask);\n            });\n            \n            // After inserting custom tasks, rebuild the timeline backwards from go-live\n            // This preserves the fixed go-live date and respects manual duration overrides\n            const finalTimeline = [];\n            \n            // Group tasks by asset to maintain the backwards calculation\n            const tasksByAsset = {};\n            unifiedTimeline.forEach(task => {\n                if (task.isCustom) {\n                    // Custom tasks will be inserted at their specified positions\n                    if (!tasksByAsset.custom) tasksByAsset.custom = [];\n                    tasksByAsset.custom.push(task);\n                } else {\n                    // Asset tasks are grouped by their asset ID\n                    const assetId = task.id.split('-')[0];\n                    if (!tasksByAsset[assetId]) tasksByAsset[assetId] = [];\n                    tasksByAsset[assetId].push(task);\n                }\n            });\n            \n            // Rebuild each asset's timeline backwards from go-live\n            selectedAssets.forEach(asset => {\n                const assetTasks = tasksByAsset[asset.id] || [];\n                if (assetTasks.length === 0) return;\n                \n                // Separate go-live task from other tasks\n                const goLiveTask = assetTasks.find(task => task.name.includes('Go-Live'));\n                const regularTasks = assetTasks.filter(task => !task.name.includes('Go-Live'));\n                \n                // Build backwards from go-live to calculate dates\n                let currentEndDate = new Date(asset.startDate);\n                const calculatedTasks = [];\n                \n                // Calculate dates for regular tasks in reverse order (backwards from go-live)\n                for (let i = regularTasks.length - 1; i >= 0; i--) {\n                    const task = regularTasks[i];\n                    const taskInfo = csvData.find(row => \n                        row['Asset Type'] === asset.type && \n                        row['Task'] === task.name.split(': ')[1]\n                    );\n                    \n                    // Use manual duration override if available\n                    const customDurations = assetTaskDurations[asset.id] || {};\n                    const duration = customDurations[taskInfo?.['Task']] !== undefined\n                        ? customDurations[taskInfo['Task']]\n                        : parseInt(taskInfo?.['Duration (Days)'], 10) || 1;\n                    \n                    const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n                    const taskEndDate = new Date(currentEndDate);\n                    taskEndDate.setDate(taskEndDate.getDate() - 1);\n                    \n                    // Ensure end date is a working day\n                    let finalTaskEndDate = new Date(taskEndDate);\n                    if (isNonWorkingDay(finalTaskEndDate)) {\n                        finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n                    }\n                    \n                    calculatedTasks.unshift({\n                        ...task,\n                        start: taskStartDate.toISOString().split('T')[0],\n                        end: finalTaskEndDate.toISOString().split('T')[0]\n                    });\n                    \n                    currentEndDate = new Date(taskStartDate);\n                }\n                \n                // Add go-live task at the end\n                if (goLiveTask) {\n                    calculatedTasks.push({\n                        ...goLiveTask,\n                        start: asset.startDate,\n                        end: asset.startDate\n                    });\n                }\n                \n                // Add all tasks to final timeline in correct order\n                finalTimeline.push(...calculatedTasks);\n            });\n            \n            // Now rebuild the entire timeline sequentially including custom tasks\n            const allTasksSequential = [];\n            \n            // First, collect all tasks (asset tasks + custom tasks) in the correct order\n            selectedAssets.forEach(asset => {\n                const assetTasks = tasksByAsset[asset.id] || [];\n                const customTasksForAsset = customTasks.filter(ct => {\n                    // Find which asset this custom task belongs to based on insertAfterTaskId\n                    if (ct.insertAfterTaskId) {\n                        const afterTask = assetTasks.find(task => task.id === ct.insertAfterTaskId);\n                        return afterTask !== undefined;\n                    }\n                    return false;\n                });\n                \n                // Separate go-live task from regular tasks\n                const goLiveTask = assetTasks.find(task => task.name.includes('Go-Live'));\n                const regularTasks = assetTasks.filter(task => !task.name.includes('Go-Live'));\n                \n                // Create ordered task list for this asset\n                const orderedTasks = [];\n                \n                // Add regular tasks in their original order\n                regularTasks.forEach((task, index) => {\n                    orderedTasks.push(task);\n                    \n                    // Insert custom tasks that should go after this task\n                    const customTasksAfterThis = customTasksForAsset.filter(ct => \n                        ct.insertAfterTaskId === task.id\n                    );\n                    orderedTasks.push(...customTasksAfterThis);\n                });\n                \n                // Add go-live task at the end\n                if (goLiveTask) {\n                    orderedTasks.push(goLiveTask);\n                }\n                \n                // Now build the timeline backwards from go-live for this asset\n                let currentEndDate = new Date(asset.startDate);\n                const assetTimeline = [];\n                \n                // Process tasks in reverse order (backwards from go-live)\n                for (let i = orderedTasks.length - 1; i >= 0; i--) {\n                    const task = orderedTasks[i];\n                    \n                    if (task.isCustom) {\n                        // Custom task - calculate backwards\n                        const taskStartDate = subtractWorkingDays(currentEndDate, task.duration);\n                        const taskEndDate = new Date(currentEndDate);\n                        taskEndDate.setDate(taskEndDate.getDate() - 1);\n                        \n                        // Ensure end date is a working day\n                        let finalTaskEndDate = new Date(taskEndDate);\n                        if (isNonWorkingDay(finalTaskEndDate)) {\n                            finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n                        }\n                        \n                        assetTimeline.unshift({\n                            ...task,\n                            start: taskStartDate.toISOString().split('T')[0],\n                            end: finalTaskEndDate.toISOString().split('T')[0]\n                        });\n                        \n                        currentEndDate = new Date(taskStartDate);\n                    } else if (task.name.includes('Go-Live')) {\n                        // Go-live task\n                        assetTimeline.unshift({\n                            ...task,\n                            start: currentEndDate.toISOString().split('T')[0],\n                            end: currentEndDate.toISOString().split('T')[0]\n                        });\n                    } else {\n                        // Regular asset task - calculate backwards\n                        const taskInfo = csvData.find(row => \n                            row['Asset Type'] === asset.type && \n                            row['Task'] === task.name.split(': ')[1]\n                        );\n                        \n                        // Use manual duration override if available\n                        const customDurations = assetTaskDurations[asset.id] || {};\n                        const duration = customDurations[taskInfo?.['Task']] !== undefined\n                            ? customDurations[taskInfo['Task']]\n                            : parseInt(taskInfo?.['Duration (Days)'], 10) || 1;\n                        \n                        const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n                        const taskEndDate = new Date(currentEndDate);\n                        taskEndDate.setDate(taskEndDate.getDate() - 1);\n                        \n                        // Ensure end date is a working day\n                        let finalTaskEndDate = new Date(taskEndDate);\n                        if (isNonWorkingDay(finalTaskEndDate)) {\n                            finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n                        }\n                        \n                        assetTimeline.unshift({\n                            ...task,\n                            start: taskStartDate.toISOString().split('T')[0],\n                            end: finalTaskEndDate.toISOString().split('T')[0]\n                        });\n                        \n                        currentEndDate = new Date(taskStartDate);\n                    }\n                }\n                \n                // Add this asset's timeline to the main timeline\n                allTasksSequential.push(...assetTimeline);\n            });\n            \n            // Update the final timeline\n            finalTimeline.length = 0;\n            finalTimeline.push(...allTasksSequential);\n            \n            setTimelineTasks(finalTimeline);\n            \n            // Recalculate dateErrors based on the final timeline\n            const finalDateErrors = [];\n            const today = new Date();\n            today.setHours(0, 0, 0, 0);\n            \n            selectedAssets.forEach(asset => {\n                const assetTasks = finalTimeline.filter(task => \n                    task.id.startsWith(`${asset.id}-`) && !task.name.includes('Go-Live')\n                );\n                \n                if (assetTasks.length > 0) {\n                    // Find the earliest task for this asset\n                    const earliestTask = assetTasks.reduce((earliest, task) => {\n                        return new Date(task.start) < new Date(earliest.start) ? task : earliest;\n                    });\n                    \n                    // Update calculated start date\n                    newCalculatedStartDates[asset.id] = earliestTask.start;\n                    \n                    // Check if start date is before today\n                    if (new Date(earliestTask.start) < today) {\n                        finalDateErrors.push(asset.id);\n                    }\n                }\n            });\n            \n            setCalculatedStartDates(newCalculatedStartDates);\n            setDateErrors(finalDateErrors);\n        } else {\n            setTimelineTasks(allTasks);\n            setCalculatedStartDates(newCalculatedStartDates);\n            setDateErrors(newDateErrors);\n        }\n    }, [selectedAssets, globalLiveDate, useGlobalDate, assetLiveDates, csvData, assetTaskDurations, customTaskNames]);\n\n    // Keyboard shortcuts for undo/redo\n    useEffect(() => {\n        const handleKeyDown = (e) => {\n            if ((e.ctrlKey || e.metaKey) && e.key === 'z' && !e.shiftKey) {\n                e.preventDefault();\n                undo();\n            }\n            if (((e.ctrlKey || e.metaKey) && e.key === 'y') || \n                ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'z')) {\n                e.preventDefault();\n                redo();\n            }\n        };\n        \n        document.addEventListener('keydown', handleKeyDown);\n        return () => document.removeEventListener('keydown', handleKeyDown);\n    }, [historyIndex, history.length]);\n// This new useEffect pre-populates individual dates when switching from global mode\n    useEffect(() => {\n        if (!useGlobalDate && globalLiveDate && selectedAssets.length > 0) {\n            const newLiveDates = { ...assetLiveDates };\n            let updated = false;\n            selectedAssets.forEach(asset => {\n                // Pre-fill only if the asset doesn't have an individual date set\n                if (!newLiveDates[asset.name]) { // Changed to asset.name\n                    newLiveDates[asset.name] = globalLiveDate; // Changed to asset.name\n                    updated = true;\n                }\n            });\n            if (updated) {\n                setAssetLiveDates(newLiveDates);\n            }\n        }\n    }, [useGlobalDate, globalLiveDate, selectedAssets, assetLiveDates]);\n\n    // Sync all asset instance startDates to globalLiveDate if useGlobalDate is true\nuseEffect(() => {\n    if (useGlobalDate && globalLiveDate && !isUndoRedoAction) {\n        setSelectedAssets(prev =>\n            prev.map(asset =>\n                asset.startDate !== globalLiveDate\n                    ? { ...asset, startDate: globalLiveDate }\n                    : asset\n            )\n        );\n    }\n    // Optionally, if unchecked, you could clear the dates or leave as-is\n}, [useGlobalDate, globalLiveDate]);\n\n    // Preserve custom tasks whenever timelineTasks changes\n    useEffect(() => {\n        const currentCustomTasks = timelineTasks.filter(task => task.isCustom);\n        if (currentCustomTasks.length > 0) {\n            setCustomTasks(currentCustomTasks);\n        }\n    }, [timelineTasks]);\n\n    // REMOVED: Separate custom task merging useEffect\n    // Custom tasks are now integrated directly into the main timeline calculation\n\n    // REMOVED: Custom task merging useEffect that was causing timeline disruption\n    // Custom tasks are now handled properly in the main timeline calculation\n    // Generate timeline tasks for Gantt chart\n    const generateTimelineTasks = (startDates) => {\n        if (selectedAssets.length === 0 || Object.keys(startDates).length === 0) {\n            setTimelineTasks([]);\n            return;\n        }\n\n        const allTasks = [];\n        let taskIndex = 0;\n\n        selectedAssets.forEach(asset => {\n            const assetName = asset.name; // Assuming asset object has a 'name' property\n            const assetTasks = csvData.filter(row => row['Asset Type'] === assetName);\n            if (assetTasks.length === 0) return;\n\n            // Get the correct live date for this asset\n            const liveDate = new Date(useGlobalDate ? globalLiveDate : assetLiveDates[assetName]);\n            if (isNaN(liveDate.getTime())) return;\n\n            // We'll build the tasks in reverse (from go-live backwards)\n            let currentEndDate = new Date(liveDate);\n            const ganttTasks = [];\n            let taskIndex = 0;\n\n            // Go-live task (single day)\n            ganttTasks.unshift({\n                id: `task-${taskIndex}`,\n                name: `${assetName}: Go-Live`,\n                start: liveDate.toISOString().split('T')[0],\n                end: liveDate.toISOString().split('T')[0],\n                progress: 0,\n            });\n            taskIndex++;\n\n            // Process all other tasks in reverse order\n            for (let i = assetTasks.length - 1; i >= 0; i--) {\n                const taskInfo = assetTasks[i];\n                const duration = parseInt(taskInfo['Duration (Days)'], 10) || 1;\n                // Subtract working days to get the start date\n                const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n                // Task ends the working day before currentEndDate\n                const taskEndDate = new Date(currentEndDate);\n                taskEndDate.setDate(taskEndDate.getDate() - 1);\n                // Ensure end date is a working day\n                let finalTaskEndDate = new Date(taskEndDate);\n                if (isNonWorkingDay(finalTaskEndDate)) {\n                    finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n                }\n                ganttTasks.unshift({\n                    id: `task-${taskIndex}`,\n                    name: `${taskInfo['Asset Type']}: ${taskInfo['Task']}`,\n                    start: taskStartDate.toISOString().split('T')[0],\n                    end: finalTaskEndDate.toISOString().split('T')[0],\n                    progress: 0,\n                });\n                taskIndex++;\n                // Update currentEndDate for the next task\n                currentEndDate = new Date(taskStartDate);\n            }\n\n            // Add all tasks for this asset to the main list\n            allTasks.push(...ganttTasks);\n\n            // Set the calculated start date for this asset to the start date of the first (earliest) task\n            if (ganttTasks.length > 0 && ganttTasks[0].start) {\n                newCalculatedStartDates[assetName] = ganttTasks[0].start;\n            }\n        });\n        \n        // Merge custom tasks back into the timeline\n        if (customTasks.length > 0) {\n            // Insert custom tasks at their specified positions\n            customTasks.forEach(customTask => {\n                let insertIndex = 0;\n                if (customTask.insertAfterTaskId) {\n                    const afterTaskIndex = allTasks.findIndex(task => task.id === customTask.insertAfterTaskId);\n                    if (afterTaskIndex !== -1) {\n                        insertIndex = afterTaskIndex + 1;\n                    }\n                }\n                \n                // Create a new custom task with updated dates\n                const newCustomTask = {\n                    ...customTask,\n                    id: customTask.id, // Keep the same ID\n                    name: customTask.name,\n                    duration: customTask.duration,\n                    isCustom: true\n                };\n                \n                // Insert the custom task\n                allTasks.splice(insertIndex, 0, newCustomTask);\n            });\n            \n            // Recalculate all task dates to accommodate custom tasks\n            // This is a simplified version - in practice, you'd want to recalculate dates\n            // based on the new timeline structure\n        }\n        \n        setCalculatedStartDates(newCalculatedStartDates);\n        setTimelineTasks(allTasks);\n    };\n\n    // Helper to generate a unique id (could use a counter or Date.now())\n    const generateAssetId = () => Date.now() + Math.random();\n\n    // Add a new asset instance\n    const handleAddAsset = (assetType) => {\n        executeAction(() => {\n            const newAsset = {\n                id: generateAssetId(),\n                type: assetType,\n                name: assetType, // default name, can be edited later\n                startDate: useGlobalDate && globalLiveDate ? globalLiveDate : ''\n            };\n            setSelectedAssets(prev => [...prev, newAsset]);\n        }, `Add ${assetType} asset`);\n    };\n\n    // Remove an asset instance by id\n    const handleRemoveAsset = (assetId) => {\n        const assetToRemove = selectedAssets.find(asset => asset.id === assetId);\n        executeAction(() => {\n            setSelectedAssets(prev => prev.filter(asset => asset.id !== assetId));\n        }, `Remove ${assetToRemove?.name || 'asset'}`);\n    };\n\n    // Handler to rename an asset instance by id\n    const handleRenameAsset = (assetId, newName) => {\n        const assetToRename = selectedAssets.find(asset => asset.id === assetId);\n        executeAction(() => {\n            setSelectedAssets(prev =>\n                prev.map(asset =>\n                    asset.id === assetId ? { ...asset, name: newName } : asset\n                )\n            );\n        }, `Rename asset to \"${newName}\"`);\n    };\n\n    // Handler to rename a task\n    const handleRenameTask = (taskId, newName) => {\n        const currentTask = timelineTasks.find(task => task.id === taskId);\n        executeAction(() => {\n            setCustomTaskNames(prev => ({\n                ...prev,\n                [taskId]: newName\n            }));\n        }, `Rename task to \"${newName}\"`);\n    };\n\n    const handleAssetLiveDateChange = (assetName, date) => {\n        executeAction(() => {\n            setAssetLiveDates(prev => ({\n                ...prev,\n                [assetName]: date\n            }));\n        }, `Change ${assetName} go-live date to ${date}`);\n    };\n\n    const handleAssetStartDateChange = (assetId, newDate) => {\n        const assetToUpdate = selectedAssets.find(asset => asset.id === assetId);\n        executeAction(() => {\n            setSelectedAssets(prev =>\n                prev.map(asset =>\n                    asset.id === assetId ? { ...asset, startDate: newDate } : asset\n                )\n            );\n        }, `Change ${assetToUpdate?.name || 'asset'} go-live date to ${newDate}`);\n    };\n\n    // Handler to save custom task durations for an asset\n    const handleSaveTaskDurations = (assetId, durations) => {\n        const assetToUpdate = selectedAssets.find(asset => asset.id === assetId);\n        executeAction(() => {\n            setAssetTaskDurations(prev => ({ ...prev, [assetId]: durations }));\n            \n            // Preserve custom tasks before timeline recalculation\n            const currentCustomTasks = timelineTasks.filter(task => task.isCustom);\n            setCustomTasks(currentCustomTasks);\n        }, `Update task durations for ${assetToUpdate?.name || 'asset'}`);\n    };\n\n    // Handler for drag-to-resize task duration\n    const handleTaskDurationChange = (taskId, newDuration, newEndDate) => {\n        // Find the task being modified\n        const taskIndex = timelineTasks.findIndex(task => task.id === taskId);\n        if (taskIndex === -1) return;\n\n        const task = timelineTasks[taskIndex];\n        const taskName = task.name.split(': ')[1]; // Get task name after the colon\n        const assetName = task.name.split(': ')[0]; // Get asset name before the colon\n        \n        // Find the asset by name\n        const asset = selectedAssets.find(a => a.name === assetName);\n        if (!asset) return;\n        \n        executeAction(() => {\n            // Update the assetTaskDurations state to trigger the same recalculation logic\n            // that the manual duration editing uses\n            // Use asset.type as the key to match CSV task names consistently\n            setAssetTaskDurations(prev => {\n                const currentDurations = prev[asset.type] || {};\n                return {\n                    ...prev,\n                    [asset.type]: {\n                        ...currentDurations,\n                        [taskName]: newDuration\n                    }\n                };\n            });\n        }, `Change ${taskName} duration to ${newDuration} days`);\n    };\n\n    // Handler for adding custom tasks\n    const handleAddCustomTask = (customTaskData) => {\n        const { name, duration, insertAfterTaskId } = customTaskData;\n        \n        executeAction(() => {\n            // Create the new custom task\n            const newTaskId = `custom-task-${Date.now()}`;\n            \n            const newTask = {\n                id: newTaskId,\n                name: `Custom: ${name}`,\n                duration: duration,\n                insertAfterTaskId: insertAfterTaskId,\n                isCustom: true,\n                progress: 0\n            };\n            \n            // Add to custom tasks - this will trigger the main timeline calculation useEffect\n            setCustomTasks(prev => [...prev, newTask]);\n            \n            // Don't manually insert into timelineTasks here - let the main useEffect handle it\n            // This ensures proper timeline recalculation and date adjustments\n        }, `Add custom task \"${name}\"`);\n    };\n\n        // Helper function to count working days between two dates (exclusive)\n    const countWorkingDays = (startDate, endDate) => {\n        let count = 0;\n        const current = new Date(startDate);\n        const end = new Date(endDate);\n\n        // Move to next day to make it exclusive\n        current.setDate(current.getDate() + 1);\n\n        while (current <= end) {\n            if (!isNonWorkingDay(current)) {\n                count++;\n            }\n            current.setDate(current.getDate() + 1);\n        }\n        return count;\n    };\n\n    // Single source of truth for working days calculation (same as AssetSelector)\n    const calculateWorkingDaysBetween = (startDate, endDate) => {\n        if (!startDate || !endDate) return 0;\n       \n        const start = new Date(startDate);\n        const end = new Date(endDate);\n       \n        if (start >= end) return 0;\n       \n        let workingDays = 0;\n        let currentDate = new Date(start);\n       \n        while (currentDate < end) {\n            const dayOfWeek = currentDate.getDay();\n            // Count if not weekend (0 = Sunday, 6 = Saturday)\n            if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n                workingDays++;\n            }\n            currentDate.setDate(currentDate.getDate() + 1);\n        }\n       \n        return workingDays;\n    };\n\n    // Helper function to calculate task end date based on start date and duration\n    const calculateTaskEndDate = (startDate, duration) => {\n        let endDate = new Date(startDate);\n        let remainingDays = duration - 1; // -1 because we count the start date\n        \n        while (remainingDays > 0) {\n            endDate.setDate(endDate.getDate() + 1);\n            if (!isNonWorkingDay(endDate)) {\n                remainingDays--;\n            }\n        }\n        \n        return endDate.toISOString().split('T')[0];\n    };\n\n    // Calculate working days needed per asset for detailed timeline alerts\n    const calculateWorkingDaysNeededPerAsset = () => {\n        if (!globalLiveDate || timelineTasks.length === 0) return [];\n\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        \n        const assetAlerts = [];\n        \n        // Calculate for each asset that has date errors\n        selectedAssets.forEach(asset => {\n            const calculatedStart = calculatedStartDates[asset.id];\n            if (calculatedStart && dateErrors.includes(asset.id)) {\n                const startDate = new Date(calculatedStart);\n                const daysInPast = calculateWorkingDaysBetween(startDate, today);\n                \n                if (daysInPast > 0) {\n                    assetAlerts.push({\n                        assetId: asset.id,\n                        assetName: asset.name,\n                        assetType: asset.type,\n                        daysNeeded: daysInPast,\n                        daysSaved: 0, // This would need to be calculated based on original vs current durations\n                        startDate: calculatedStart,\n                        isCritical: daysInPast > 5 // Mark as critical if more than 5 days needed\n                    });\n                }\n            }\n        });\n        \n        // Sort by urgency (most days needed first)\n        return assetAlerts.sort((a, b) => b.daysNeeded - a.daysNeeded);\n    };\n\n    // Single source of truth for working days needed (same as AssetSelector's getWorkingDaysToSave)\n    const calculateWorkingDaysNeeded = () => {\n        if (!globalLiveDate || timelineTasks.length === 0) return null;\n\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        \n        // Use the exact same logic as AssetSelector's getWorkingDaysToSave\n        let totalDaysInPast = 0;\n        \n        // Only count assets that are in dateErrors (same as asset-specific calculation)\n        selectedAssets.forEach(asset => {\n            const calculatedStart = calculatedStartDates[asset.id];\n            if (calculatedStart && dateErrors.includes(asset.id)) {\n                const startDate = new Date(calculatedStart);\n                totalDaysInPast += calculateWorkingDaysBetween(startDate, today);\n            }\n        });\n        \n        // Also check custom tasks that start in the past\n        timelineTasks.forEach(task => {\n            if (task.isCustom) {\n                const taskStart = new Date(task.start);\n                if (taskStart < today) {\n                    totalDaysInPast += calculateWorkingDaysBetween(taskStart, today);\n                }\n            }\n        });\n        \n        return {\n            available: 0, // Not used in this calculation\n            allocated: 0, // Not used in this calculation\n            needed: totalDaysInPast\n        };\n    };\n\n    return (\n        <div className=\"bg-gray-100 min-h-screen font-sans\">\n            <header className=\"bg-white shadow-md\">\n                <div className=\"container mx-auto px-6 py-4\">\n                    <div className=\"flex items-center justify-between\">\n                        <h1 className=\"text-3xl font-bold text-gray-800\">Accordion Timeline Builder</h1>\n                        <div className=\"flex items-center space-x-2\">\n                            <button\n                                onClick={undo}\n                                disabled={historyIndex <= 0}\n                                className=\"px-3 py-1 bg-gray-500 text-white rounded text-sm hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\"\n                                title=\"Undo (Ctrl+Z)\"\n                            >\n                                ↩️ Undo\n                            </button>\n                            <button\n                                onClick={redo}\n                                disabled={historyIndex >= history.length - 1}\n                                className=\"px-3 py-1 bg-gray-500 text-white rounded text-sm hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\"\n                                title=\"Redo (Ctrl+Y)\"\n                            >\n                                ↪️ Redo\n                            </button>\n                        </div>\n                    </div>\n                    {/* Info Box: How to Use This Timeline Builder (moved here, dismissible) */}\n                    {showInfoBox && (\n                        <div className=\"relative mb-6 mt-4 p-4 bg-blue-50 border border-blue-200 rounded-md text-sm text-blue-900\">\n                            <button\n                                className=\"absolute top-2 right-2 text-blue-700 hover:text-blue-900 text-lg font-bold focus:outline-none\"\n                                onClick={() => {\n                                    executeAction(() => setShowInfoBox(false), \"Hide instructions\");\n                                }}\n                                aria-label=\"Close instructions\"\n                            >\n                                ×\n                            </button>\n                            <strong>How to Build Your Campaign Timeline:</strong>\n                            <ol className=\"list-decimal pl-5 mt-2 space-y-1\">\n                                <li>\n                                    <strong>Choose Your Campaign Start Date:</strong><br />\n                                    If all assets launch on the same day, set a global start date and check “Use same live date for all assets.”<br />\n                                    If assets launch on different days, uncheck the box and set dates individually for each asset.\n                                </li>\n                                <li>\n                                    <strong>Add Assets:</strong><br />\n                                    Click “Add” next to each asset type you need.<br />\n                                    Need the same asset type more than once? Click “Add” again and give each a unique name.\n                                </li>\n                                <li>\n                                    <strong>Customize Assets:</strong><br />\n                                    Rename each asset for clarity (e.g., “Metro Advertorial – August”).<br />\n                                    Set or confirm the start date for each asset.\n                                </li>\n                                <li>\n                                    <strong>Review Your Timeline:</strong><br />\n                                    Remove any asset you don’t need.<br />\n                                    Check the timeline to ensure all assets are scheduled as planned.\n                                </li>\n                                <li>\n                                    <strong>Adjust Your Timeline if Needed:</strong><br />\n                                    If an asset’s timeline can’t be completed by the selected start date, you’ll see a warning.<br />\n                                    – You can either change the go-live date, or<br />\n                                    – Manually shorten the durations of individual tasks (“accordion” your timeline) until the schedule fits.\n                                </li>\n                                <li>\n                                    <strong>Undo/Redo:</strong><br />\n                                    Use Ctrl+Z to undo and Ctrl+Y to redo any changes you make.<br />\n                                    You can also use the Undo/Redo buttons in the top-right corner.\n                                </li>\n                            </ol>\n                        </div>\n                    )}\n                </div>\n            </header>\n            <main className=\"container mx-auto p-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                    {/* LEFT COLUMN: CONTROLS */}\n                    <div\n  className=\"lg:col-span-1 bg-white p-6 rounded-xl shadow-lg overflow-x-auto\"\n  style={{ minWidth: 380 }} // You can adjust 380 to your needs\n>\n                        <h2 className=\"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\">Timeline Setup</h2>\n                        <CampaignSetup \n                            globalLiveDate={globalLiveDate}\n                            onGlobalLiveDateChange={(date) => {\n                                executeAction(() => setGlobalLiveDate(date), `Change global go-live date to ${date}`);\n                            }}\n                            useGlobalDate={useGlobalDate}\n                            onUseGlobalDateChange={(useGlobal) => {\n                                executeAction(() => setUseGlobalDate(useGlobal), `Switch to ${useGlobal ? 'global' : 'individual'} date mode`);\n                            }}\n                            projectStartDate={projectStartDate}\n                            dateErrors={dateErrors}\n                            workingDaysNeeded={calculateWorkingDaysNeeded()}\n                        />\n<AssetSelector\n    assets={uniqueAssets || []}\n    selectedAssets={selectedAssets || []}\n    onAddAsset={handleAddAsset}\n    onRemoveAsset={handleRemoveAsset}\n    useGlobalDate={useGlobalDate}\n    globalLiveDate={globalLiveDate || ''}\n    assetLiveDates={assetLiveDates || {}}\n    onAssetLiveDateChange={handleAssetLiveDateChange}\n    calculatedStartDates={calculatedStartDates || {}}\n    dateErrors={dateErrors || []}\n    onRenameAsset={handleRenameAsset}\n    onAssetStartDateChange={handleAssetStartDateChange}\n    csvData={csvData}\n    onSaveTaskDurations={handleSaveTaskDurations}\n    isNonWorkingDay={isNonWorkingDay}\n    calculateWorkingDaysBetween={calculateWorkingDaysBetween}\n/>\n                    </div>\n                    \n                    {/* RIGHT COLUMN: TIMELINE */}\n                    <div\n  className=\"lg:col-span-2 bg-white p-6 rounded-xl shadow-lg\"\n  style={{ minWidth: 0, maxWidth: \"100%\" }}\n>\n                        <h2 className=\"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\">Generated Timeline</h2>\n                        \n                     {/* Error Messages - Temporarily Disabled */}\n{/* {dateErrors.length > 0 && (\n    <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-md\">\n        <h3 className=\"text-red-800 font-medium mb-2\">⚠️ Timeline Conflicts</h3>\n        <p className=\"text-red-700 text-sm mb-2\">\n            The following assets cannot be completed by their live dates:\n        </p>\n        <ul className=\"text-red-700 text-sm\">\n            {dateErrors.map(asset => (\n                <li key={asset} className=\"ml-4\">\n                    • {asset} (would need to start on {calculatedStartDates[asset]})\n                </li>\n            ))}\n        </ul>\n        <p className=\"text-red-700 text-sm mt-2 font-medium\">\n            Manual adjustment of task durations required.\n        </p>\n    </div>\n)} */}\n\n                        {timelineTasks && timelineTasks.length > 0 ? (\n                                                    <GanttChart \n                            tasks={timelineTasks}\n                            bankHolidays={bankHolidays}\n                            onTaskDurationChange={handleTaskDurationChange}\n                            onTaskNameChange={handleRenameTask}\n                            workingDaysNeeded={calculateWorkingDaysNeeded()}\n                            assetAlerts={calculateWorkingDaysNeededPerAsset()}\n                            onAddCustomTask={handleAddCustomTask}\n                        />\n                        ) : (\n                            <div className=\"text-center text-gray-500 py-10\">\n                                <p className=\"text-lg\">Your timeline will appear here.</p>\n                                <p className=\"text-sm\">Set a live date and select some assets to begin.</p>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </main>\n        </div>\n    );\n};\n\nexport default TimelineBuilder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}