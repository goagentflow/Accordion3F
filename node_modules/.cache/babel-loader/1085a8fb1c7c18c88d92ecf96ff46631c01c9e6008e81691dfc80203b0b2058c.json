{"ast":null,"code":"var _jsxFileName = \"/Users/hamishnicklin/Accordion3F/src/TimelineBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport AssetSelector from './components/AssetSelector';\nimport CampaignSetup from './components/CampaignSetup';\nimport GanttChart from './components/GanttChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimelineBuilder = () => {\n  _s();\n  // CSV and asset data\n  const [csvData, setCsvData] = useState([]);\n  const [uniqueAssets, setUniqueAssets] = useState([]);\n  // Each selected asset is now an object with a unique id, type, name, and startDate\n  const [selectedAssets, setSelectedAssets] = useState([]);\n\n  // Live date management\n  const [globalLiveDate, setGlobalLiveDate] = useState('');\n  const [useGlobalDate, setUseGlobalDate] = useState(true);\n  const [assetLiveDates, setAssetLiveDates] = useState({}); // {assetName: 'YYYY-MM-DD'}\n\n  // Calculated results\n  const [calculatedStartDates, setCalculatedStartDates] = useState({}); // {assetName: 'YYYY-MM-DD'}\n  const [projectStartDate, setProjectStartDate] = useState(''); // Earliest start date across all assets\n  const [dateErrors, setDateErrors] = useState([]); // Array of asset names that start before today\n\n  // Final timeline for display\n  const [timelineTasks, setTimelineTasks] = useState([]);\n  const [showInfoBox, setShowInfoBox] = useState(true); // Add state for info box\n\n  // Add state to store custom task durations for each asset instance\n  const [assetTaskDurations, setAssetTaskDurations] = useState({}); // { assetId: { taskName: duration, ... } }\n\n  // Add state to store custom tasks separately\n  const [customTasks, setCustomTasks] = useState([]); // Array of custom task objects\n\n  // Add state to store custom task names\n  const [customTaskNames, setCustomTaskNames] = useState({}); // { taskId: customName }\n\n  // Add state to store bank holidays\n  const [bankHolidays, setBankHolidays] = useState([]); // Array of YYYY-MM-DD strings\n\n  // Undo/Redo infrastructure\n  const [history, setHistory] = useState([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  const [isUndoRedoAction, setIsUndoRedoAction] = useState(false);\n\n  // Helper function to get task name (custom or default)\n  const getTaskName = (taskId, assetName, taskInfo) => {\n    // Check if there's a custom name for this task\n    if (customTaskNames[taskId]) {\n      return customTaskNames[taskId];\n    }\n    // Return default format\n    return `${assetName}: ${taskInfo['Task']}`;\n  };\n\n  // Create a snapshot of the current app state for undo/redo\n  const createStateSnapshot = actionDescription => ({\n    // Asset state\n    selectedAssets: JSON.parse(JSON.stringify(selectedAssets)),\n    assetLiveDates: JSON.parse(JSON.stringify(assetLiveDates)),\n    useGlobalDate,\n    globalLiveDate,\n    // Task state\n    customTaskNames: JSON.parse(JSON.stringify(customTaskNames)),\n    assetTaskDurations: JSON.parse(JSON.stringify(assetTaskDurations)),\n    customTasks: JSON.parse(JSON.stringify(customTasks)),\n    // UI state\n    showInfoBox,\n    // Calculated state (will be recalculated after restoration)\n    timelineTasks: JSON.parse(JSON.stringify(timelineTasks)),\n    calculatedStartDates: JSON.parse(JSON.stringify(calculatedStartDates)),\n    dateErrors: JSON.parse(JSON.stringify(dateErrors)),\n    projectStartDate,\n    // Metadata\n    timestamp: Date.now(),\n    actionDescription,\n    actionType: 'user_action'\n  });\n\n  // Restore app state from a snapshot\n  const restoreFromSnapshot = snapshot => {\n    console.log('restoreFromSnapshot called with:', snapshot);\n\n    // Validate snapshot before restoring\n    if (!snapshot || typeof snapshot !== 'object') {\n      console.error('Invalid snapshot provided to restoreFromSnapshot');\n      return;\n    }\n    console.log('Restoring state from snapshot...');\n\n    // Restore only the input state (what the user controls)\n    if (snapshot.selectedAssets) {\n      console.log('Restoring selectedAssets:', snapshot.selectedAssets);\n      setSelectedAssets(snapshot.selectedAssets);\n    }\n    if (snapshot.assetLiveDates) {\n      console.log('Restoring assetLiveDates:', snapshot.assetLiveDates);\n      setAssetLiveDates(snapshot.assetLiveDates);\n    }\n    if (snapshot.useGlobalDate !== undefined) {\n      console.log('Restoring useGlobalDate:', snapshot.useGlobalDate);\n      setUseGlobalDate(snapshot.useGlobalDate);\n    }\n    if (snapshot.globalLiveDate) {\n      console.log('Restoring globalLiveDate:', snapshot.globalLiveDate);\n      setGlobalLiveDate(snapshot.globalLiveDate);\n    }\n    if (snapshot.customTaskNames) {\n      console.log('Restoring customTaskNames:', snapshot.customTaskNames);\n      setCustomTaskNames(snapshot.customTaskNames);\n    }\n    if (snapshot.assetTaskDurations) {\n      console.log('Restoring assetTaskDurations:', snapshot.assetTaskDurations);\n      setAssetTaskDurations(snapshot.assetTaskDurations);\n    }\n    if (snapshot.customTasks) {\n      console.log('Restoring customTasks:', snapshot.customTasks);\n      setCustomTasks(snapshot.customTasks);\n    }\n    if (snapshot.showInfoBox !== undefined) {\n      console.log('Restoring showInfoBox:', snapshot.showInfoBox);\n      setShowInfoBox(snapshot.showInfoBox);\n    }\n    console.log('State restoration complete');\n\n    // Don't restore calculated state - let the useEffect recalculate it fresh\n    // This prevents conflicts between old calculated state and new input state\n    // setTimelineTasks(snapshot.timelineTasks);\n    // setCalculatedStartDates(snapshot.calculatedStartDates);\n    // setDateErrors(snapshot.dateErrors);\n    // setProjectStartDate(snapshot.projectStartDate);\n  };\n\n  // Undo function\n  const undo = () => {\n    console.log('undo called');\n    console.log('Current history length:', history.length, 'historyIndex:', historyIndex);\n    if (historyIndex > 0 && history[historyIndex - 1]) {\n      console.log('Attempting undo to index:', historyIndex - 1);\n      setIsUndoRedoAction(true);\n      const previousSnapshot = history[historyIndex - 1];\n      console.log('Previous snapshot:', previousSnapshot);\n\n      // Validate the snapshot before restoring\n      if (previousSnapshot && previousSnapshot.selectedAssets && previousSnapshot.selectedAssets.length > 0) {\n        console.log('Restoring from valid snapshot');\n        restoreFromSnapshot(previousSnapshot);\n        setHistoryIndex(prev => {\n          const newIndex = prev - 1;\n          console.log('New history index after undo:', newIndex);\n          return newIndex;\n        });\n      } else {\n        console.error('Invalid snapshot found in history during undo - no assets selected');\n        // Try to find a valid snapshot further back\n        let validIndex = historyIndex - 2;\n        while (validIndex >= 0) {\n          const snapshot = history[validIndex];\n          if (snapshot && snapshot.selectedAssets && snapshot.selectedAssets.length > 0) {\n            console.log('Found valid snapshot at index:', validIndex);\n            restoreFromSnapshot(snapshot);\n            setHistoryIndex(validIndex);\n            break;\n          }\n          validIndex--;\n        }\n        if (validIndex < 0) {\n          console.error('No valid snapshot found in history');\n          // Reset to current state\n          setHistoryIndex(historyIndex);\n        }\n      }\n      setIsUndoRedoAction(false);\n    } else {\n      console.log('Cannot undo: historyIndex <= 0 or no previous snapshot');\n    }\n  };\n\n  // Redo function\n  const redo = () => {\n    if (historyIndex < history.length - 1 && history[historyIndex + 1]) {\n      setIsUndoRedoAction(true);\n      const nextSnapshot = history[historyIndex + 1];\n      if (nextSnapshot && nextSnapshot.selectedAssets) {\n        restoreFromSnapshot(nextSnapshot);\n        setHistoryIndex(prev => prev + 1);\n      } else {\n        console.error('Invalid snapshot found in history during redo');\n        // Remove the invalid snapshot and try again\n        setHistory(prev => prev.filter(snapshot => snapshot && snapshot.selectedAssets));\n        setHistoryIndex(prev => Math.min(prev, history.length - 1));\n      }\n      setIsUndoRedoAction(false);\n    }\n  };\n\n  // Execute an action and save to history\n  const executeAction = (actionFunction, actionDescription) => {\n    console.log('executeAction called with:', actionDescription);\n    console.log('Current history length:', history.length, 'historyIndex:', historyIndex);\n\n    // Save current state before action\n    const currentSnapshot = createStateSnapshot(actionDescription);\n    console.log('Created snapshot:', currentSnapshot);\n\n    // Execute the action\n    actionFunction();\n\n    // Add to history (unless this is an undo/redo action)\n    if (!isUndoRedoAction) {\n      console.log('Adding to history (not undo/redo action)');\n      setHistory(prev => {\n        const newHistory = [...prev.slice(0, historyIndex + 1), currentSnapshot];\n        console.log('New history length:', newHistory.length);\n        // Limit history to last 50 actions to prevent memory issues\n        return newHistory.slice(-50);\n      });\n      setHistoryIndex(prev => {\n        const newIndex = Math.min(prev + 1, 49);\n        console.log('New history index:', newIndex);\n        return newIndex;\n      });\n    } else {\n      console.log('Skipping history update (undo/redo action)');\n    }\n  };\n\n  // Helper function to check if date is a non-working day (weekend or bank holiday)\n  const isNonWorkingDay = date => {\n    const day = date.getDay();\n    const yyyy_mm_dd = date.toISOString().split('T')[0];\n    return day === 0 || day === 6 || bankHolidays.includes(yyyy_mm_dd);\n  };\n\n  // Helper function to get previous working day\n  const getPreviousWorkingDay = date => {\n    let workingDate = new Date(date);\n    do {\n      workingDate.setDate(workingDate.getDate() - 1);\n    } while (isNonWorkingDay(workingDate));\n    return workingDate;\n  };\n\n  // Helper function to get next working day\n  const getNextWorkingDay = date => {\n    let workingDate = new Date(date);\n    do {\n      workingDate.setDate(workingDate.getDate() + 1);\n    } while (isNonWorkingDay(workingDate));\n    return workingDate;\n  };\n\n  // Helper function to subtract working days (backwards calculation)\n  const subtractWorkingDays = (endDate, workingDaysToSubtract) => {\n    let currentDate = new Date(endDate);\n    let remainingDays = workingDaysToSubtract;\n    // Subtract working days\n    while (remainingDays > 0) {\n      currentDate.setDate(currentDate.getDate() - 1);\n      // Only count non-non-working days\n      if (!isNonWorkingDay(currentDate)) {\n        remainingDays--;\n      }\n    }\n    return currentDate;\n  };\n\n  // Helper function to add working days (forward calculation for display)\n  const addWorkingDays = (startDate, workingDaysToAdd) => {\n    if (workingDaysToAdd <= 0) {\n      return new Date(startDate);\n    }\n    let currentDate = new Date(startDate);\n    let remainingDays = workingDaysToAdd - 1;\n    while (remainingDays > 0) {\n      currentDate.setDate(currentDate.getDate() + 1);\n      if (!isNonWorkingDay(currentDate)) {\n        remainingDays--;\n      }\n    }\n    // Ensure the final day is a working day\n    while (isNonWorkingDay(currentDate)) {\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    return currentDate;\n  };\n\n  // Load CSV data\n  useEffect(() => {\n    Papa.parse(`${window.location.origin}/Group_Asset_Task_Time.csv`, {\n      download: true,\n      header: true,\n      skipEmptyLines: true,\n      complete: results => {\n        const parsedData = results.data;\n        setCsvData(parsedData);\n\n        // Extract unique asset types from CSV\n        const assetTypes = [...new Set(parsedData.map(row => row['Asset Type']))].filter(type => type);\n        setUniqueAssets(assetTypes);\n      },\n      error: error => {\n        console.error(\"Error parsing CSV file:\", error);\n      }\n    });\n  }, []);\n\n  // Fetch UK bank holidays for England and Wales on app load\n  useEffect(() => {\n    fetch('https://www.gov.uk/bank-holidays.json').then(response => response.json()).then(data => {\n      // Get all dates for England and Wales\n      const events = data['england-and-wales'].events;\n      // Get all dates for the next 10 years\n      const now = new Date();\n      const tenYearsFromNow = new Date(now.getFullYear() + 10, now.getMonth(), now.getDate());\n      const holidayDates = events.map(event => event.date).filter(dateStr => {\n        const date = new Date(dateStr);\n        return date >= now && date <= tenYearsFromNow;\n      });\n      setBankHolidays(holidayDates);\n    }).catch(err => {\n      // If fetch fails, fallback to an empty array (or you could use a static list)\n      setBankHolidays([]);\n    });\n  }, []);\n\n  // Calculate backwards timeline when live dates or assets change\n  useEffect(() => {\n    if (selectedAssets.length === 0 || csvData.length === 0) {\n      setTimelineTasks([]);\n      setCalculatedStartDates({});\n      setProjectStartDate('');\n      setDateErrors([]);\n      return;\n    }\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Reset time for accurate comparison\n\n    const newCalculatedStartDates = {};\n    const newDateErrors = [];\n    const allStartDates = [];\n    const allTasks = [];\n\n    // Loop over each selected asset instance (not just type)\n    selectedAssets.forEach(asset => {\n      // asset: { id, type, name, startDate }\n      if (!asset.startDate) return; // Skip if no start date set\n\n      // Find all tasks for this asset type from the CSV\n      const assetTasks = csvData.filter(row => row['Asset Type'] === asset.type);\n      if (assetTasks.length === 0) return;\n\n      // Use the asset instance's startDate as the go-live date\n      const liveDate = new Date(asset.startDate);\n      if (isNaN(liveDate.getTime())) return;\n\n      // We'll build the tasks in reverse (from go-live backwards)\n      let currentEndDate = new Date(liveDate);\n      const ganttTasks = [];\n      let taskIndex = 0;\n\n      // Go-live task (single day)\n      const goLiveTaskId = `${asset.id}-go-live`;\n      ganttTasks.unshift({\n        id: goLiveTaskId,\n        name: getTaskName(goLiveTaskId, asset.name, {\n          'Task': 'Go-Live'\n        }),\n        start: liveDate.toISOString().split('T')[0],\n        end: liveDate.toISOString().split('T')[0],\n        progress: 0\n      });\n      taskIndex++;\n\n      // Process all other tasks in reverse order\n      for (let i = assetTasks.length - 1; i >= 0; i--) {\n        const taskInfo = assetTasks[i];\n        // Use custom duration if present, else default from CSV\n        // Use asset.type as the key to match CSV task names consistently\n        const customDurations = assetTaskDurations[asset.type] || {};\n        const duration = customDurations[taskInfo['Task']] !== undefined ? customDurations[taskInfo['Task']] : parseInt(taskInfo['Duration (Days)'], 10) || 1;\n        // Subtract working days to get the start date\n        const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n        // Task ends the working day before currentEndDate\n        const taskEndDate = new Date(currentEndDate);\n        taskEndDate.setDate(taskEndDate.getDate() - 1);\n        // Ensure end date is a working day\n        let finalTaskEndDate = new Date(taskEndDate);\n        if (isNonWorkingDay(finalTaskEndDate)) {\n          finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n        }\n        const taskId = `${asset.id}-task-${taskIndex}`;\n        ganttTasks.unshift({\n          id: taskId,\n          name: getTaskName(taskId, asset.name, taskInfo),\n          start: taskStartDate.toISOString().split('T')[0],\n          end: finalTaskEndDate.toISOString().split('T')[0],\n          progress: 0\n        });\n        taskIndex++;\n        // Update currentEndDate for the next task\n        currentEndDate = new Date(taskStartDate);\n      }\n\n      // Add all tasks for this asset instance to the main list\n      allTasks.push(...ganttTasks);\n\n      // Set the calculated start date for this asset to the start date of the first (earliest) task\n      if (ganttTasks.length > 0 && ganttTasks[0].start) {\n        newCalculatedStartDates[asset.id] = ganttTasks[0].start;\n        allStartDates.push(new Date(ganttTasks[0].start));\n      }\n\n      // Check if start date is before today\n      if (ganttTasks.length > 0 && new Date(ganttTasks[0].start) < today) {\n        newDateErrors.push(asset.id);\n      }\n    });\n\n    // Find earliest start date across all assets\n    if (allStartDates.length > 0) {\n      const earliestDate = new Date(Math.min(...allStartDates));\n      setProjectStartDate(earliestDate.toISOString().split('T')[0]);\n    }\n\n    // Handle custom tasks by integrating them into the timeline\n    if (customTasks.length > 0) {\n      console.log('Processing custom tasks:', customTasks);\n\n      // First, create a simple timeline with all asset tasks\n      const assetTimeline = [...allTasks];\n      console.log('Initial asset timeline:', assetTimeline);\n\n      // Insert custom tasks at their specified positions\n      customTasks.forEach(customTask => {\n        let insertIndex = 0;\n        if (customTask.insertAfterTaskId) {\n          const afterTaskIndex = assetTimeline.findIndex(task => task.id === customTask.insertAfterTaskId);\n          console.log('Looking for insertAfterTaskId:', customTask.insertAfterTaskId, 'found at index:', afterTaskIndex);\n          if (afterTaskIndex !== -1) {\n            insertIndex = afterTaskIndex + 1;\n          }\n        }\n        console.log('Inserting custom task at index:', insertIndex);\n\n        // Insert the custom task (without dates for now)\n        assetTimeline.splice(insertIndex, 0, {\n          ...customTask,\n          start: '',\n          // Will be calculated below\n          end: '' // Will be calculated below\n        });\n      });\n      console.log('Timeline after inserting custom tasks:', assetTimeline);\n\n      // Now rebuild the timeline backwards from go-live to maintain constraints\n      const finalTimeline = [];\n\n      // Group tasks by asset to maintain the backwards calculation\n      const tasksByAsset = {};\n      assetTimeline.forEach(task => {\n        if (task.isCustom) {\n          // Custom tasks need to be associated with the asset they belong to\n          // Find which asset this custom task belongs to based on insertAfterTaskId\n          let targetAssetId = null;\n          if (task.insertAfterTaskId) {\n            const afterTask = assetTimeline.find(t => t.id === task.insertAfterTaskId);\n            if (afterTask) {\n              targetAssetId = afterTask.id.split('-')[0];\n            }\n          }\n          if (targetAssetId) {\n            if (!tasksByAsset[targetAssetId]) tasksByAsset[targetAssetId] = [];\n            tasksByAsset[targetAssetId].push(task);\n          } else {\n            var _selectedAssets$;\n            // Fallback: associate with the first asset\n            const firstAssetId = (_selectedAssets$ = selectedAssets[0]) === null || _selectedAssets$ === void 0 ? void 0 : _selectedAssets$.id;\n            if (firstAssetId) {\n              if (!tasksByAsset[firstAssetId]) tasksByAsset[firstAssetId] = [];\n              tasksByAsset[firstAssetId].push(task);\n            }\n          }\n        } else {\n          // Asset tasks are grouped by their asset ID\n          const assetId = task.id.split('-')[0];\n          if (!tasksByAsset[assetId]) tasksByAsset[assetId] = [];\n          tasksByAsset[assetId].push(task);\n        }\n      });\n      console.log('Tasks grouped by asset:', tasksByAsset);\n\n      // Rebuild each asset's timeline backwards from go-live\n      selectedAssets.forEach(asset => {\n        const assetTasks = tasksByAsset[asset.id] || [];\n        if (assetTasks.length === 0) return;\n        console.log(`Processing asset ${asset.id} with tasks:`, assetTasks);\n\n        // Separate go-live task from other tasks\n        const goLiveTask = assetTasks.find(task => task.name.includes('Go-Live'));\n        const regularTasks = assetTasks.filter(task => !task.name.includes('Go-Live'));\n\n        // Build backwards from go-live to calculate dates\n        let currentEndDate = new Date(asset.startDate);\n        const calculatedTasks = [];\n\n        // Calculate dates for regular tasks in reverse order (backwards from go-live)\n        for (let i = regularTasks.length - 1; i >= 0; i--) {\n          const task = regularTasks[i];\n          if (task.isCustom) {\n            // Custom task - calculate backwards from current end date\n            const taskStartDate = subtractWorkingDays(currentEndDate, task.duration);\n            const taskEndDate = new Date(currentEndDate);\n            taskEndDate.setDate(taskEndDate.getDate() - 1);\n\n            // Ensure end date is a working day\n            let finalTaskEndDate = new Date(taskEndDate);\n            if (isNonWorkingDay(finalTaskEndDate)) {\n              finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n            }\n            calculatedTasks.unshift({\n              ...task,\n              start: taskStartDate.toISOString().split('T')[0],\n              end: finalTaskEndDate.toISOString().split('T')[0]\n            });\n            currentEndDate = new Date(taskStartDate);\n          } else {\n            // Regular asset task\n            const taskInfo = csvData.find(row => row['Asset Type'] === asset.type && row['Task'] === task.name.split(': ')[1]);\n\n            // Use manual duration override if available\n            const customDurations = assetTaskDurations[asset.type] || {};\n            const duration = customDurations[taskInfo === null || taskInfo === void 0 ? void 0 : taskInfo['Task']] !== undefined ? customDurations[taskInfo['Task']] : parseInt(taskInfo === null || taskInfo === void 0 ? void 0 : taskInfo['Duration (Days)'], 10) || 1;\n            const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n            const taskEndDate = new Date(currentEndDate);\n            taskEndDate.setDate(taskEndDate.getDate() - 1);\n\n            // Ensure end date is a working day\n            let finalTaskEndDate = new Date(taskEndDate);\n            if (isNonWorkingDay(finalTaskEndDate)) {\n              finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n            }\n            calculatedTasks.unshift({\n              ...task,\n              start: taskStartDate.toISOString().split('T')[0],\n              end: finalTaskEndDate.toISOString().split('T')[0]\n            });\n            currentEndDate = new Date(taskStartDate);\n          }\n        }\n\n        // Add go-live task at the end\n        if (goLiveTask) {\n          calculatedTasks.push({\n            ...goLiveTask,\n            start: asset.startDate,\n            end: asset.startDate\n          });\n        }\n\n        // Add all tasks to final timeline in correct order\n        finalTimeline.push(...calculatedTasks);\n      });\n      console.log('Final timeline with custom tasks:', finalTimeline);\n      setTimelineTasks(finalTimeline);\n\n      // Update calculated start dates and date errors\n      const finalDateErrors = [];\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      selectedAssets.forEach(asset => {\n        const assetTasks = finalTimeline.filter(task => task.id.startsWith(`${asset.id}-`) && !task.name.includes('Go-Live'));\n        if (assetTasks.length > 0) {\n          // Find the earliest task for this asset\n          const earliestTask = assetTasks.reduce((earliest, task) => {\n            return new Date(task.start) < new Date(earliest.start) ? task : earliest;\n          });\n\n          // Update calculated start date\n          newCalculatedStartDates[asset.id] = earliestTask.start;\n\n          // Check if start date is before today\n          if (new Date(earliestTask.start) < today) {\n            finalDateErrors.push(asset.id);\n          }\n        }\n      });\n      setCalculatedStartDates(newCalculatedStartDates);\n      setDateErrors(finalDateErrors);\n    } else {\n      setTimelineTasks(allTasks);\n      setCalculatedStartDates(newCalculatedStartDates);\n      setDateErrors(newDateErrors);\n    }\n  }, [selectedAssets, globalLiveDate, useGlobalDate, assetLiveDates, csvData, assetTaskDurations, customTaskNames, customTasks]);\n\n  // Keyboard shortcuts for undo/redo\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if ((e.ctrlKey || e.metaKey) && e.key === 'z' && !e.shiftKey) {\n        e.preventDefault();\n        undo();\n      }\n      if ((e.ctrlKey || e.metaKey) && e.key === 'y' || (e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'z') {\n        e.preventDefault();\n        redo();\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [historyIndex, history.length]);\n  // This new useEffect pre-populates individual dates when switching from global mode\n  useEffect(() => {\n    if (!useGlobalDate && globalLiveDate && selectedAssets.length > 0) {\n      const newLiveDates = {\n        ...assetLiveDates\n      };\n      let updated = false;\n      selectedAssets.forEach(asset => {\n        // Pre-fill only if the asset doesn't have an individual date set\n        if (!newLiveDates[asset.name]) {\n          // Changed to asset.name\n          newLiveDates[asset.name] = globalLiveDate; // Changed to asset.name\n          updated = true;\n        }\n      });\n      if (updated) {\n        setAssetLiveDates(newLiveDates);\n      }\n    }\n  }, [useGlobalDate, globalLiveDate, selectedAssets, assetLiveDates]);\n\n  // Sync all asset instance startDates to globalLiveDate if useGlobalDate is true\n  useEffect(() => {\n    if (useGlobalDate && globalLiveDate && !isUndoRedoAction) {\n      setSelectedAssets(prev => prev.map(asset => asset.startDate !== globalLiveDate ? {\n        ...asset,\n        startDate: globalLiveDate\n      } : asset));\n    }\n    // Optionally, if unchecked, you could clear the dates or leave as-is\n  }, [useGlobalDate, globalLiveDate, isUndoRedoAction]);\n\n  // Custom tasks are handled directly in the main timeline calculation useEffect\n  // No need for a separate preserve useEffect that creates circular dependencies\n\n  // REMOVED: Separate custom task merging useEffect\n  // Custom tasks are now integrated directly into the main timeline calculation\n\n  // REMOVED: Custom task merging useEffect that was causing timeline disruption\n  // Custom tasks are now handled properly in the main timeline calculation\n  // Generate timeline tasks for Gantt chart\n  const generateTimelineTasks = startDates => {\n    if (selectedAssets.length === 0 || Object.keys(startDates).length === 0) {\n      setTimelineTasks([]);\n      return;\n    }\n    const allTasks = [];\n    let taskIndex = 0;\n    selectedAssets.forEach(asset => {\n      const assetName = asset.name; // Assuming asset object has a 'name' property\n      const assetTasks = csvData.filter(row => row['Asset Type'] === assetName);\n      if (assetTasks.length === 0) return;\n\n      // Get the correct live date for this asset\n      const liveDate = new Date(useGlobalDate ? globalLiveDate : assetLiveDates[assetName]);\n      if (isNaN(liveDate.getTime())) return;\n\n      // We'll build the tasks in reverse (from go-live backwards)\n      let currentEndDate = new Date(liveDate);\n      const ganttTasks = [];\n      let taskIndex = 0;\n\n      // Go-live task (single day)\n      ganttTasks.unshift({\n        id: `task-${taskIndex}`,\n        name: `${assetName}: Go-Live`,\n        start: liveDate.toISOString().split('T')[0],\n        end: liveDate.toISOString().split('T')[0],\n        progress: 0\n      });\n      taskIndex++;\n\n      // Process all other tasks in reverse order\n      for (let i = assetTasks.length - 1; i >= 0; i--) {\n        const taskInfo = assetTasks[i];\n        const duration = parseInt(taskInfo['Duration (Days)'], 10) || 1;\n        // Subtract working days to get the start date\n        const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n        // Task ends the working day before currentEndDate\n        const taskEndDate = new Date(currentEndDate);\n        taskEndDate.setDate(taskEndDate.getDate() - 1);\n        // Ensure end date is a working day\n        let finalTaskEndDate = new Date(taskEndDate);\n        if (isNonWorkingDay(finalTaskEndDate)) {\n          finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n        }\n        ganttTasks.unshift({\n          id: `task-${taskIndex}`,\n          name: `${taskInfo['Asset Type']}: ${taskInfo['Task']}`,\n          start: taskStartDate.toISOString().split('T')[0],\n          end: finalTaskEndDate.toISOString().split('T')[0],\n          progress: 0\n        });\n        taskIndex++;\n        // Update currentEndDate for the next task\n        currentEndDate = new Date(taskStartDate);\n      }\n\n      // Add all tasks for this asset to the main list\n      allTasks.push(...ganttTasks);\n\n      // Set the calculated start date for this asset to the start date of the first (earliest) task\n      if (ganttTasks.length > 0 && ganttTasks[0].start) {\n        newCalculatedStartDates[assetName] = ganttTasks[0].start;\n      }\n    });\n\n    // Merge custom tasks back into the timeline\n    if (customTasks.length > 0) {\n      // Insert custom tasks at their specified positions\n      customTasks.forEach(customTask => {\n        let insertIndex = 0;\n        if (customTask.insertAfterTaskId) {\n          const afterTaskIndex = allTasks.findIndex(task => task.id === customTask.insertAfterTaskId);\n          if (afterTaskIndex !== -1) {\n            insertIndex = afterTaskIndex + 1;\n          }\n        }\n\n        // Create a new custom task with updated dates\n        const newCustomTask = {\n          ...customTask,\n          id: customTask.id,\n          // Keep the same ID\n          name: customTask.name,\n          duration: customTask.duration,\n          isCustom: true\n        };\n\n        // Insert the custom task\n        allTasks.splice(insertIndex, 0, newCustomTask);\n      });\n\n      // Recalculate all task dates to accommodate custom tasks\n      // This is a simplified version - in practice, you'd want to recalculate dates\n      // based on the new timeline structure\n    }\n    setCalculatedStartDates(newCalculatedStartDates);\n    setTimelineTasks(allTasks);\n  };\n\n  // Helper to generate a unique id (could use a counter or Date.now())\n  const generateAssetId = () => Date.now() + Math.random();\n\n  // Add a new asset instance\n  const handleAddAsset = assetType => {\n    executeAction(() => {\n      const newAsset = {\n        id: generateAssetId(),\n        type: assetType,\n        name: assetType,\n        // default name, can be edited later\n        startDate: useGlobalDate && globalLiveDate ? globalLiveDate : ''\n      };\n      setSelectedAssets(prev => [...prev, newAsset]);\n    }, `Add ${assetType} asset`);\n  };\n\n  // Remove an asset instance by id\n  const handleRemoveAsset = assetId => {\n    const assetToRemove = selectedAssets.find(asset => asset.id === assetId);\n    executeAction(() => {\n      setSelectedAssets(prev => prev.filter(asset => asset.id !== assetId));\n    }, `Remove ${(assetToRemove === null || assetToRemove === void 0 ? void 0 : assetToRemove.name) || 'asset'}`);\n  };\n\n  // Handler to rename an asset instance by id\n  const handleRenameAsset = (assetId, newName) => {\n    const assetToRename = selectedAssets.find(asset => asset.id === assetId);\n    executeAction(() => {\n      setSelectedAssets(prev => prev.map(asset => asset.id === assetId ? {\n        ...asset,\n        name: newName\n      } : asset));\n    }, `Rename asset to \"${newName}\"`);\n  };\n\n  // Handler to rename a task\n  const handleRenameTask = (taskId, newName) => {\n    const currentTask = timelineTasks.find(task => task.id === taskId);\n    executeAction(() => {\n      setCustomTaskNames(prev => ({\n        ...prev,\n        [taskId]: newName\n      }));\n    }, `Rename task to \"${newName}\"`);\n  };\n  const handleAssetLiveDateChange = (assetName, date) => {\n    executeAction(() => {\n      setAssetLiveDates(prev => ({\n        ...prev,\n        [assetName]: date\n      }));\n    }, `Change ${assetName} go-live date to ${date}`);\n  };\n  const handleAssetStartDateChange = (assetId, newDate) => {\n    const assetToUpdate = selectedAssets.find(asset => asset.id === assetId);\n    executeAction(() => {\n      setSelectedAssets(prev => prev.map(asset => asset.id === assetId ? {\n        ...asset,\n        startDate: newDate\n      } : asset));\n    }, `Change ${(assetToUpdate === null || assetToUpdate === void 0 ? void 0 : assetToUpdate.name) || 'asset'} go-live date to ${newDate}`);\n  };\n\n  // Handler to save custom task durations for an asset\n  const handleSaveTaskDurations = (assetId, durations) => {\n    const assetToUpdate = selectedAssets.find(asset => asset.id === assetId);\n    executeAction(() => {\n      setAssetTaskDurations(prev => ({\n        ...prev,\n        [assetId]: durations\n      }));\n\n      // Preserve custom tasks before timeline recalculation\n      const currentCustomTasks = timelineTasks.filter(task => task.isCustom);\n      setCustomTasks(currentCustomTasks);\n    }, `Update task durations for ${(assetToUpdate === null || assetToUpdate === void 0 ? void 0 : assetToUpdate.name) || 'asset'}`);\n  };\n\n  // Handler for drag-to-resize task duration\n  const handleTaskDurationChange = (taskId, newDuration, newEndDate) => {\n    // Find the task being modified\n    const taskIndex = timelineTasks.findIndex(task => task.id === taskId);\n    if (taskIndex === -1) return;\n    const task = timelineTasks[taskIndex];\n    const taskName = task.name.split(': ')[1]; // Get task name after the colon\n    const assetName = task.name.split(': ')[0]; // Get asset name before the colon\n\n    // Find the asset by name\n    const asset = selectedAssets.find(a => a.name === assetName);\n    if (!asset) return;\n    executeAction(() => {\n      // Update the assetTaskDurations state to trigger the same recalculation logic\n      // that the manual duration editing uses\n      // Use asset.type as the key to match CSV task names consistently\n      setAssetTaskDurations(prev => {\n        const currentDurations = prev[asset.type] || {};\n        return {\n          ...prev,\n          [asset.type]: {\n            ...currentDurations,\n            [taskName]: newDuration\n          }\n        };\n      });\n    }, `Change ${taskName} duration to ${newDuration} days`);\n  };\n\n  // Handler for adding custom tasks\n  const handleAddCustomTask = customTaskData => {\n    const {\n      name,\n      duration,\n      insertAfterTaskId\n    } = customTaskData;\n    console.log('handleAddCustomTask called with:', customTaskData);\n    executeAction(() => {\n      // Create the new custom task\n      const newTaskId = `custom-task-${Date.now()}`;\n      const newTask = {\n        id: newTaskId,\n        name: `Custom: ${name}`,\n        duration: duration,\n        insertAfterTaskId: insertAfterTaskId,\n        isCustom: true,\n        progress: 0\n      };\n      console.log('Created new custom task:', newTask);\n\n      // Add to custom tasks - this will trigger the main timeline calculation useEffect\n      setCustomTasks(prev => {\n        const updated = [...prev, newTask];\n        console.log('Updated customTasks:', updated);\n        return updated;\n      });\n\n      // Don't manually insert into timelineTasks here - let the main useEffect handle it\n      // This ensures proper timeline recalculation and date adjustments\n    }, `Add custom task \"${name}\"`);\n  };\n\n  // Helper function to count working days between two dates (exclusive)\n  const countWorkingDays = (startDate, endDate) => {\n    let count = 0;\n    const current = new Date(startDate);\n    const end = new Date(endDate);\n\n    // Move to next day to make it exclusive\n    current.setDate(current.getDate() + 1);\n    while (current <= end) {\n      if (!isNonWorkingDay(current)) {\n        count++;\n      }\n      current.setDate(current.getDate() + 1);\n    }\n    return count;\n  };\n\n  // Single source of truth for working days calculation (same as AssetSelector)\n  const calculateWorkingDaysBetween = (startDate, endDate) => {\n    if (!startDate || !endDate) return 0;\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    if (start >= end) return 0;\n    let workingDays = 0;\n    let currentDate = new Date(start);\n    while (currentDate < end) {\n      const dayOfWeek = currentDate.getDay();\n      // Count if not weekend (0 = Sunday, 6 = Saturday)\n      if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n        workingDays++;\n      }\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    return workingDays;\n  };\n\n  // Helper function to calculate task end date based on start date and duration\n  const calculateTaskEndDate = (startDate, duration) => {\n    let endDate = new Date(startDate);\n    let remainingDays = duration - 1; // -1 because we count the start date\n\n    while (remainingDays > 0) {\n      endDate.setDate(endDate.getDate() + 1);\n      if (!isNonWorkingDay(endDate)) {\n        remainingDays--;\n      }\n    }\n    return endDate.toISOString().split('T')[0];\n  };\n\n  // Calculate working days needed per asset for detailed timeline alerts\n  const calculateWorkingDaysNeededPerAsset = () => {\n    if (!globalLiveDate || timelineTasks.length === 0) return [];\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const assetAlerts = [];\n\n    // Calculate for each asset that has date errors\n    selectedAssets.forEach(asset => {\n      const calculatedStart = calculatedStartDates[asset.id];\n      if (calculatedStart && dateErrors.includes(asset.id)) {\n        const startDate = new Date(calculatedStart);\n        const daysInPast = calculateWorkingDaysBetween(startDate, today);\n        if (daysInPast > 0) {\n          assetAlerts.push({\n            assetId: asset.id,\n            assetName: asset.name,\n            assetType: asset.type,\n            daysNeeded: daysInPast,\n            daysSaved: 0,\n            // This would need to be calculated based on original vs current durations\n            startDate: calculatedStart,\n            isCritical: daysInPast > 5 // Mark as critical if more than 5 days needed\n          });\n        }\n      }\n    });\n\n    // Sort by urgency (most days needed first)\n    return assetAlerts.sort((a, b) => b.daysNeeded - a.daysNeeded);\n  };\n\n  // Single source of truth for working days needed (same as AssetSelector's getWorkingDaysToSave)\n  const calculateWorkingDaysNeeded = () => {\n    if (!globalLiveDate || timelineTasks.length === 0) return null;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    // Use the exact same logic as AssetSelector's getWorkingDaysToSave\n    let totalDaysInPast = 0;\n\n    // Only count assets that are in dateErrors (same as asset-specific calculation)\n    selectedAssets.forEach(asset => {\n      const calculatedStart = calculatedStartDates[asset.id];\n      if (calculatedStart && dateErrors.includes(asset.id)) {\n        const startDate = new Date(calculatedStart);\n        totalDaysInPast += calculateWorkingDaysBetween(startDate, today);\n      }\n    });\n\n    // Also check custom tasks that start in the past\n    timelineTasks.forEach(task => {\n      if (task.isCustom) {\n        const taskStart = new Date(task.start);\n        if (taskStart < today) {\n          totalDaysInPast += calculateWorkingDaysBetween(taskStart, today);\n        }\n      }\n    });\n    return {\n      available: 0,\n      // Not used in this calculation\n      allocated: 0,\n      // Not used in this calculation\n      needed: totalDaysInPast\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-100 min-h-screen font-sans\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-white shadow-md\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto px-6 py-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-3xl font-bold text-gray-800\",\n            children: \"Accordion Timeline Builder\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1069,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: undo,\n              disabled: historyIndex <= 0,\n              className: \"px-3 py-1 bg-gray-500 text-white rounded text-sm hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\",\n              title: \"Undo (Ctrl+Z)\",\n              children: \"\\u21A9\\uFE0F Undo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1071,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: redo,\n              disabled: historyIndex >= history.length - 1,\n              className: \"px-3 py-1 bg-gray-500 text-white rounded text-sm hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\",\n              title: \"Redo (Ctrl+Y)\",\n              children: \"\\u21AA\\uFE0F Redo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1079,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1070,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1068,\n          columnNumber: 21\n        }, this), showInfoBox && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative mb-6 mt-4 p-4 bg-blue-50 border border-blue-200 rounded-md text-sm text-blue-900\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"absolute top-2 right-2 text-blue-700 hover:text-blue-900 text-lg font-bold focus:outline-none\",\n            onClick: () => {\n              executeAction(() => setShowInfoBox(false), \"Hide instructions\");\n            },\n            \"aria-label\": \"Close instructions\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1092,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"How to Build Your Campaign Timeline:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1101,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n            className: \"list-decimal pl-5 mt-2 space-y-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Choose Your Campaign Start Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1104,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1104,\n                columnNumber: 86\n              }, this), \"If all assets launch on the same day, set a global start date and check \\u201CUse same live date for all assets.\\u201D\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1105,\n                columnNumber: 145\n              }, this), \"If assets launch on different days, uncheck the box and set dates individually for each asset.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1103,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Add Assets:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1109,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1109,\n                columnNumber: 65\n              }, this), \"Click \\u201CAdd\\u201D next to each asset type you need.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1110,\n                columnNumber: 82\n              }, this), \"Need the same asset type more than once? Click \\u201CAdd\\u201D again and give each a unique name.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1108,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Customize Assets:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1114,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1114,\n                columnNumber: 71\n              }, this), \"Rename each asset for clarity (e.g., \\u201CMetro Advertorial \\u2013 August\\u201D).\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1115,\n                columnNumber: 104\n              }, this), \"Set or confirm the start date for each asset.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1113,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Review Your Timeline:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1119,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1119,\n                columnNumber: 75\n              }, this), \"Remove any asset you don\\u2019t need.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1120,\n                columnNumber: 69\n              }, this), \"Check the timeline to ensure all assets are scheduled as planned.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1118,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Adjust Your Timeline if Needed:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1124,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1124,\n                columnNumber: 85\n              }, this), \"If an asset\\u2019s timeline can\\u2019t be completed by the selected start date, you\\u2019ll see a warning.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1125,\n                columnNumber: 128\n              }, this), \"\\u2013 You can either change the go-live date, or\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1126,\n                columnNumber: 81\n              }, this), \"\\u2013 Manually shorten the durations of individual tasks (\\u201Caccordion\\u201D your timeline) until the schedule fits.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1123,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Undo/Redo:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1130,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1130,\n                columnNumber: 64\n              }, this), \"Use Ctrl+Z to undo and Ctrl+Y to redo any changes you make.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1131,\n                columnNumber: 96\n              }, this), \"You can also use the Undo/Redo buttons in the top-right corner.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1129,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1102,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1091,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1067,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1066,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container mx-auto p-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 lg:grid-cols-3 gap-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lg:col-span-1 bg-white p-6 rounded-xl shadow-lg overflow-x-auto\",\n          style: {\n            minWidth: 380\n          } // You can adjust 380 to your needs\n          ,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\",\n            children: \"Timeline Setup\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1146,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CampaignSetup, {\n            globalLiveDate: globalLiveDate,\n            onGlobalLiveDateChange: date => {\n              executeAction(() => setGlobalLiveDate(date), `Change global go-live date to ${date}`);\n            },\n            useGlobalDate: useGlobalDate,\n            onUseGlobalDateChange: useGlobal => {\n              executeAction(() => setUseGlobalDate(useGlobal), `Switch to ${useGlobal ? 'global' : 'individual'} date mode`);\n            },\n            projectStartDate: projectStartDate,\n            dateErrors: dateErrors,\n            workingDaysNeeded: calculateWorkingDaysNeeded()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1147,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AssetSelector, {\n            assets: uniqueAssets || [],\n            selectedAssets: selectedAssets || [],\n            onAddAsset: handleAddAsset,\n            onRemoveAsset: handleRemoveAsset,\n            useGlobalDate: useGlobalDate,\n            globalLiveDate: globalLiveDate || '',\n            assetLiveDates: assetLiveDates || {},\n            onAssetLiveDateChange: handleAssetLiveDateChange,\n            calculatedStartDates: calculatedStartDates || {},\n            dateErrors: dateErrors || [],\n            onRenameAsset: handleRenameAsset,\n            onAssetStartDateChange: handleAssetStartDateChange,\n            csvData: csvData,\n            onSaveTaskDurations: handleSaveTaskDurations,\n            isNonWorkingDay: isNonWorkingDay,\n            calculateWorkingDaysBetween: calculateWorkingDaysBetween\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1160,\n            columnNumber: 1\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lg:col-span-2 bg-white p-6 rounded-xl shadow-lg\",\n          style: {\n            minWidth: 0,\n            maxWidth: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\",\n            children: \"Generated Timeline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1185,\n            columnNumber: 25\n          }, this), timelineTasks && timelineTasks.length > 0 ? /*#__PURE__*/_jsxDEV(GanttChart, {\n            tasks: timelineTasks,\n            bankHolidays: bankHolidays,\n            onTaskDurationChange: handleTaskDurationChange,\n            onTaskNameChange: handleRenameTask,\n            workingDaysNeeded: calculateWorkingDaysNeeded(),\n            assetAlerts: calculateWorkingDaysNeededPerAsset(),\n            onAddCustomTask: handleAddCustomTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1208,\n            columnNumber: 53\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-gray-500 py-10\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-lg\",\n              children: \"Your timeline will appear here.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1219,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm\",\n              children: \"Set a live date and select some assets to begin.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1220,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1218,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1181,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1140,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1139,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1065,\n    columnNumber: 9\n  }, this);\n};\n_s(TimelineBuilder, \"U/GYG42WnkUctu1O8ipeKktecLU=\");\n_c = TimelineBuilder;\nexport default TimelineBuilder;\nvar _c;\n$RefreshReg$(_c, \"TimelineBuilder\");","map":{"version":3,"names":["React","useState","useEffect","Papa","AssetSelector","CampaignSetup","GanttChart","jsxDEV","_jsxDEV","TimelineBuilder","_s","csvData","setCsvData","uniqueAssets","setUniqueAssets","selectedAssets","setSelectedAssets","globalLiveDate","setGlobalLiveDate","useGlobalDate","setUseGlobalDate","assetLiveDates","setAssetLiveDates","calculatedStartDates","setCalculatedStartDates","projectStartDate","setProjectStartDate","dateErrors","setDateErrors","timelineTasks","setTimelineTasks","showInfoBox","setShowInfoBox","assetTaskDurations","setAssetTaskDurations","customTasks","setCustomTasks","customTaskNames","setCustomTaskNames","bankHolidays","setBankHolidays","history","setHistory","historyIndex","setHistoryIndex","isUndoRedoAction","setIsUndoRedoAction","getTaskName","taskId","assetName","taskInfo","createStateSnapshot","actionDescription","JSON","parse","stringify","timestamp","Date","now","actionType","restoreFromSnapshot","snapshot","console","log","error","undefined","undo","length","previousSnapshot","prev","newIndex","validIndex","redo","nextSnapshot","filter","Math","min","executeAction","actionFunction","currentSnapshot","newHistory","slice","isNonWorkingDay","date","day","getDay","yyyy_mm_dd","toISOString","split","includes","getPreviousWorkingDay","workingDate","setDate","getDate","getNextWorkingDay","subtractWorkingDays","endDate","workingDaysToSubtract","currentDate","remainingDays","addWorkingDays","startDate","workingDaysToAdd","window","location","origin","download","header","skipEmptyLines","complete","results","parsedData","data","assetTypes","Set","map","row","type","fetch","then","response","json","events","tenYearsFromNow","getFullYear","getMonth","holidayDates","event","dateStr","catch","err","today","setHours","newCalculatedStartDates","newDateErrors","allStartDates","allTasks","forEach","asset","assetTasks","liveDate","isNaN","getTime","currentEndDate","ganttTasks","taskIndex","goLiveTaskId","id","unshift","name","start","end","progress","i","customDurations","duration","parseInt","taskStartDate","taskEndDate","finalTaskEndDate","push","earliestDate","assetTimeline","customTask","insertIndex","insertAfterTaskId","afterTaskIndex","findIndex","task","splice","finalTimeline","tasksByAsset","isCustom","targetAssetId","afterTask","find","t","_selectedAssets$","firstAssetId","assetId","goLiveTask","regularTasks","calculatedTasks","finalDateErrors","startsWith","earliestTask","reduce","earliest","handleKeyDown","e","ctrlKey","metaKey","key","shiftKey","preventDefault","document","addEventListener","removeEventListener","newLiveDates","updated","generateTimelineTasks","startDates","Object","keys","newCustomTask","generateAssetId","random","handleAddAsset","assetType","newAsset","handleRemoveAsset","assetToRemove","handleRenameAsset","newName","assetToRename","handleRenameTask","currentTask","handleAssetLiveDateChange","handleAssetStartDateChange","newDate","assetToUpdate","handleSaveTaskDurations","durations","currentCustomTasks","handleTaskDurationChange","newDuration","newEndDate","taskName","a","currentDurations","handleAddCustomTask","customTaskData","newTaskId","newTask","countWorkingDays","count","current","calculateWorkingDaysBetween","workingDays","dayOfWeek","calculateTaskEndDate","calculateWorkingDaysNeededPerAsset","assetAlerts","calculatedStart","daysInPast","daysNeeded","daysSaved","isCritical","sort","b","calculateWorkingDaysNeeded","totalDaysInPast","taskStart","available","allocated","needed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","title","style","minWidth","onGlobalLiveDateChange","onUseGlobalDateChange","useGlobal","workingDaysNeeded","assets","onAddAsset","onRemoveAsset","onAssetLiveDateChange","onRenameAsset","onAssetStartDateChange","onSaveTaskDurations","maxWidth","tasks","onTaskDurationChange","onTaskNameChange","onAddCustomTask","_c","$RefreshReg$"],"sources":["/Users/hamishnicklin/Accordion3F/src/TimelineBuilder.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport AssetSelector from './components/AssetSelector';\nimport CampaignSetup from './components/CampaignSetup';\nimport GanttChart from './components/GanttChart';\n\nconst TimelineBuilder = () => {\n    // CSV and asset data\n    const [csvData, setCsvData] = useState([]);\n    const [uniqueAssets, setUniqueAssets] = useState([]);\n    // Each selected asset is now an object with a unique id, type, name, and startDate\n    const [selectedAssets, setSelectedAssets] = useState([]);\n    \n    // Live date management\n    const [globalLiveDate, setGlobalLiveDate] = useState('');\n    const [useGlobalDate, setUseGlobalDate] = useState(true);\n    const [assetLiveDates, setAssetLiveDates] = useState({}); // {assetName: 'YYYY-MM-DD'}\n    \n    // Calculated results\n    const [calculatedStartDates, setCalculatedStartDates] = useState({}); // {assetName: 'YYYY-MM-DD'}\n    const [projectStartDate, setProjectStartDate] = useState(''); // Earliest start date across all assets\n    const [dateErrors, setDateErrors] = useState([]); // Array of asset names that start before today\n    \n    // Final timeline for display\n    const [timelineTasks, setTimelineTasks] = useState([]);\n    const [showInfoBox, setShowInfoBox] = useState(true); // Add state for info box\n\n    // Add state to store custom task durations for each asset instance\n    const [assetTaskDurations, setAssetTaskDurations] = useState({}); // { assetId: { taskName: duration, ... } }\n\n    // Add state to store custom tasks separately\n    const [customTasks, setCustomTasks] = useState([]); // Array of custom task objects\n\n    // Add state to store custom task names\n    const [customTaskNames, setCustomTaskNames] = useState({}); // { taskId: customName }\n\n    // Add state to store bank holidays\n    const [bankHolidays, setBankHolidays] = useState([]); // Array of YYYY-MM-DD strings\n\n    // Undo/Redo infrastructure\n    const [history, setHistory] = useState([]);\n    const [historyIndex, setHistoryIndex] = useState(-1);\n    const [isUndoRedoAction, setIsUndoRedoAction] = useState(false);\n\n    // Helper function to get task name (custom or default)\n    const getTaskName = (taskId, assetName, taskInfo) => {\n        // Check if there's a custom name for this task\n        if (customTaskNames[taskId]) {\n            return customTaskNames[taskId];\n        }\n        // Return default format\n        return `${assetName}: ${taskInfo['Task']}`;\n    };\n\n    // Create a snapshot of the current app state for undo/redo\n    const createStateSnapshot = (actionDescription) => ({\n        // Asset state\n        selectedAssets: JSON.parse(JSON.stringify(selectedAssets)),\n        assetLiveDates: JSON.parse(JSON.stringify(assetLiveDates)),\n        useGlobalDate,\n        globalLiveDate,\n        \n        // Task state\n        customTaskNames: JSON.parse(JSON.stringify(customTaskNames)),\n        assetTaskDurations: JSON.parse(JSON.stringify(assetTaskDurations)),\n        customTasks: JSON.parse(JSON.stringify(customTasks)),\n        \n        // UI state\n        showInfoBox,\n        \n        // Calculated state (will be recalculated after restoration)\n        timelineTasks: JSON.parse(JSON.stringify(timelineTasks)),\n        calculatedStartDates: JSON.parse(JSON.stringify(calculatedStartDates)),\n        dateErrors: JSON.parse(JSON.stringify(dateErrors)),\n        projectStartDate,\n        \n        // Metadata\n        timestamp: Date.now(),\n        actionDescription,\n        actionType: 'user_action'\n    });\n\n    // Restore app state from a snapshot\n    const restoreFromSnapshot = (snapshot) => {\n        console.log('restoreFromSnapshot called with:', snapshot);\n        \n        // Validate snapshot before restoring\n        if (!snapshot || typeof snapshot !== 'object') {\n            console.error('Invalid snapshot provided to restoreFromSnapshot');\n            return;\n        }\n        \n        console.log('Restoring state from snapshot...');\n        \n        // Restore only the input state (what the user controls)\n        if (snapshot.selectedAssets) {\n            console.log('Restoring selectedAssets:', snapshot.selectedAssets);\n            setSelectedAssets(snapshot.selectedAssets);\n        }\n        if (snapshot.assetLiveDates) {\n            console.log('Restoring assetLiveDates:', snapshot.assetLiveDates);\n            setAssetLiveDates(snapshot.assetLiveDates);\n        }\n        if (snapshot.useGlobalDate !== undefined) {\n            console.log('Restoring useGlobalDate:', snapshot.useGlobalDate);\n            setUseGlobalDate(snapshot.useGlobalDate);\n        }\n        if (snapshot.globalLiveDate) {\n            console.log('Restoring globalLiveDate:', snapshot.globalLiveDate);\n            setGlobalLiveDate(snapshot.globalLiveDate);\n        }\n        if (snapshot.customTaskNames) {\n            console.log('Restoring customTaskNames:', snapshot.customTaskNames);\n            setCustomTaskNames(snapshot.customTaskNames);\n        }\n        if (snapshot.assetTaskDurations) {\n            console.log('Restoring assetTaskDurations:', snapshot.assetTaskDurations);\n            setAssetTaskDurations(snapshot.assetTaskDurations);\n        }\n        if (snapshot.customTasks) {\n            console.log('Restoring customTasks:', snapshot.customTasks);\n            setCustomTasks(snapshot.customTasks);\n        }\n        if (snapshot.showInfoBox !== undefined) {\n            console.log('Restoring showInfoBox:', snapshot.showInfoBox);\n            setShowInfoBox(snapshot.showInfoBox);\n        }\n        \n        console.log('State restoration complete');\n        \n        // Don't restore calculated state - let the useEffect recalculate it fresh\n        // This prevents conflicts between old calculated state and new input state\n        // setTimelineTasks(snapshot.timelineTasks);\n        // setCalculatedStartDates(snapshot.calculatedStartDates);\n        // setDateErrors(snapshot.dateErrors);\n        // setProjectStartDate(snapshot.projectStartDate);\n    };\n\n    // Undo function\n    const undo = () => {\n        console.log('undo called');\n        console.log('Current history length:', history.length, 'historyIndex:', historyIndex);\n        \n        if (historyIndex > 0 && history[historyIndex - 1]) {\n            console.log('Attempting undo to index:', historyIndex - 1);\n            setIsUndoRedoAction(true);\n            const previousSnapshot = history[historyIndex - 1];\n            console.log('Previous snapshot:', previousSnapshot);\n            \n            // Validate the snapshot before restoring\n            if (previousSnapshot && \n                previousSnapshot.selectedAssets && \n                previousSnapshot.selectedAssets.length > 0) {\n                console.log('Restoring from valid snapshot');\n                restoreFromSnapshot(previousSnapshot);\n                setHistoryIndex(prev => {\n                    const newIndex = prev - 1;\n                    console.log('New history index after undo:', newIndex);\n                    return newIndex;\n                });\n            } else {\n                console.error('Invalid snapshot found in history during undo - no assets selected');\n                // Try to find a valid snapshot further back\n                let validIndex = historyIndex - 2;\n                while (validIndex >= 0) {\n                    const snapshot = history[validIndex];\n                    if (snapshot && \n                        snapshot.selectedAssets && \n                        snapshot.selectedAssets.length > 0) {\n                        console.log('Found valid snapshot at index:', validIndex);\n                        restoreFromSnapshot(snapshot);\n                        setHistoryIndex(validIndex);\n                        break;\n                    }\n                    validIndex--;\n                }\n                \n                if (validIndex < 0) {\n                    console.error('No valid snapshot found in history');\n                    // Reset to current state\n                    setHistoryIndex(historyIndex);\n                }\n            }\n            setIsUndoRedoAction(false);\n        } else {\n            console.log('Cannot undo: historyIndex <= 0 or no previous snapshot');\n        }\n    };\n\n    // Redo function\n    const redo = () => {\n        if (historyIndex < history.length - 1 && history[historyIndex + 1]) {\n            setIsUndoRedoAction(true);\n            const nextSnapshot = history[historyIndex + 1];\n            if (nextSnapshot && nextSnapshot.selectedAssets) {\n                restoreFromSnapshot(nextSnapshot);\n                setHistoryIndex(prev => prev + 1);\n            } else {\n                console.error('Invalid snapshot found in history during redo');\n                // Remove the invalid snapshot and try again\n                setHistory(prev => prev.filter(snapshot => snapshot && snapshot.selectedAssets));\n                setHistoryIndex(prev => Math.min(prev, history.length - 1));\n            }\n            setIsUndoRedoAction(false);\n        }\n    };\n\n    // Execute an action and save to history\n    const executeAction = (actionFunction, actionDescription) => {\n        console.log('executeAction called with:', actionDescription);\n        console.log('Current history length:', history.length, 'historyIndex:', historyIndex);\n        \n        // Save current state before action\n        const currentSnapshot = createStateSnapshot(actionDescription);\n        console.log('Created snapshot:', currentSnapshot);\n        \n        // Execute the action\n        actionFunction();\n        \n        // Add to history (unless this is an undo/redo action)\n        if (!isUndoRedoAction) {\n            console.log('Adding to history (not undo/redo action)');\n            setHistory(prev => {\n                const newHistory = [...prev.slice(0, historyIndex + 1), currentSnapshot];\n                console.log('New history length:', newHistory.length);\n                // Limit history to last 50 actions to prevent memory issues\n                return newHistory.slice(-50);\n            });\n            setHistoryIndex(prev => {\n                const newIndex = Math.min(prev + 1, 49);\n                console.log('New history index:', newIndex);\n                return newIndex;\n            });\n        } else {\n            console.log('Skipping history update (undo/redo action)');\n        }\n    };\n\n    // Helper function to check if date is a non-working day (weekend or bank holiday)\n    const isNonWorkingDay = (date) => {\n        const day = date.getDay();\n        const yyyy_mm_dd = date.toISOString().split('T')[0];\n        return day === 0 || day === 6 || bankHolidays.includes(yyyy_mm_dd);\n    };\n\n    // Helper function to get previous working day\n    const getPreviousWorkingDay = (date) => {\n        let workingDate = new Date(date);\n        do {\n            workingDate.setDate(workingDate.getDate() - 1);\n        } while (isNonWorkingDay(workingDate));\n        return workingDate;\n    };\n\n    // Helper function to get next working day\n    const getNextWorkingDay = (date) => {\n        let workingDate = new Date(date);\n        do {\n            workingDate.setDate(workingDate.getDate() + 1);\n        } while (isNonWorkingDay(workingDate));\n        return workingDate;\n    };\n\n    // Helper function to subtract working days (backwards calculation)\n    const subtractWorkingDays = (endDate, workingDaysToSubtract) => {\n        let currentDate = new Date(endDate);\n        let remainingDays = workingDaysToSubtract;\n        // Subtract working days\n        while (remainingDays > 0) {\n            currentDate.setDate(currentDate.getDate() - 1);\n            // Only count non-non-working days\n            if (!isNonWorkingDay(currentDate)) {\n                remainingDays--;\n            }\n        }\n        return currentDate;\n    };\n\n    // Helper function to add working days (forward calculation for display)\n    const addWorkingDays = (startDate, workingDaysToAdd) => {\n        if (workingDaysToAdd <= 0) {\n            return new Date(startDate);\n        }\n        let currentDate = new Date(startDate);\n        let remainingDays = workingDaysToAdd - 1;\n        while (remainingDays > 0) {\n            currentDate.setDate(currentDate.getDate() + 1);\n            if (!isNonWorkingDay(currentDate)) {\n                remainingDays--;\n            }\n        }\n        // Ensure the final day is a working day\n        while (isNonWorkingDay(currentDate)) {\n            currentDate.setDate(currentDate.getDate() + 1);\n        }\n        return currentDate;\n    };\n\n    // Load CSV data\n    useEffect(() => {\n        Papa.parse(`${window.location.origin}/Group_Asset_Task_Time.csv`, {\n            download: true,\n            header: true,\n            skipEmptyLines: true,\n            complete: (results) => {\n                const parsedData = results.data;\n                setCsvData(parsedData);\n                \n                // Extract unique asset types from CSV\n                const assetTypes = [...new Set(parsedData.map(row => row['Asset Type']))].filter(type => type);\n                setUniqueAssets(assetTypes);\n            },\n            error: (error) => {\n                console.error(\"Error parsing CSV file:\", error);\n            }\n        });\n    }, []);\n\n    // Fetch UK bank holidays for England and Wales on app load\n    useEffect(() => {\n        fetch('https://www.gov.uk/bank-holidays.json')\n            .then(response => response.json())\n            .then(data => {\n                // Get all dates for England and Wales\n                const events = data['england-and-wales'].events;\n                // Get all dates for the next 10 years\n                const now = new Date();\n                const tenYearsFromNow = new Date(now.getFullYear() + 10, now.getMonth(), now.getDate());\n                const holidayDates = events\n                    .map(event => event.date)\n                    .filter(dateStr => {\n                        const date = new Date(dateStr);\n                        return date >= now && date <= tenYearsFromNow;\n                    });\n                setBankHolidays(holidayDates);\n            })\n            .catch(err => {\n                // If fetch fails, fallback to an empty array (or you could use a static list)\n                setBankHolidays([]);\n            });\n    }, []);\n\n    // Calculate backwards timeline when live dates or assets change\n    useEffect(() => {\n        if (selectedAssets.length === 0 || csvData.length === 0) {\n            setTimelineTasks([]);\n            setCalculatedStartDates({});\n            setProjectStartDate('');\n            setDateErrors([]);\n            return;\n        }\n\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Reset time for accurate comparison\n        \n        const newCalculatedStartDates = {};\n        const newDateErrors = [];\n        const allStartDates = [];\n        const allTasks = [];\n\n        // Loop over each selected asset instance (not just type)\n        selectedAssets.forEach(asset => {\n            // asset: { id, type, name, startDate }\n            if (!asset.startDate) return; // Skip if no start date set\n\n            // Find all tasks for this asset type from the CSV\n            const assetTasks = csvData.filter(row => row['Asset Type'] === asset.type);\n            if (assetTasks.length === 0) return;\n\n            // Use the asset instance's startDate as the go-live date\n            const liveDate = new Date(asset.startDate);\n            if (isNaN(liveDate.getTime())) return;\n\n            // We'll build the tasks in reverse (from go-live backwards)\n            let currentEndDate = new Date(liveDate);\n            const ganttTasks = [];\n            let taskIndex = 0;\n\n            // Go-live task (single day)\n            const goLiveTaskId = `${asset.id}-go-live`;\n            ganttTasks.unshift({\n                id: goLiveTaskId,\n                name: getTaskName(goLiveTaskId, asset.name, { 'Task': 'Go-Live' }),\n                start: liveDate.toISOString().split('T')[0],\n                end: liveDate.toISOString().split('T')[0],\n                progress: 0,\n            });\n            taskIndex++;\n\n            // Process all other tasks in reverse order\n            for (let i = assetTasks.length - 1; i >= 0; i--) {\n                const taskInfo = assetTasks[i];\n                // Use custom duration if present, else default from CSV\n                // Use asset.type as the key to match CSV task names consistently\n                const customDurations = assetTaskDurations[asset.type] || {};\n                const duration = customDurations[taskInfo['Task']] !== undefined\n                    ? customDurations[taskInfo['Task']]\n                    : parseInt(taskInfo['Duration (Days)'], 10) || 1;\n                // Subtract working days to get the start date\n                const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n                // Task ends the working day before currentEndDate\n                const taskEndDate = new Date(currentEndDate);\n                taskEndDate.setDate(taskEndDate.getDate() - 1);\n                // Ensure end date is a working day\n                let finalTaskEndDate = new Date(taskEndDate);\n                if (isNonWorkingDay(finalTaskEndDate)) {\n                    finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n                }\n                const taskId = `${asset.id}-task-${taskIndex}`;\n                ganttTasks.unshift({\n                    id: taskId,\n                    name: getTaskName(taskId, asset.name, taskInfo),\n                    start: taskStartDate.toISOString().split('T')[0],\n                    end: finalTaskEndDate.toISOString().split('T')[0],\n                    progress: 0,\n                });\n                taskIndex++;\n                // Update currentEndDate for the next task\n                currentEndDate = new Date(taskStartDate);\n            }\n\n            // Add all tasks for this asset instance to the main list\n            allTasks.push(...ganttTasks);\n\n            // Set the calculated start date for this asset to the start date of the first (earliest) task\n            if (ganttTasks.length > 0 && ganttTasks[0].start) {\n                newCalculatedStartDates[asset.id] = ganttTasks[0].start;\n                allStartDates.push(new Date(ganttTasks[0].start));\n            }\n\n            // Check if start date is before today\n            if (ganttTasks.length > 0 && new Date(ganttTasks[0].start) < today) {\n                newDateErrors.push(asset.id);\n            }\n        });\n\n        // Find earliest start date across all assets\n        if (allStartDates.length > 0) {\n            const earliestDate = new Date(Math.min(...allStartDates));\n            setProjectStartDate(earliestDate.toISOString().split('T')[0]);\n        }\n\n        // Handle custom tasks by integrating them into the timeline\n        if (customTasks.length > 0) {\n            console.log('Processing custom tasks:', customTasks);\n            \n            // First, create a simple timeline with all asset tasks\n            const assetTimeline = [...allTasks];\n            console.log('Initial asset timeline:', assetTimeline);\n            \n            // Insert custom tasks at their specified positions\n            customTasks.forEach(customTask => {\n                let insertIndex = 0;\n                if (customTask.insertAfterTaskId) {\n                    const afterTaskIndex = assetTimeline.findIndex(task => task.id === customTask.insertAfterTaskId);\n                    console.log('Looking for insertAfterTaskId:', customTask.insertAfterTaskId, 'found at index:', afterTaskIndex);\n                    if (afterTaskIndex !== -1) {\n                        insertIndex = afterTaskIndex + 1;\n                    }\n                }\n                \n                console.log('Inserting custom task at index:', insertIndex);\n                \n                // Insert the custom task (without dates for now)\n                assetTimeline.splice(insertIndex, 0, {\n                    ...customTask,\n                    start: '', // Will be calculated below\n                    end: ''    // Will be calculated below\n                });\n            });\n            \n            console.log('Timeline after inserting custom tasks:', assetTimeline);\n            \n            // Now rebuild the timeline backwards from go-live to maintain constraints\n            const finalTimeline = [];\n            \n            // Group tasks by asset to maintain the backwards calculation\n            const tasksByAsset = {};\n            assetTimeline.forEach(task => {\n                if (task.isCustom) {\n                    // Custom tasks need to be associated with the asset they belong to\n                    // Find which asset this custom task belongs to based on insertAfterTaskId\n                    let targetAssetId = null;\n                    if (task.insertAfterTaskId) {\n                        const afterTask = assetTimeline.find(t => t.id === task.insertAfterTaskId);\n                        if (afterTask) {\n                            targetAssetId = afterTask.id.split('-')[0];\n                        }\n                    }\n                    \n                    if (targetAssetId) {\n                        if (!tasksByAsset[targetAssetId]) tasksByAsset[targetAssetId] = [];\n                        tasksByAsset[targetAssetId].push(task);\n                    } else {\n                        // Fallback: associate with the first asset\n                        const firstAssetId = selectedAssets[0]?.id;\n                        if (firstAssetId) {\n                            if (!tasksByAsset[firstAssetId]) tasksByAsset[firstAssetId] = [];\n                            tasksByAsset[firstAssetId].push(task);\n                        }\n                    }\n                } else {\n                    // Asset tasks are grouped by their asset ID\n                    const assetId = task.id.split('-')[0];\n                    if (!tasksByAsset[assetId]) tasksByAsset[assetId] = [];\n                    tasksByAsset[assetId].push(task);\n                }\n            });\n            \n            console.log('Tasks grouped by asset:', tasksByAsset);\n            \n            // Rebuild each asset's timeline backwards from go-live\n            selectedAssets.forEach(asset => {\n                const assetTasks = tasksByAsset[asset.id] || [];\n                if (assetTasks.length === 0) return;\n                \n                console.log(`Processing asset ${asset.id} with tasks:`, assetTasks);\n                \n                // Separate go-live task from other tasks\n                const goLiveTask = assetTasks.find(task => task.name.includes('Go-Live'));\n                const regularTasks = assetTasks.filter(task => !task.name.includes('Go-Live'));\n                \n                // Build backwards from go-live to calculate dates\n                let currentEndDate = new Date(asset.startDate);\n                const calculatedTasks = [];\n                \n                // Calculate dates for regular tasks in reverse order (backwards from go-live)\n                for (let i = regularTasks.length - 1; i >= 0; i--) {\n                    const task = regularTasks[i];\n                    \n                    if (task.isCustom) {\n                        // Custom task - calculate backwards from current end date\n                        const taskStartDate = subtractWorkingDays(currentEndDate, task.duration);\n                        const taskEndDate = new Date(currentEndDate);\n                        taskEndDate.setDate(taskEndDate.getDate() - 1);\n                        \n                        // Ensure end date is a working day\n                        let finalTaskEndDate = new Date(taskEndDate);\n                        if (isNonWorkingDay(finalTaskEndDate)) {\n                            finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n                        }\n                        \n                        calculatedTasks.unshift({\n                            ...task,\n                            start: taskStartDate.toISOString().split('T')[0],\n                            end: finalTaskEndDate.toISOString().split('T')[0]\n                        });\n                        \n                        currentEndDate = new Date(taskStartDate);\n                    } else {\n                        // Regular asset task\n                        const taskInfo = csvData.find(row => \n                            row['Asset Type'] === asset.type && \n                            row['Task'] === task.name.split(': ')[1]\n                        );\n                        \n                        // Use manual duration override if available\n                        const customDurations = assetTaskDurations[asset.type] || {};\n                        const duration = customDurations[taskInfo?.['Task']] !== undefined\n                            ? customDurations[taskInfo['Task']]\n                            : parseInt(taskInfo?.['Duration (Days)'], 10) || 1;\n                        \n                        const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n                        const taskEndDate = new Date(currentEndDate);\n                        taskEndDate.setDate(taskEndDate.getDate() - 1);\n                        \n                        // Ensure end date is a working day\n                        let finalTaskEndDate = new Date(taskEndDate);\n                        if (isNonWorkingDay(finalTaskEndDate)) {\n                            finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n                        }\n                        \n                        calculatedTasks.unshift({\n                            ...task,\n                            start: taskStartDate.toISOString().split('T')[0],\n                            end: finalTaskEndDate.toISOString().split('T')[0]\n                        });\n                        \n                        currentEndDate = new Date(taskStartDate);\n                    }\n                }\n                \n                // Add go-live task at the end\n                if (goLiveTask) {\n                    calculatedTasks.push({\n                        ...goLiveTask,\n                        start: asset.startDate,\n                        end: asset.startDate\n                    });\n                }\n                \n                // Add all tasks to final timeline in correct order\n                finalTimeline.push(...calculatedTasks);\n            });\n            \n            console.log('Final timeline with custom tasks:', finalTimeline);\n            setTimelineTasks(finalTimeline);\n            \n            // Update calculated start dates and date errors\n            const finalDateErrors = [];\n            const today = new Date();\n            today.setHours(0, 0, 0, 0);\n            \n            selectedAssets.forEach(asset => {\n                const assetTasks = finalTimeline.filter(task => \n                    task.id.startsWith(`${asset.id}-`) && !task.name.includes('Go-Live')\n                );\n                \n                if (assetTasks.length > 0) {\n                    // Find the earliest task for this asset\n                    const earliestTask = assetTasks.reduce((earliest, task) => {\n                        return new Date(task.start) < new Date(earliest.start) ? task : earliest;\n                    });\n                    \n                    // Update calculated start date\n                    newCalculatedStartDates[asset.id] = earliestTask.start;\n                    \n                    // Check if start date is before today\n                    if (new Date(earliestTask.start) < today) {\n                        finalDateErrors.push(asset.id);\n                    }\n                }\n            });\n            \n            setCalculatedStartDates(newCalculatedStartDates);\n            setDateErrors(finalDateErrors);\n        } else {\n            setTimelineTasks(allTasks);\n            setCalculatedStartDates(newCalculatedStartDates);\n            setDateErrors(newDateErrors);\n        }\n    }, [selectedAssets, globalLiveDate, useGlobalDate, assetLiveDates, csvData, assetTaskDurations, customTaskNames, customTasks]);\n\n    // Keyboard shortcuts for undo/redo\n    useEffect(() => {\n        const handleKeyDown = (e) => {\n            if ((e.ctrlKey || e.metaKey) && e.key === 'z' && !e.shiftKey) {\n                e.preventDefault();\n                undo();\n            }\n            if (((e.ctrlKey || e.metaKey) && e.key === 'y') || \n                ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'z')) {\n                e.preventDefault();\n                redo();\n            }\n        };\n        \n        document.addEventListener('keydown', handleKeyDown);\n        return () => document.removeEventListener('keydown', handleKeyDown);\n    }, [historyIndex, history.length]);\n// This new useEffect pre-populates individual dates when switching from global mode\n    useEffect(() => {\n        if (!useGlobalDate && globalLiveDate && selectedAssets.length > 0) {\n            const newLiveDates = { ...assetLiveDates };\n            let updated = false;\n            selectedAssets.forEach(asset => {\n                // Pre-fill only if the asset doesn't have an individual date set\n                if (!newLiveDates[asset.name]) { // Changed to asset.name\n                    newLiveDates[asset.name] = globalLiveDate; // Changed to asset.name\n                    updated = true;\n                }\n            });\n            if (updated) {\n                setAssetLiveDates(newLiveDates);\n            }\n        }\n    }, [useGlobalDate, globalLiveDate, selectedAssets, assetLiveDates]);\n\n    // Sync all asset instance startDates to globalLiveDate if useGlobalDate is true\nuseEffect(() => {\n    if (useGlobalDate && globalLiveDate && !isUndoRedoAction) {\n        setSelectedAssets(prev =>\n            prev.map(asset =>\n                asset.startDate !== globalLiveDate\n                    ? { ...asset, startDate: globalLiveDate }\n                    : asset\n            )\n        );\n    }\n    // Optionally, if unchecked, you could clear the dates or leave as-is\n}, [useGlobalDate, globalLiveDate, isUndoRedoAction]);\n\n    // Custom tasks are handled directly in the main timeline calculation useEffect\n    // No need for a separate preserve useEffect that creates circular dependencies\n\n    // REMOVED: Separate custom task merging useEffect\n    // Custom tasks are now integrated directly into the main timeline calculation\n\n    // REMOVED: Custom task merging useEffect that was causing timeline disruption\n    // Custom tasks are now handled properly in the main timeline calculation\n    // Generate timeline tasks for Gantt chart\n    const generateTimelineTasks = (startDates) => {\n        if (selectedAssets.length === 0 || Object.keys(startDates).length === 0) {\n            setTimelineTasks([]);\n            return;\n        }\n\n        const allTasks = [];\n        let taskIndex = 0;\n\n        selectedAssets.forEach(asset => {\n            const assetName = asset.name; // Assuming asset object has a 'name' property\n            const assetTasks = csvData.filter(row => row['Asset Type'] === assetName);\n            if (assetTasks.length === 0) return;\n\n            // Get the correct live date for this asset\n            const liveDate = new Date(useGlobalDate ? globalLiveDate : assetLiveDates[assetName]);\n            if (isNaN(liveDate.getTime())) return;\n\n            // We'll build the tasks in reverse (from go-live backwards)\n            let currentEndDate = new Date(liveDate);\n            const ganttTasks = [];\n            let taskIndex = 0;\n\n            // Go-live task (single day)\n            ganttTasks.unshift({\n                id: `task-${taskIndex}`,\n                name: `${assetName}: Go-Live`,\n                start: liveDate.toISOString().split('T')[0],\n                end: liveDate.toISOString().split('T')[0],\n                progress: 0,\n            });\n            taskIndex++;\n\n            // Process all other tasks in reverse order\n            for (let i = assetTasks.length - 1; i >= 0; i--) {\n                const taskInfo = assetTasks[i];\n                const duration = parseInt(taskInfo['Duration (Days)'], 10) || 1;\n                // Subtract working days to get the start date\n                const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n                // Task ends the working day before currentEndDate\n                const taskEndDate = new Date(currentEndDate);\n                taskEndDate.setDate(taskEndDate.getDate() - 1);\n                // Ensure end date is a working day\n                let finalTaskEndDate = new Date(taskEndDate);\n                if (isNonWorkingDay(finalTaskEndDate)) {\n                    finalTaskEndDate = getPreviousWorkingDay(finalTaskEndDate);\n                }\n                ganttTasks.unshift({\n                    id: `task-${taskIndex}`,\n                    name: `${taskInfo['Asset Type']}: ${taskInfo['Task']}`,\n                    start: taskStartDate.toISOString().split('T')[0],\n                    end: finalTaskEndDate.toISOString().split('T')[0],\n                    progress: 0,\n                });\n                taskIndex++;\n                // Update currentEndDate for the next task\n                currentEndDate = new Date(taskStartDate);\n            }\n\n            // Add all tasks for this asset to the main list\n            allTasks.push(...ganttTasks);\n\n            // Set the calculated start date for this asset to the start date of the first (earliest) task\n            if (ganttTasks.length > 0 && ganttTasks[0].start) {\n                newCalculatedStartDates[assetName] = ganttTasks[0].start;\n            }\n        });\n        \n        // Merge custom tasks back into the timeline\n        if (customTasks.length > 0) {\n            // Insert custom tasks at their specified positions\n            customTasks.forEach(customTask => {\n                let insertIndex = 0;\n                if (customTask.insertAfterTaskId) {\n                    const afterTaskIndex = allTasks.findIndex(task => task.id === customTask.insertAfterTaskId);\n                    if (afterTaskIndex !== -1) {\n                        insertIndex = afterTaskIndex + 1;\n                    }\n                }\n                \n                // Create a new custom task with updated dates\n                const newCustomTask = {\n                    ...customTask,\n                    id: customTask.id, // Keep the same ID\n                    name: customTask.name,\n                    duration: customTask.duration,\n                    isCustom: true\n                };\n                \n                // Insert the custom task\n                allTasks.splice(insertIndex, 0, newCustomTask);\n            });\n            \n            // Recalculate all task dates to accommodate custom tasks\n            // This is a simplified version - in practice, you'd want to recalculate dates\n            // based on the new timeline structure\n        }\n        \n        setCalculatedStartDates(newCalculatedStartDates);\n        setTimelineTasks(allTasks);\n    };\n\n    // Helper to generate a unique id (could use a counter or Date.now())\n    const generateAssetId = () => Date.now() + Math.random();\n\n    // Add a new asset instance\n    const handleAddAsset = (assetType) => {\n        executeAction(() => {\n            const newAsset = {\n                id: generateAssetId(),\n                type: assetType,\n                name: assetType, // default name, can be edited later\n                startDate: useGlobalDate && globalLiveDate ? globalLiveDate : ''\n            };\n            setSelectedAssets(prev => [...prev, newAsset]);\n        }, `Add ${assetType} asset`);\n    };\n\n    // Remove an asset instance by id\n    const handleRemoveAsset = (assetId) => {\n        const assetToRemove = selectedAssets.find(asset => asset.id === assetId);\n        executeAction(() => {\n            setSelectedAssets(prev => prev.filter(asset => asset.id !== assetId));\n        }, `Remove ${assetToRemove?.name || 'asset'}`);\n    };\n\n    // Handler to rename an asset instance by id\n    const handleRenameAsset = (assetId, newName) => {\n        const assetToRename = selectedAssets.find(asset => asset.id === assetId);\n        executeAction(() => {\n            setSelectedAssets(prev =>\n                prev.map(asset =>\n                    asset.id === assetId ? { ...asset, name: newName } : asset\n                )\n            );\n        }, `Rename asset to \"${newName}\"`);\n    };\n\n    // Handler to rename a task\n    const handleRenameTask = (taskId, newName) => {\n        const currentTask = timelineTasks.find(task => task.id === taskId);\n        executeAction(() => {\n            setCustomTaskNames(prev => ({\n                ...prev,\n                [taskId]: newName\n            }));\n        }, `Rename task to \"${newName}\"`);\n    };\n\n    const handleAssetLiveDateChange = (assetName, date) => {\n        executeAction(() => {\n            setAssetLiveDates(prev => ({\n                ...prev,\n                [assetName]: date\n            }));\n        }, `Change ${assetName} go-live date to ${date}`);\n    };\n\n    const handleAssetStartDateChange = (assetId, newDate) => {\n        const assetToUpdate = selectedAssets.find(asset => asset.id === assetId);\n        executeAction(() => {\n            setSelectedAssets(prev =>\n                prev.map(asset =>\n                    asset.id === assetId ? { ...asset, startDate: newDate } : asset\n                )\n            );\n        }, `Change ${assetToUpdate?.name || 'asset'} go-live date to ${newDate}`);\n    };\n\n    // Handler to save custom task durations for an asset\n    const handleSaveTaskDurations = (assetId, durations) => {\n        const assetToUpdate = selectedAssets.find(asset => asset.id === assetId);\n        executeAction(() => {\n            setAssetTaskDurations(prev => ({ ...prev, [assetId]: durations }));\n            \n            // Preserve custom tasks before timeline recalculation\n            const currentCustomTasks = timelineTasks.filter(task => task.isCustom);\n            setCustomTasks(currentCustomTasks);\n        }, `Update task durations for ${assetToUpdate?.name || 'asset'}`);\n    };\n\n    // Handler for drag-to-resize task duration\n    const handleTaskDurationChange = (taskId, newDuration, newEndDate) => {\n        // Find the task being modified\n        const taskIndex = timelineTasks.findIndex(task => task.id === taskId);\n        if (taskIndex === -1) return;\n\n        const task = timelineTasks[taskIndex];\n        const taskName = task.name.split(': ')[1]; // Get task name after the colon\n        const assetName = task.name.split(': ')[0]; // Get asset name before the colon\n        \n        // Find the asset by name\n        const asset = selectedAssets.find(a => a.name === assetName);\n        if (!asset) return;\n        \n        executeAction(() => {\n            // Update the assetTaskDurations state to trigger the same recalculation logic\n            // that the manual duration editing uses\n            // Use asset.type as the key to match CSV task names consistently\n            setAssetTaskDurations(prev => {\n                const currentDurations = prev[asset.type] || {};\n                return {\n                    ...prev,\n                    [asset.type]: {\n                        ...currentDurations,\n                        [taskName]: newDuration\n                    }\n                };\n            });\n        }, `Change ${taskName} duration to ${newDuration} days`);\n    };\n\n    // Handler for adding custom tasks\n    const handleAddCustomTask = (customTaskData) => {\n        const { name, duration, insertAfterTaskId } = customTaskData;\n        \n        console.log('handleAddCustomTask called with:', customTaskData);\n        \n        executeAction(() => {\n            // Create the new custom task\n            const newTaskId = `custom-task-${Date.now()}`;\n            \n            const newTask = {\n                id: newTaskId,\n                name: `Custom: ${name}`,\n                duration: duration,\n                insertAfterTaskId: insertAfterTaskId,\n                isCustom: true,\n                progress: 0\n            };\n            \n            console.log('Created new custom task:', newTask);\n            \n            // Add to custom tasks - this will trigger the main timeline calculation useEffect\n            setCustomTasks(prev => {\n                const updated = [...prev, newTask];\n                console.log('Updated customTasks:', updated);\n                return updated;\n            });\n            \n            // Don't manually insert into timelineTasks here - let the main useEffect handle it\n            // This ensures proper timeline recalculation and date adjustments\n        }, `Add custom task \"${name}\"`);\n    };\n\n        // Helper function to count working days between two dates (exclusive)\n    const countWorkingDays = (startDate, endDate) => {\n        let count = 0;\n        const current = new Date(startDate);\n        const end = new Date(endDate);\n\n        // Move to next day to make it exclusive\n        current.setDate(current.getDate() + 1);\n\n        while (current <= end) {\n            if (!isNonWorkingDay(current)) {\n                count++;\n            }\n            current.setDate(current.getDate() + 1);\n        }\n        return count;\n    };\n\n    // Single source of truth for working days calculation (same as AssetSelector)\n    const calculateWorkingDaysBetween = (startDate, endDate) => {\n        if (!startDate || !endDate) return 0;\n       \n        const start = new Date(startDate);\n        const end = new Date(endDate);\n       \n        if (start >= end) return 0;\n       \n        let workingDays = 0;\n        let currentDate = new Date(start);\n       \n        while (currentDate < end) {\n            const dayOfWeek = currentDate.getDay();\n            // Count if not weekend (0 = Sunday, 6 = Saturday)\n            if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n                workingDays++;\n            }\n            currentDate.setDate(currentDate.getDate() + 1);\n        }\n       \n        return workingDays;\n    };\n\n    // Helper function to calculate task end date based on start date and duration\n    const calculateTaskEndDate = (startDate, duration) => {\n        let endDate = new Date(startDate);\n        let remainingDays = duration - 1; // -1 because we count the start date\n        \n        while (remainingDays > 0) {\n            endDate.setDate(endDate.getDate() + 1);\n            if (!isNonWorkingDay(endDate)) {\n                remainingDays--;\n            }\n        }\n        \n        return endDate.toISOString().split('T')[0];\n    };\n\n    // Calculate working days needed per asset for detailed timeline alerts\n    const calculateWorkingDaysNeededPerAsset = () => {\n        if (!globalLiveDate || timelineTasks.length === 0) return [];\n\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        \n        const assetAlerts = [];\n        \n        // Calculate for each asset that has date errors\n        selectedAssets.forEach(asset => {\n            const calculatedStart = calculatedStartDates[asset.id];\n            if (calculatedStart && dateErrors.includes(asset.id)) {\n                const startDate = new Date(calculatedStart);\n                const daysInPast = calculateWorkingDaysBetween(startDate, today);\n                \n                if (daysInPast > 0) {\n                    assetAlerts.push({\n                        assetId: asset.id,\n                        assetName: asset.name,\n                        assetType: asset.type,\n                        daysNeeded: daysInPast,\n                        daysSaved: 0, // This would need to be calculated based on original vs current durations\n                        startDate: calculatedStart,\n                        isCritical: daysInPast > 5 // Mark as critical if more than 5 days needed\n                    });\n                }\n            }\n        });\n        \n        // Sort by urgency (most days needed first)\n        return assetAlerts.sort((a, b) => b.daysNeeded - a.daysNeeded);\n    };\n\n    // Single source of truth for working days needed (same as AssetSelector's getWorkingDaysToSave)\n    const calculateWorkingDaysNeeded = () => {\n        if (!globalLiveDate || timelineTasks.length === 0) return null;\n\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        \n        // Use the exact same logic as AssetSelector's getWorkingDaysToSave\n        let totalDaysInPast = 0;\n        \n        // Only count assets that are in dateErrors (same as asset-specific calculation)\n        selectedAssets.forEach(asset => {\n            const calculatedStart = calculatedStartDates[asset.id];\n            if (calculatedStart && dateErrors.includes(asset.id)) {\n                const startDate = new Date(calculatedStart);\n                totalDaysInPast += calculateWorkingDaysBetween(startDate, today);\n            }\n        });\n        \n        // Also check custom tasks that start in the past\n        timelineTasks.forEach(task => {\n            if (task.isCustom) {\n                const taskStart = new Date(task.start);\n                if (taskStart < today) {\n                    totalDaysInPast += calculateWorkingDaysBetween(taskStart, today);\n                }\n            }\n        });\n        \n        return {\n            available: 0, // Not used in this calculation\n            allocated: 0, // Not used in this calculation\n            needed: totalDaysInPast\n        };\n    };\n\n    return (\n        <div className=\"bg-gray-100 min-h-screen font-sans\">\n            <header className=\"bg-white shadow-md\">\n                <div className=\"container mx-auto px-6 py-4\">\n                    <div className=\"flex items-center justify-between\">\n                        <h1 className=\"text-3xl font-bold text-gray-800\">Accordion Timeline Builder</h1>\n                        <div className=\"flex items-center space-x-2\">\n                            <button\n                                onClick={undo}\n                                disabled={historyIndex <= 0}\n                                className=\"px-3 py-1 bg-gray-500 text-white rounded text-sm hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\"\n                                title=\"Undo (Ctrl+Z)\"\n                            >\n                                ↩️ Undo\n                            </button>\n                            <button\n                                onClick={redo}\n                                disabled={historyIndex >= history.length - 1}\n                                className=\"px-3 py-1 bg-gray-500 text-white rounded text-sm hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\"\n                                title=\"Redo (Ctrl+Y)\"\n                            >\n                                ↪️ Redo\n                            </button>\n                        </div>\n                    </div>\n                    {/* Info Box: How to Use This Timeline Builder (moved here, dismissible) */}\n                    {showInfoBox && (\n                        <div className=\"relative mb-6 mt-4 p-4 bg-blue-50 border border-blue-200 rounded-md text-sm text-blue-900\">\n                            <button\n                                className=\"absolute top-2 right-2 text-blue-700 hover:text-blue-900 text-lg font-bold focus:outline-none\"\n                                onClick={() => {\n                                    executeAction(() => setShowInfoBox(false), \"Hide instructions\");\n                                }}\n                                aria-label=\"Close instructions\"\n                            >\n                                ×\n                            </button>\n                            <strong>How to Build Your Campaign Timeline:</strong>\n                            <ol className=\"list-decimal pl-5 mt-2 space-y-1\">\n                                <li>\n                                    <strong>Choose Your Campaign Start Date:</strong><br />\n                                    If all assets launch on the same day, set a global start date and check “Use same live date for all assets.”<br />\n                                    If assets launch on different days, uncheck the box and set dates individually for each asset.\n                                </li>\n                                <li>\n                                    <strong>Add Assets:</strong><br />\n                                    Click “Add” next to each asset type you need.<br />\n                                    Need the same asset type more than once? Click “Add” again and give each a unique name.\n                                </li>\n                                <li>\n                                    <strong>Customize Assets:</strong><br />\n                                    Rename each asset for clarity (e.g., “Metro Advertorial – August”).<br />\n                                    Set or confirm the start date for each asset.\n                                </li>\n                                <li>\n                                    <strong>Review Your Timeline:</strong><br />\n                                    Remove any asset you don’t need.<br />\n                                    Check the timeline to ensure all assets are scheduled as planned.\n                                </li>\n                                <li>\n                                    <strong>Adjust Your Timeline if Needed:</strong><br />\n                                    If an asset’s timeline can’t be completed by the selected start date, you’ll see a warning.<br />\n                                    – You can either change the go-live date, or<br />\n                                    – Manually shorten the durations of individual tasks (“accordion” your timeline) until the schedule fits.\n                                </li>\n                                <li>\n                                    <strong>Undo/Redo:</strong><br />\n                                    Use Ctrl+Z to undo and Ctrl+Y to redo any changes you make.<br />\n                                    You can also use the Undo/Redo buttons in the top-right corner.\n                                </li>\n                            </ol>\n                        </div>\n                    )}\n                </div>\n            </header>\n            <main className=\"container mx-auto p-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                    {/* LEFT COLUMN: CONTROLS */}\n                    <div\n  className=\"lg:col-span-1 bg-white p-6 rounded-xl shadow-lg overflow-x-auto\"\n  style={{ minWidth: 380 }} // You can adjust 380 to your needs\n>\n                        <h2 className=\"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\">Timeline Setup</h2>\n                        <CampaignSetup \n                            globalLiveDate={globalLiveDate}\n                            onGlobalLiveDateChange={(date) => {\n                                executeAction(() => setGlobalLiveDate(date), `Change global go-live date to ${date}`);\n                            }}\n                            useGlobalDate={useGlobalDate}\n                            onUseGlobalDateChange={(useGlobal) => {\n                                executeAction(() => setUseGlobalDate(useGlobal), `Switch to ${useGlobal ? 'global' : 'individual'} date mode`);\n                            }}\n                            projectStartDate={projectStartDate}\n                            dateErrors={dateErrors}\n                            workingDaysNeeded={calculateWorkingDaysNeeded()}\n                        />\n<AssetSelector\n    assets={uniqueAssets || []}\n    selectedAssets={selectedAssets || []}\n    onAddAsset={handleAddAsset}\n    onRemoveAsset={handleRemoveAsset}\n    useGlobalDate={useGlobalDate}\n    globalLiveDate={globalLiveDate || ''}\n    assetLiveDates={assetLiveDates || {}}\n    onAssetLiveDateChange={handleAssetLiveDateChange}\n    calculatedStartDates={calculatedStartDates || {}}\n    dateErrors={dateErrors || []}\n    onRenameAsset={handleRenameAsset}\n    onAssetStartDateChange={handleAssetStartDateChange}\n    csvData={csvData}\n    onSaveTaskDurations={handleSaveTaskDurations}\n    isNonWorkingDay={isNonWorkingDay}\n    calculateWorkingDaysBetween={calculateWorkingDaysBetween}\n/>\n                    </div>\n                    \n                    {/* RIGHT COLUMN: TIMELINE */}\n                    <div\n  className=\"lg:col-span-2 bg-white p-6 rounded-xl shadow-lg\"\n  style={{ minWidth: 0, maxWidth: \"100%\" }}\n>\n                        <h2 className=\"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\">Generated Timeline</h2>\n                        \n                     {/* Error Messages - Temporarily Disabled */}\n{/* {dateErrors.length > 0 && (\n    <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-md\">\n        <h3 className=\"text-red-800 font-medium mb-2\">⚠️ Timeline Conflicts</h3>\n        <p className=\"text-red-700 text-sm mb-2\">\n            The following assets cannot be completed by their live dates:\n        </p>\n        <ul className=\"text-red-700 text-sm\">\n            {dateErrors.map(asset => (\n                <li key={asset} className=\"ml-4\">\n                    • {asset} (would need to start on {calculatedStartDates[asset]})\n                </li>\n            ))}\n        </ul>\n        <p className=\"text-red-700 text-sm mt-2 font-medium\">\n            Manual adjustment of task durations required.\n        </p>\n    </div>\n)} */}\n\n                        {timelineTasks && timelineTasks.length > 0 ? (\n                                                    <GanttChart \n                            tasks={timelineTasks}\n                            bankHolidays={bankHolidays}\n                            onTaskDurationChange={handleTaskDurationChange}\n                            onTaskNameChange={handleRenameTask}\n                            workingDaysNeeded={calculateWorkingDaysNeeded()}\n                            assetAlerts={calculateWorkingDaysNeededPerAsset()}\n                            onAddCustomTask={handleAddCustomTask}\n                        />\n                        ) : (\n                            <div className=\"text-center text-gray-500 py-10\">\n                                <p className=\"text-lg\">Your timeline will appear here.</p>\n                                <p className=\"text-sm\">Set a live date and select some assets to begin.</p>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </main>\n        </div>\n    );\n};\n\nexport default TimelineBuilder;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,UAAU,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpD;EACA,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA,MAAM,CAACgB,cAAc,EAAEC,iBAAiB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACoB,cAAc,EAAEC,iBAAiB,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE1D;EACA,MAAM,CAACsB,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtE,MAAM,CAACwB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9D,MAAM,CAAC0B,UAAU,EAAEC,aAAa,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElD;EACA,MAAM,CAAC4B,aAAa,EAAEC,gBAAgB,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAC8B,WAAW,EAAEC,cAAc,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAM,CAACgC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAElE;EACA,MAAM,CAACkC,WAAW,EAAEC,cAAc,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEpD;EACA,MAAM,CAACoC,eAAe,EAAEC,kBAAkB,CAAC,GAAGrC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE5D;EACA,MAAM,CAACsC,YAAY,EAAEC,eAAe,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAM,CAACwC,OAAO,EAAEC,UAAU,CAAC,GAAGzC,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC0C,YAAY,EAAEC,eAAe,CAAC,GAAG3C,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAAC4C,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG7C,QAAQ,CAAC,KAAK,CAAC;;EAE/D;EACA,MAAM8C,WAAW,GAAGA,CAACC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,KAAK;IACjD;IACA,IAAIb,eAAe,CAACW,MAAM,CAAC,EAAE;MACzB,OAAOX,eAAe,CAACW,MAAM,CAAC;IAClC;IACA;IACA,OAAO,GAAGC,SAAS,KAAKC,QAAQ,CAAC,MAAM,CAAC,EAAE;EAC9C,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAIC,iBAAiB,KAAM;IAChD;IACArC,cAAc,EAAEsC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACxC,cAAc,CAAC,CAAC;IAC1DM,cAAc,EAAEgC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAClC,cAAc,CAAC,CAAC;IAC1DF,aAAa;IACbF,cAAc;IAEd;IACAoB,eAAe,EAAEgB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAClB,eAAe,CAAC,CAAC;IAC5DJ,kBAAkB,EAAEoB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACtB,kBAAkB,CAAC,CAAC;IAClEE,WAAW,EAAEkB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACpB,WAAW,CAAC,CAAC;IAEpD;IACAJ,WAAW;IAEX;IACAF,aAAa,EAAEwB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC1B,aAAa,CAAC,CAAC;IACxDN,oBAAoB,EAAE8B,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAChC,oBAAoB,CAAC,CAAC;IACtEI,UAAU,EAAE0B,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC5B,UAAU,CAAC,CAAC;IAClDF,gBAAgB;IAEhB;IACA+B,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;IACrBN,iBAAiB;IACjBO,UAAU,EAAE;EAChB,CAAC,CAAC;;EAEF;EACA,MAAMC,mBAAmB,GAAIC,QAAQ,IAAK;IACtCC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEF,QAAQ,CAAC;;IAEzD;IACA,IAAI,CAACA,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;MAC3CC,OAAO,CAACE,KAAK,CAAC,kDAAkD,CAAC;MACjE;IACJ;IAEAF,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;;IAE/C;IACA,IAAIF,QAAQ,CAAC9C,cAAc,EAAE;MACzB+C,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,QAAQ,CAAC9C,cAAc,CAAC;MACjEC,iBAAiB,CAAC6C,QAAQ,CAAC9C,cAAc,CAAC;IAC9C;IACA,IAAI8C,QAAQ,CAACxC,cAAc,EAAE;MACzByC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,QAAQ,CAACxC,cAAc,CAAC;MACjEC,iBAAiB,CAACuC,QAAQ,CAACxC,cAAc,CAAC;IAC9C;IACA,IAAIwC,QAAQ,CAAC1C,aAAa,KAAK8C,SAAS,EAAE;MACtCH,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,QAAQ,CAAC1C,aAAa,CAAC;MAC/DC,gBAAgB,CAACyC,QAAQ,CAAC1C,aAAa,CAAC;IAC5C;IACA,IAAI0C,QAAQ,CAAC5C,cAAc,EAAE;MACzB6C,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,QAAQ,CAAC5C,cAAc,CAAC;MACjEC,iBAAiB,CAAC2C,QAAQ,CAAC5C,cAAc,CAAC;IAC9C;IACA,IAAI4C,QAAQ,CAACxB,eAAe,EAAE;MAC1ByB,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEF,QAAQ,CAACxB,eAAe,CAAC;MACnEC,kBAAkB,CAACuB,QAAQ,CAACxB,eAAe,CAAC;IAChD;IACA,IAAIwB,QAAQ,CAAC5B,kBAAkB,EAAE;MAC7B6B,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,QAAQ,CAAC5B,kBAAkB,CAAC;MACzEC,qBAAqB,CAAC2B,QAAQ,CAAC5B,kBAAkB,CAAC;IACtD;IACA,IAAI4B,QAAQ,CAAC1B,WAAW,EAAE;MACtB2B,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,QAAQ,CAAC1B,WAAW,CAAC;MAC3DC,cAAc,CAACyB,QAAQ,CAAC1B,WAAW,CAAC;IACxC;IACA,IAAI0B,QAAQ,CAAC9B,WAAW,KAAKkC,SAAS,EAAE;MACpCH,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,QAAQ,CAAC9B,WAAW,CAAC;MAC3DC,cAAc,CAAC6B,QAAQ,CAAC9B,WAAW,CAAC;IACxC;IAEA+B,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;;IAEzC;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;;EAED;EACA,MAAMG,IAAI,GAAGA,CAAA,KAAM;IACfJ,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1BD,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEtB,OAAO,CAAC0B,MAAM,EAAE,eAAe,EAAExB,YAAY,CAAC;IAErF,IAAIA,YAAY,GAAG,CAAC,IAAIF,OAAO,CAACE,YAAY,GAAG,CAAC,CAAC,EAAE;MAC/CmB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEpB,YAAY,GAAG,CAAC,CAAC;MAC1DG,mBAAmB,CAAC,IAAI,CAAC;MACzB,MAAMsB,gBAAgB,GAAG3B,OAAO,CAACE,YAAY,GAAG,CAAC,CAAC;MAClDmB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEK,gBAAgB,CAAC;;MAEnD;MACA,IAAIA,gBAAgB,IAChBA,gBAAgB,CAACrD,cAAc,IAC/BqD,gBAAgB,CAACrD,cAAc,CAACoD,MAAM,GAAG,CAAC,EAAE;QAC5CL,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAC5CH,mBAAmB,CAACQ,gBAAgB,CAAC;QACrCxB,eAAe,CAACyB,IAAI,IAAI;UACpB,MAAMC,QAAQ,GAAGD,IAAI,GAAG,CAAC;UACzBP,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEO,QAAQ,CAAC;UACtD,OAAOA,QAAQ;QACnB,CAAC,CAAC;MACN,CAAC,MAAM;QACHR,OAAO,CAACE,KAAK,CAAC,oEAAoE,CAAC;QACnF;QACA,IAAIO,UAAU,GAAG5B,YAAY,GAAG,CAAC;QACjC,OAAO4B,UAAU,IAAI,CAAC,EAAE;UACpB,MAAMV,QAAQ,GAAGpB,OAAO,CAAC8B,UAAU,CAAC;UACpC,IAAIV,QAAQ,IACRA,QAAQ,CAAC9C,cAAc,IACvB8C,QAAQ,CAAC9C,cAAc,CAACoD,MAAM,GAAG,CAAC,EAAE;YACpCL,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEQ,UAAU,CAAC;YACzDX,mBAAmB,CAACC,QAAQ,CAAC;YAC7BjB,eAAe,CAAC2B,UAAU,CAAC;YAC3B;UACJ;UACAA,UAAU,EAAE;QAChB;QAEA,IAAIA,UAAU,GAAG,CAAC,EAAE;UAChBT,OAAO,CAACE,KAAK,CAAC,oCAAoC,CAAC;UACnD;UACApB,eAAe,CAACD,YAAY,CAAC;QACjC;MACJ;MACAG,mBAAmB,CAAC,KAAK,CAAC;IAC9B,CAAC,MAAM;MACHgB,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;IACzE;EACJ,CAAC;;EAED;EACA,MAAMS,IAAI,GAAGA,CAAA,KAAM;IACf,IAAI7B,YAAY,GAAGF,OAAO,CAAC0B,MAAM,GAAG,CAAC,IAAI1B,OAAO,CAACE,YAAY,GAAG,CAAC,CAAC,EAAE;MAChEG,mBAAmB,CAAC,IAAI,CAAC;MACzB,MAAM2B,YAAY,GAAGhC,OAAO,CAACE,YAAY,GAAG,CAAC,CAAC;MAC9C,IAAI8B,YAAY,IAAIA,YAAY,CAAC1D,cAAc,EAAE;QAC7C6C,mBAAmB,CAACa,YAAY,CAAC;QACjC7B,eAAe,CAACyB,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;MACrC,CAAC,MAAM;QACHP,OAAO,CAACE,KAAK,CAAC,+CAA+C,CAAC;QAC9D;QACAtB,UAAU,CAAC2B,IAAI,IAAIA,IAAI,CAACK,MAAM,CAACb,QAAQ,IAAIA,QAAQ,IAAIA,QAAQ,CAAC9C,cAAc,CAAC,CAAC;QAChF6B,eAAe,CAACyB,IAAI,IAAIM,IAAI,CAACC,GAAG,CAACP,IAAI,EAAE5B,OAAO,CAAC0B,MAAM,GAAG,CAAC,CAAC,CAAC;MAC/D;MACArB,mBAAmB,CAAC,KAAK,CAAC;IAC9B;EACJ,CAAC;;EAED;EACA,MAAM+B,aAAa,GAAGA,CAACC,cAAc,EAAE1B,iBAAiB,KAAK;IACzDU,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEX,iBAAiB,CAAC;IAC5DU,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEtB,OAAO,CAAC0B,MAAM,EAAE,eAAe,EAAExB,YAAY,CAAC;;IAErF;IACA,MAAMoC,eAAe,GAAG5B,mBAAmB,CAACC,iBAAiB,CAAC;IAC9DU,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEgB,eAAe,CAAC;;IAEjD;IACAD,cAAc,CAAC,CAAC;;IAEhB;IACA,IAAI,CAACjC,gBAAgB,EAAE;MACnBiB,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvDrB,UAAU,CAAC2B,IAAI,IAAI;QACf,MAAMW,UAAU,GAAG,CAAC,GAAGX,IAAI,CAACY,KAAK,CAAC,CAAC,EAAEtC,YAAY,GAAG,CAAC,CAAC,EAAEoC,eAAe,CAAC;QACxEjB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEiB,UAAU,CAACb,MAAM,CAAC;QACrD;QACA,OAAOa,UAAU,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC;MAChC,CAAC,CAAC;MACFrC,eAAe,CAACyB,IAAI,IAAI;QACpB,MAAMC,QAAQ,GAAGK,IAAI,CAACC,GAAG,CAACP,IAAI,GAAG,CAAC,EAAE,EAAE,CAAC;QACvCP,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEO,QAAQ,CAAC;QAC3C,OAAOA,QAAQ;MACnB,CAAC,CAAC;IACN,CAAC,MAAM;MACHR,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;IAC7D;EACJ,CAAC;;EAED;EACA,MAAMmB,eAAe,GAAIC,IAAI,IAAK;IAC9B,MAAMC,GAAG,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC;IACzB,MAAMC,UAAU,GAAGH,IAAI,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnD,OAAOJ,GAAG,KAAK,CAAC,IAAIA,GAAG,KAAK,CAAC,IAAI7C,YAAY,CAACkD,QAAQ,CAACH,UAAU,CAAC;EACtE,CAAC;;EAED;EACA,MAAMI,qBAAqB,GAAIP,IAAI,IAAK;IACpC,IAAIQ,WAAW,GAAG,IAAIlC,IAAI,CAAC0B,IAAI,CAAC;IAChC,GAAG;MACCQ,WAAW,CAACC,OAAO,CAACD,WAAW,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IAClD,CAAC,QAAQX,eAAe,CAACS,WAAW,CAAC;IACrC,OAAOA,WAAW;EACtB,CAAC;;EAED;EACA,MAAMG,iBAAiB,GAAIX,IAAI,IAAK;IAChC,IAAIQ,WAAW,GAAG,IAAIlC,IAAI,CAAC0B,IAAI,CAAC;IAChC,GAAG;MACCQ,WAAW,CAACC,OAAO,CAACD,WAAW,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IAClD,CAAC,QAAQX,eAAe,CAACS,WAAW,CAAC;IACrC,OAAOA,WAAW;EACtB,CAAC;;EAED;EACA,MAAMI,mBAAmB,GAAGA,CAACC,OAAO,EAAEC,qBAAqB,KAAK;IAC5D,IAAIC,WAAW,GAAG,IAAIzC,IAAI,CAACuC,OAAO,CAAC;IACnC,IAAIG,aAAa,GAAGF,qBAAqB;IACzC;IACA,OAAOE,aAAa,GAAG,CAAC,EAAE;MACtBD,WAAW,CAACN,OAAO,CAACM,WAAW,CAACL,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;MAC9C;MACA,IAAI,CAACX,eAAe,CAACgB,WAAW,CAAC,EAAE;QAC/BC,aAAa,EAAE;MACnB;IACJ;IACA,OAAOD,WAAW;EACtB,CAAC;;EAED;EACA,MAAME,cAAc,GAAGA,CAACC,SAAS,EAAEC,gBAAgB,KAAK;IACpD,IAAIA,gBAAgB,IAAI,CAAC,EAAE;MACvB,OAAO,IAAI7C,IAAI,CAAC4C,SAAS,CAAC;IAC9B;IACA,IAAIH,WAAW,GAAG,IAAIzC,IAAI,CAAC4C,SAAS,CAAC;IACrC,IAAIF,aAAa,GAAGG,gBAAgB,GAAG,CAAC;IACxC,OAAOH,aAAa,GAAG,CAAC,EAAE;MACtBD,WAAW,CAACN,OAAO,CAACM,WAAW,CAACL,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;MAC9C,IAAI,CAACX,eAAe,CAACgB,WAAW,CAAC,EAAE;QAC/BC,aAAa,EAAE;MACnB;IACJ;IACA;IACA,OAAOjB,eAAe,CAACgB,WAAW,CAAC,EAAE;MACjCA,WAAW,CAACN,OAAO,CAACM,WAAW,CAACL,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IAClD;IACA,OAAOK,WAAW;EACtB,CAAC;;EAED;EACAhG,SAAS,CAAC,MAAM;IACZC,IAAI,CAACmD,KAAK,CAAC,GAAGiD,MAAM,CAACC,QAAQ,CAACC,MAAM,4BAA4B,EAAE;MAC9DC,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAE,IAAI;MACZC,cAAc,EAAE,IAAI;MACpBC,QAAQ,EAAGC,OAAO,IAAK;QACnB,MAAMC,UAAU,GAAGD,OAAO,CAACE,IAAI;QAC/BpG,UAAU,CAACmG,UAAU,CAAC;;QAEtB;QACA,MAAME,UAAU,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACH,UAAU,CAACI,GAAG,CAACC,GAAG,IAAIA,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC1C,MAAM,CAAC2C,IAAI,IAAIA,IAAI,CAAC;QAC9FvG,eAAe,CAACmG,UAAU,CAAC;MAC/B,CAAC;MACDjD,KAAK,EAAGA,KAAK,IAAK;QACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACnD;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA9D,SAAS,CAAC,MAAM;IACZoH,KAAK,CAAC,uCAAuC,CAAC,CACzCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACP,IAAI,IAAI;MACV;MACA,MAAMU,MAAM,GAAGV,IAAI,CAAC,mBAAmB,CAAC,CAACU,MAAM;MAC/C;MACA,MAAMhE,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;MACtB,MAAMkE,eAAe,GAAG,IAAIlE,IAAI,CAACC,GAAG,CAACkE,WAAW,CAAC,CAAC,GAAG,EAAE,EAAElE,GAAG,CAACmE,QAAQ,CAAC,CAAC,EAAEnE,GAAG,CAACmC,OAAO,CAAC,CAAC,CAAC;MACvF,MAAMiC,YAAY,GAAGJ,MAAM,CACtBP,GAAG,CAACY,KAAK,IAAIA,KAAK,CAAC5C,IAAI,CAAC,CACxBT,MAAM,CAACsD,OAAO,IAAI;QACf,MAAM7C,IAAI,GAAG,IAAI1B,IAAI,CAACuE,OAAO,CAAC;QAC9B,OAAO7C,IAAI,IAAIzB,GAAG,IAAIyB,IAAI,IAAIwC,eAAe;MACjD,CAAC,CAAC;MACNnF,eAAe,CAACsF,YAAY,CAAC;IACjC,CAAC,CAAC,CACDG,KAAK,CAACC,GAAG,IAAI;MACV;MACA1F,eAAe,CAAC,EAAE,CAAC;IACvB,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAtC,SAAS,CAAC,MAAM;IACZ,IAAIa,cAAc,CAACoD,MAAM,KAAK,CAAC,IAAIxD,OAAO,CAACwD,MAAM,KAAK,CAAC,EAAE;MACrDrC,gBAAgB,CAAC,EAAE,CAAC;MACpBN,uBAAuB,CAAC,CAAC,CAAC,CAAC;MAC3BE,mBAAmB,CAAC,EAAE,CAAC;MACvBE,aAAa,CAAC,EAAE,CAAC;MACjB;IACJ;IAEA,MAAMuG,KAAK,GAAG,IAAI1E,IAAI,CAAC,CAAC;IACxB0E,KAAK,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;IAE5B,MAAMC,uBAAuB,GAAG,CAAC,CAAC;IAClC,MAAMC,aAAa,GAAG,EAAE;IACxB,MAAMC,aAAa,GAAG,EAAE;IACxB,MAAMC,QAAQ,GAAG,EAAE;;IAEnB;IACAzH,cAAc,CAAC0H,OAAO,CAACC,KAAK,IAAI;MAC5B;MACA,IAAI,CAACA,KAAK,CAACrC,SAAS,EAAE,OAAO,CAAC;;MAE9B;MACA,MAAMsC,UAAU,GAAGhI,OAAO,CAAC+D,MAAM,CAAC0C,GAAG,IAAIA,GAAG,CAAC,YAAY,CAAC,KAAKsB,KAAK,CAACrB,IAAI,CAAC;MAC1E,IAAIsB,UAAU,CAACxE,MAAM,KAAK,CAAC,EAAE;;MAE7B;MACA,MAAMyE,QAAQ,GAAG,IAAInF,IAAI,CAACiF,KAAK,CAACrC,SAAS,CAAC;MAC1C,IAAIwC,KAAK,CAACD,QAAQ,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;;MAE/B;MACA,IAAIC,cAAc,GAAG,IAAItF,IAAI,CAACmF,QAAQ,CAAC;MACvC,MAAMI,UAAU,GAAG,EAAE;MACrB,IAAIC,SAAS,GAAG,CAAC;;MAEjB;MACA,MAAMC,YAAY,GAAG,GAAGR,KAAK,CAACS,EAAE,UAAU;MAC1CH,UAAU,CAACI,OAAO,CAAC;QACfD,EAAE,EAAED,YAAY;QAChBG,IAAI,EAAEtG,WAAW,CAACmG,YAAY,EAAER,KAAK,CAACW,IAAI,EAAE;UAAE,MAAM,EAAE;QAAU,CAAC,CAAC;QAClEC,KAAK,EAAEV,QAAQ,CAACrD,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3C+D,GAAG,EAAEX,QAAQ,CAACrD,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzCgE,QAAQ,EAAE;MACd,CAAC,CAAC;MACFP,SAAS,EAAE;;MAEX;MACA,KAAK,IAAIQ,CAAC,GAAGd,UAAU,CAACxE,MAAM,GAAG,CAAC,EAAEsF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC7C,MAAMvG,QAAQ,GAAGyF,UAAU,CAACc,CAAC,CAAC;QAC9B;QACA;QACA,MAAMC,eAAe,GAAGzH,kBAAkB,CAACyG,KAAK,CAACrB,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5D,MAAMsC,QAAQ,GAAGD,eAAe,CAACxG,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAKe,SAAS,GAC1DyF,eAAe,CAACxG,QAAQ,CAAC,MAAM,CAAC,CAAC,GACjC0G,QAAQ,CAAC1G,QAAQ,CAAC,iBAAiB,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;QACpD;QACA,MAAM2G,aAAa,GAAG9D,mBAAmB,CAACgD,cAAc,EAAEY,QAAQ,CAAC;QACnE;QACA,MAAMG,WAAW,GAAG,IAAIrG,IAAI,CAACsF,cAAc,CAAC;QAC5Ce,WAAW,CAAClE,OAAO,CAACkE,WAAW,CAACjE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;QAC9C;QACA,IAAIkE,gBAAgB,GAAG,IAAItG,IAAI,CAACqG,WAAW,CAAC;QAC5C,IAAI5E,eAAe,CAAC6E,gBAAgB,CAAC,EAAE;UACnCA,gBAAgB,GAAGrE,qBAAqB,CAACqE,gBAAgB,CAAC;QAC9D;QACA,MAAM/G,MAAM,GAAG,GAAG0F,KAAK,CAACS,EAAE,SAASF,SAAS,EAAE;QAC9CD,UAAU,CAACI,OAAO,CAAC;UACfD,EAAE,EAAEnG,MAAM;UACVqG,IAAI,EAAEtG,WAAW,CAACC,MAAM,EAAE0F,KAAK,CAACW,IAAI,EAAEnG,QAAQ,CAAC;UAC/CoG,KAAK,EAAEO,aAAa,CAACtE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UAChD+D,GAAG,EAAEQ,gBAAgB,CAACxE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACjDgE,QAAQ,EAAE;QACd,CAAC,CAAC;QACFP,SAAS,EAAE;QACX;QACAF,cAAc,GAAG,IAAItF,IAAI,CAACoG,aAAa,CAAC;MAC5C;;MAEA;MACArB,QAAQ,CAACwB,IAAI,CAAC,GAAGhB,UAAU,CAAC;;MAE5B;MACA,IAAIA,UAAU,CAAC7E,MAAM,GAAG,CAAC,IAAI6E,UAAU,CAAC,CAAC,CAAC,CAACM,KAAK,EAAE;QAC9CjB,uBAAuB,CAACK,KAAK,CAACS,EAAE,CAAC,GAAGH,UAAU,CAAC,CAAC,CAAC,CAACM,KAAK;QACvDf,aAAa,CAACyB,IAAI,CAAC,IAAIvG,IAAI,CAACuF,UAAU,CAAC,CAAC,CAAC,CAACM,KAAK,CAAC,CAAC;MACrD;;MAEA;MACA,IAAIN,UAAU,CAAC7E,MAAM,GAAG,CAAC,IAAI,IAAIV,IAAI,CAACuF,UAAU,CAAC,CAAC,CAAC,CAACM,KAAK,CAAC,GAAGnB,KAAK,EAAE;QAChEG,aAAa,CAAC0B,IAAI,CAACtB,KAAK,CAACS,EAAE,CAAC;MAChC;IACJ,CAAC,CAAC;;IAEF;IACA,IAAIZ,aAAa,CAACpE,MAAM,GAAG,CAAC,EAAE;MAC1B,MAAM8F,YAAY,GAAG,IAAIxG,IAAI,CAACkB,IAAI,CAACC,GAAG,CAAC,GAAG2D,aAAa,CAAC,CAAC;MACzD7G,mBAAmB,CAACuI,YAAY,CAAC1E,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACjE;;IAEA;IACA,IAAIrD,WAAW,CAACgC,MAAM,GAAG,CAAC,EAAE;MACxBL,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE5B,WAAW,CAAC;;MAEpD;MACA,MAAM+H,aAAa,GAAG,CAAC,GAAG1B,QAAQ,CAAC;MACnC1E,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEmG,aAAa,CAAC;;MAErD;MACA/H,WAAW,CAACsG,OAAO,CAAC0B,UAAU,IAAI;QAC9B,IAAIC,WAAW,GAAG,CAAC;QACnB,IAAID,UAAU,CAACE,iBAAiB,EAAE;UAC9B,MAAMC,cAAc,GAAGJ,aAAa,CAACK,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACrB,EAAE,KAAKgB,UAAU,CAACE,iBAAiB,CAAC;UAChGvG,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEoG,UAAU,CAACE,iBAAiB,EAAE,iBAAiB,EAAEC,cAAc,CAAC;UAC9G,IAAIA,cAAc,KAAK,CAAC,CAAC,EAAE;YACvBF,WAAW,GAAGE,cAAc,GAAG,CAAC;UACpC;QACJ;QAEAxG,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEqG,WAAW,CAAC;;QAE3D;QACAF,aAAa,CAACO,MAAM,CAACL,WAAW,EAAE,CAAC,EAAE;UACjC,GAAGD,UAAU;UACbb,KAAK,EAAE,EAAE;UAAE;UACXC,GAAG,EAAE,EAAE,CAAI;QACf,CAAC,CAAC;MACN,CAAC,CAAC;MAEFzF,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEmG,aAAa,CAAC;;MAEpE;MACA,MAAMQ,aAAa,GAAG,EAAE;;MAExB;MACA,MAAMC,YAAY,GAAG,CAAC,CAAC;MACvBT,aAAa,CAACzB,OAAO,CAAC+B,IAAI,IAAI;QAC1B,IAAIA,IAAI,CAACI,QAAQ,EAAE;UACf;UACA;UACA,IAAIC,aAAa,GAAG,IAAI;UACxB,IAAIL,IAAI,CAACH,iBAAiB,EAAE;YACxB,MAAMS,SAAS,GAAGZ,aAAa,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC7B,EAAE,KAAKqB,IAAI,CAACH,iBAAiB,CAAC;YAC1E,IAAIS,SAAS,EAAE;cACXD,aAAa,GAAGC,SAAS,CAAC3B,EAAE,CAAC3D,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC9C;UACJ;UAEA,IAAIqF,aAAa,EAAE;YACf,IAAI,CAACF,YAAY,CAACE,aAAa,CAAC,EAAEF,YAAY,CAACE,aAAa,CAAC,GAAG,EAAE;YAClEF,YAAY,CAACE,aAAa,CAAC,CAACb,IAAI,CAACQ,IAAI,CAAC;UAC1C,CAAC,MAAM;YAAA,IAAAS,gBAAA;YACH;YACA,MAAMC,YAAY,IAAAD,gBAAA,GAAGlK,cAAc,CAAC,CAAC,CAAC,cAAAkK,gBAAA,uBAAjBA,gBAAA,CAAmB9B,EAAE;YAC1C,IAAI+B,YAAY,EAAE;cACd,IAAI,CAACP,YAAY,CAACO,YAAY,CAAC,EAAEP,YAAY,CAACO,YAAY,CAAC,GAAG,EAAE;cAChEP,YAAY,CAACO,YAAY,CAAC,CAAClB,IAAI,CAACQ,IAAI,CAAC;YACzC;UACJ;QACJ,CAAC,MAAM;UACH;UACA,MAAMW,OAAO,GAAGX,IAAI,CAACrB,EAAE,CAAC3D,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACrC,IAAI,CAACmF,YAAY,CAACQ,OAAO,CAAC,EAAER,YAAY,CAACQ,OAAO,CAAC,GAAG,EAAE;UACtDR,YAAY,CAACQ,OAAO,CAAC,CAACnB,IAAI,CAACQ,IAAI,CAAC;QACpC;MACJ,CAAC,CAAC;MAEF1G,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE4G,YAAY,CAAC;;MAEpD;MACA5J,cAAc,CAAC0H,OAAO,CAACC,KAAK,IAAI;QAC5B,MAAMC,UAAU,GAAGgC,YAAY,CAACjC,KAAK,CAACS,EAAE,CAAC,IAAI,EAAE;QAC/C,IAAIR,UAAU,CAACxE,MAAM,KAAK,CAAC,EAAE;QAE7BL,OAAO,CAACC,GAAG,CAAC,oBAAoB2E,KAAK,CAACS,EAAE,cAAc,EAAER,UAAU,CAAC;;QAEnE;QACA,MAAMyC,UAAU,GAAGzC,UAAU,CAACoC,IAAI,CAACP,IAAI,IAAIA,IAAI,CAACnB,IAAI,CAAC5D,QAAQ,CAAC,SAAS,CAAC,CAAC;QACzE,MAAM4F,YAAY,GAAG1C,UAAU,CAACjE,MAAM,CAAC8F,IAAI,IAAI,CAACA,IAAI,CAACnB,IAAI,CAAC5D,QAAQ,CAAC,SAAS,CAAC,CAAC;;QAE9E;QACA,IAAIsD,cAAc,GAAG,IAAItF,IAAI,CAACiF,KAAK,CAACrC,SAAS,CAAC;QAC9C,MAAMiF,eAAe,GAAG,EAAE;;QAE1B;QACA,KAAK,IAAI7B,CAAC,GAAG4B,YAAY,CAAClH,MAAM,GAAG,CAAC,EAAEsF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC/C,MAAMe,IAAI,GAAGa,YAAY,CAAC5B,CAAC,CAAC;UAE5B,IAAIe,IAAI,CAACI,QAAQ,EAAE;YACf;YACA,MAAMf,aAAa,GAAG9D,mBAAmB,CAACgD,cAAc,EAAEyB,IAAI,CAACb,QAAQ,CAAC;YACxE,MAAMG,WAAW,GAAG,IAAIrG,IAAI,CAACsF,cAAc,CAAC;YAC5Ce,WAAW,CAAClE,OAAO,CAACkE,WAAW,CAACjE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;;YAE9C;YACA,IAAIkE,gBAAgB,GAAG,IAAItG,IAAI,CAACqG,WAAW,CAAC;YAC5C,IAAI5E,eAAe,CAAC6E,gBAAgB,CAAC,EAAE;cACnCA,gBAAgB,GAAGrE,qBAAqB,CAACqE,gBAAgB,CAAC;YAC9D;YAEAuB,eAAe,CAAClC,OAAO,CAAC;cACpB,GAAGoB,IAAI;cACPlB,KAAK,EAAEO,aAAa,CAACtE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;cAChD+D,GAAG,EAAEQ,gBAAgB,CAACxE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YACpD,CAAC,CAAC;YAEFuD,cAAc,GAAG,IAAItF,IAAI,CAACoG,aAAa,CAAC;UAC5C,CAAC,MAAM;YACH;YACA,MAAM3G,QAAQ,GAAGvC,OAAO,CAACoK,IAAI,CAAC3D,GAAG,IAC7BA,GAAG,CAAC,YAAY,CAAC,KAAKsB,KAAK,CAACrB,IAAI,IAChCD,GAAG,CAAC,MAAM,CAAC,KAAKoD,IAAI,CAACnB,IAAI,CAAC7D,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAC3C,CAAC;;YAED;YACA,MAAMkE,eAAe,GAAGzH,kBAAkB,CAACyG,KAAK,CAACrB,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5D,MAAMsC,QAAQ,GAAGD,eAAe,CAACxG,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAG,MAAM,CAAC,CAAC,KAAKe,SAAS,GAC5DyF,eAAe,CAACxG,QAAQ,CAAC,MAAM,CAAC,CAAC,GACjC0G,QAAQ,CAAC1G,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAG,iBAAiB,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;YAEtD,MAAM2G,aAAa,GAAG9D,mBAAmB,CAACgD,cAAc,EAAEY,QAAQ,CAAC;YACnE,MAAMG,WAAW,GAAG,IAAIrG,IAAI,CAACsF,cAAc,CAAC;YAC5Ce,WAAW,CAAClE,OAAO,CAACkE,WAAW,CAACjE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;;YAE9C;YACA,IAAIkE,gBAAgB,GAAG,IAAItG,IAAI,CAACqG,WAAW,CAAC;YAC5C,IAAI5E,eAAe,CAAC6E,gBAAgB,CAAC,EAAE;cACnCA,gBAAgB,GAAGrE,qBAAqB,CAACqE,gBAAgB,CAAC;YAC9D;YAEAuB,eAAe,CAAClC,OAAO,CAAC;cACpB,GAAGoB,IAAI;cACPlB,KAAK,EAAEO,aAAa,CAACtE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;cAChD+D,GAAG,EAAEQ,gBAAgB,CAACxE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YACpD,CAAC,CAAC;YAEFuD,cAAc,GAAG,IAAItF,IAAI,CAACoG,aAAa,CAAC;UAC5C;QACJ;;QAEA;QACA,IAAIuB,UAAU,EAAE;UACZE,eAAe,CAACtB,IAAI,CAAC;YACjB,GAAGoB,UAAU;YACb9B,KAAK,EAAEZ,KAAK,CAACrC,SAAS;YACtBkD,GAAG,EAAEb,KAAK,CAACrC;UACf,CAAC,CAAC;QACN;;QAEA;QACAqE,aAAa,CAACV,IAAI,CAAC,GAAGsB,eAAe,CAAC;MAC1C,CAAC,CAAC;MAEFxH,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAE2G,aAAa,CAAC;MAC/D5I,gBAAgB,CAAC4I,aAAa,CAAC;;MAE/B;MACA,MAAMa,eAAe,GAAG,EAAE;MAC1B,MAAMpD,KAAK,GAAG,IAAI1E,IAAI,CAAC,CAAC;MACxB0E,KAAK,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAE1BrH,cAAc,CAAC0H,OAAO,CAACC,KAAK,IAAI;QAC5B,MAAMC,UAAU,GAAG+B,aAAa,CAAChG,MAAM,CAAC8F,IAAI,IACxCA,IAAI,CAACrB,EAAE,CAACqC,UAAU,CAAC,GAAG9C,KAAK,CAACS,EAAE,GAAG,CAAC,IAAI,CAACqB,IAAI,CAACnB,IAAI,CAAC5D,QAAQ,CAAC,SAAS,CACvE,CAAC;QAED,IAAIkD,UAAU,CAACxE,MAAM,GAAG,CAAC,EAAE;UACvB;UACA,MAAMsH,YAAY,GAAG9C,UAAU,CAAC+C,MAAM,CAAC,CAACC,QAAQ,EAAEnB,IAAI,KAAK;YACvD,OAAO,IAAI/G,IAAI,CAAC+G,IAAI,CAAClB,KAAK,CAAC,GAAG,IAAI7F,IAAI,CAACkI,QAAQ,CAACrC,KAAK,CAAC,GAAGkB,IAAI,GAAGmB,QAAQ;UAC5E,CAAC,CAAC;;UAEF;UACAtD,uBAAuB,CAACK,KAAK,CAACS,EAAE,CAAC,GAAGsC,YAAY,CAACnC,KAAK;;UAEtD;UACA,IAAI,IAAI7F,IAAI,CAACgI,YAAY,CAACnC,KAAK,CAAC,GAAGnB,KAAK,EAAE;YACtCoD,eAAe,CAACvB,IAAI,CAACtB,KAAK,CAACS,EAAE,CAAC;UAClC;QACJ;MACJ,CAAC,CAAC;MAEF3H,uBAAuB,CAAC6G,uBAAuB,CAAC;MAChDzG,aAAa,CAAC2J,eAAe,CAAC;IAClC,CAAC,MAAM;MACHzJ,gBAAgB,CAAC0G,QAAQ,CAAC;MAC1BhH,uBAAuB,CAAC6G,uBAAuB,CAAC;MAChDzG,aAAa,CAAC0G,aAAa,CAAC;IAChC;EACJ,CAAC,EAAE,CAACvH,cAAc,EAAEE,cAAc,EAAEE,aAAa,EAAEE,cAAc,EAAEV,OAAO,EAAEsB,kBAAkB,EAAEI,eAAe,EAAEF,WAAW,CAAC,CAAC;;EAE9H;EACAjC,SAAS,CAAC,MAAM;IACZ,MAAM0L,aAAa,GAAIC,CAAC,IAAK;MACzB,IAAI,CAACA,CAAC,CAACC,OAAO,IAAID,CAAC,CAACE,OAAO,KAAKF,CAAC,CAACG,GAAG,KAAK,GAAG,IAAI,CAACH,CAAC,CAACI,QAAQ,EAAE;QAC1DJ,CAAC,CAACK,cAAc,CAAC,CAAC;QAClBhI,IAAI,CAAC,CAAC;MACV;MACA,IAAK,CAAC2H,CAAC,CAACC,OAAO,IAAID,CAAC,CAACE,OAAO,KAAKF,CAAC,CAACG,GAAG,KAAK,GAAG,IACzC,CAACH,CAAC,CAACC,OAAO,IAAID,CAAC,CAACE,OAAO,KAAKF,CAAC,CAACI,QAAQ,IAAIJ,CAAC,CAACG,GAAG,KAAK,GAAI,EAAE;QAC3DH,CAAC,CAACK,cAAc,CAAC,CAAC;QAClB1H,IAAI,CAAC,CAAC;MACV;IACJ,CAAC;IAED2H,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAER,aAAa,CAAC;IACnD,OAAO,MAAMO,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAET,aAAa,CAAC;EACvE,CAAC,EAAE,CAACjJ,YAAY,EAAEF,OAAO,CAAC0B,MAAM,CAAC,CAAC;EACtC;EACIjE,SAAS,CAAC,MAAM;IACZ,IAAI,CAACiB,aAAa,IAAIF,cAAc,IAAIF,cAAc,CAACoD,MAAM,GAAG,CAAC,EAAE;MAC/D,MAAMmI,YAAY,GAAG;QAAE,GAAGjL;MAAe,CAAC;MAC1C,IAAIkL,OAAO,GAAG,KAAK;MACnBxL,cAAc,CAAC0H,OAAO,CAACC,KAAK,IAAI;QAC5B;QACA,IAAI,CAAC4D,YAAY,CAAC5D,KAAK,CAACW,IAAI,CAAC,EAAE;UAAE;UAC7BiD,YAAY,CAAC5D,KAAK,CAACW,IAAI,CAAC,GAAGpI,cAAc,CAAC,CAAC;UAC3CsL,OAAO,GAAG,IAAI;QAClB;MACJ,CAAC,CAAC;MACF,IAAIA,OAAO,EAAE;QACTjL,iBAAiB,CAACgL,YAAY,CAAC;MACnC;IACJ;EACJ,CAAC,EAAE,CAACnL,aAAa,EAAEF,cAAc,EAAEF,cAAc,EAAEM,cAAc,CAAC,CAAC;;EAEnE;EACJnB,SAAS,CAAC,MAAM;IACZ,IAAIiB,aAAa,IAAIF,cAAc,IAAI,CAAC4B,gBAAgB,EAAE;MACtD7B,iBAAiB,CAACqD,IAAI,IAClBA,IAAI,CAAC8C,GAAG,CAACuB,KAAK,IACVA,KAAK,CAACrC,SAAS,KAAKpF,cAAc,GAC5B;QAAE,GAAGyH,KAAK;QAAErC,SAAS,EAAEpF;MAAe,CAAC,GACvCyH,KACV,CACJ,CAAC;IACL;IACA;EACJ,CAAC,EAAE,CAACvH,aAAa,EAAEF,cAAc,EAAE4B,gBAAgB,CAAC,CAAC;;EAEjD;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA,MAAM2J,qBAAqB,GAAIC,UAAU,IAAK;IAC1C,IAAI1L,cAAc,CAACoD,MAAM,KAAK,CAAC,IAAIuI,MAAM,CAACC,IAAI,CAACF,UAAU,CAAC,CAACtI,MAAM,KAAK,CAAC,EAAE;MACrErC,gBAAgB,CAAC,EAAE,CAAC;MACpB;IACJ;IAEA,MAAM0G,QAAQ,GAAG,EAAE;IACnB,IAAIS,SAAS,GAAG,CAAC;IAEjBlI,cAAc,CAAC0H,OAAO,CAACC,KAAK,IAAI;MAC5B,MAAMzF,SAAS,GAAGyF,KAAK,CAACW,IAAI,CAAC,CAAC;MAC9B,MAAMV,UAAU,GAAGhI,OAAO,CAAC+D,MAAM,CAAC0C,GAAG,IAAIA,GAAG,CAAC,YAAY,CAAC,KAAKnE,SAAS,CAAC;MACzE,IAAI0F,UAAU,CAACxE,MAAM,KAAK,CAAC,EAAE;;MAE7B;MACA,MAAMyE,QAAQ,GAAG,IAAInF,IAAI,CAACtC,aAAa,GAAGF,cAAc,GAAGI,cAAc,CAAC4B,SAAS,CAAC,CAAC;MACrF,IAAI4F,KAAK,CAACD,QAAQ,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;;MAE/B;MACA,IAAIC,cAAc,GAAG,IAAItF,IAAI,CAACmF,QAAQ,CAAC;MACvC,MAAMI,UAAU,GAAG,EAAE;MACrB,IAAIC,SAAS,GAAG,CAAC;;MAEjB;MACAD,UAAU,CAACI,OAAO,CAAC;QACfD,EAAE,EAAE,QAAQF,SAAS,EAAE;QACvBI,IAAI,EAAE,GAAGpG,SAAS,WAAW;QAC7BqG,KAAK,EAAEV,QAAQ,CAACrD,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3C+D,GAAG,EAAEX,QAAQ,CAACrD,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzCgE,QAAQ,EAAE;MACd,CAAC,CAAC;MACFP,SAAS,EAAE;;MAEX;MACA,KAAK,IAAIQ,CAAC,GAAGd,UAAU,CAACxE,MAAM,GAAG,CAAC,EAAEsF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC7C,MAAMvG,QAAQ,GAAGyF,UAAU,CAACc,CAAC,CAAC;QAC9B,MAAME,QAAQ,GAAGC,QAAQ,CAAC1G,QAAQ,CAAC,iBAAiB,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;QAC/D;QACA,MAAM2G,aAAa,GAAG9D,mBAAmB,CAACgD,cAAc,EAAEY,QAAQ,CAAC;QACnE;QACA,MAAMG,WAAW,GAAG,IAAIrG,IAAI,CAACsF,cAAc,CAAC;QAC5Ce,WAAW,CAAClE,OAAO,CAACkE,WAAW,CAACjE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;QAC9C;QACA,IAAIkE,gBAAgB,GAAG,IAAItG,IAAI,CAACqG,WAAW,CAAC;QAC5C,IAAI5E,eAAe,CAAC6E,gBAAgB,CAAC,EAAE;UACnCA,gBAAgB,GAAGrE,qBAAqB,CAACqE,gBAAgB,CAAC;QAC9D;QACAf,UAAU,CAACI,OAAO,CAAC;UACfD,EAAE,EAAE,QAAQF,SAAS,EAAE;UACvBI,IAAI,EAAE,GAAGnG,QAAQ,CAAC,YAAY,CAAC,KAAKA,QAAQ,CAAC,MAAM,CAAC,EAAE;UACtDoG,KAAK,EAAEO,aAAa,CAACtE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UAChD+D,GAAG,EAAEQ,gBAAgB,CAACxE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACjDgE,QAAQ,EAAE;QACd,CAAC,CAAC;QACFP,SAAS,EAAE;QACX;QACAF,cAAc,GAAG,IAAItF,IAAI,CAACoG,aAAa,CAAC;MAC5C;;MAEA;MACArB,QAAQ,CAACwB,IAAI,CAAC,GAAGhB,UAAU,CAAC;;MAE5B;MACA,IAAIA,UAAU,CAAC7E,MAAM,GAAG,CAAC,IAAI6E,UAAU,CAAC,CAAC,CAAC,CAACM,KAAK,EAAE;QAC9CjB,uBAAuB,CAACpF,SAAS,CAAC,GAAG+F,UAAU,CAAC,CAAC,CAAC,CAACM,KAAK;MAC5D;IACJ,CAAC,CAAC;;IAEF;IACA,IAAInH,WAAW,CAACgC,MAAM,GAAG,CAAC,EAAE;MACxB;MACAhC,WAAW,CAACsG,OAAO,CAAC0B,UAAU,IAAI;QAC9B,IAAIC,WAAW,GAAG,CAAC;QACnB,IAAID,UAAU,CAACE,iBAAiB,EAAE;UAC9B,MAAMC,cAAc,GAAG9B,QAAQ,CAAC+B,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACrB,EAAE,KAAKgB,UAAU,CAACE,iBAAiB,CAAC;UAC3F,IAAIC,cAAc,KAAK,CAAC,CAAC,EAAE;YACvBF,WAAW,GAAGE,cAAc,GAAG,CAAC;UACpC;QACJ;;QAEA;QACA,MAAMsC,aAAa,GAAG;UAClB,GAAGzC,UAAU;UACbhB,EAAE,EAAEgB,UAAU,CAAChB,EAAE;UAAE;UACnBE,IAAI,EAAEc,UAAU,CAACd,IAAI;UACrBM,QAAQ,EAAEQ,UAAU,CAACR,QAAQ;UAC7BiB,QAAQ,EAAE;QACd,CAAC;;QAED;QACApC,QAAQ,CAACiC,MAAM,CAACL,WAAW,EAAE,CAAC,EAAEwC,aAAa,CAAC;MAClD,CAAC,CAAC;;MAEF;MACA;MACA;IACJ;IAEApL,uBAAuB,CAAC6G,uBAAuB,CAAC;IAChDvG,gBAAgB,CAAC0G,QAAQ,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMqE,eAAe,GAAGA,CAAA,KAAMpJ,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGiB,IAAI,CAACmI,MAAM,CAAC,CAAC;;EAExD;EACA,MAAMC,cAAc,GAAIC,SAAS,IAAK;IAClCnI,aAAa,CAAC,MAAM;MAChB,MAAMoI,QAAQ,GAAG;QACb9D,EAAE,EAAE0D,eAAe,CAAC,CAAC;QACrBxF,IAAI,EAAE2F,SAAS;QACf3D,IAAI,EAAE2D,SAAS;QAAE;QACjB3G,SAAS,EAAElF,aAAa,IAAIF,cAAc,GAAGA,cAAc,GAAG;MAClE,CAAC;MACDD,iBAAiB,CAACqD,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE4I,QAAQ,CAAC,CAAC;IAClD,CAAC,EAAE,OAAOD,SAAS,QAAQ,CAAC;EAChC,CAAC;;EAED;EACA,MAAME,iBAAiB,GAAI/B,OAAO,IAAK;IACnC,MAAMgC,aAAa,GAAGpM,cAAc,CAACgK,IAAI,CAACrC,KAAK,IAAIA,KAAK,CAACS,EAAE,KAAKgC,OAAO,CAAC;IACxEtG,aAAa,CAAC,MAAM;MAChB7D,iBAAiB,CAACqD,IAAI,IAAIA,IAAI,CAACK,MAAM,CAACgE,KAAK,IAAIA,KAAK,CAACS,EAAE,KAAKgC,OAAO,CAAC,CAAC;IACzE,CAAC,EAAE,UAAU,CAAAgC,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAE9D,IAAI,KAAI,OAAO,EAAE,CAAC;EAClD,CAAC;;EAED;EACA,MAAM+D,iBAAiB,GAAGA,CAACjC,OAAO,EAAEkC,OAAO,KAAK;IAC5C,MAAMC,aAAa,GAAGvM,cAAc,CAACgK,IAAI,CAACrC,KAAK,IAAIA,KAAK,CAACS,EAAE,KAAKgC,OAAO,CAAC;IACxEtG,aAAa,CAAC,MAAM;MAChB7D,iBAAiB,CAACqD,IAAI,IAClBA,IAAI,CAAC8C,GAAG,CAACuB,KAAK,IACVA,KAAK,CAACS,EAAE,KAAKgC,OAAO,GAAG;QAAE,GAAGzC,KAAK;QAAEW,IAAI,EAAEgE;MAAQ,CAAC,GAAG3E,KACzD,CACJ,CAAC;IACL,CAAC,EAAE,oBAAoB2E,OAAO,GAAG,CAAC;EACtC,CAAC;;EAED;EACA,MAAME,gBAAgB,GAAGA,CAACvK,MAAM,EAAEqK,OAAO,KAAK;IAC1C,MAAMG,WAAW,GAAG3L,aAAa,CAACkJ,IAAI,CAACP,IAAI,IAAIA,IAAI,CAACrB,EAAE,KAAKnG,MAAM,CAAC;IAClE6B,aAAa,CAAC,MAAM;MAChBvC,kBAAkB,CAAC+B,IAAI,KAAK;QACxB,GAAGA,IAAI;QACP,CAACrB,MAAM,GAAGqK;MACd,CAAC,CAAC,CAAC;IACP,CAAC,EAAE,mBAAmBA,OAAO,GAAG,CAAC;EACrC,CAAC;EAED,MAAMI,yBAAyB,GAAGA,CAACxK,SAAS,EAAEkC,IAAI,KAAK;IACnDN,aAAa,CAAC,MAAM;MAChBvD,iBAAiB,CAAC+C,IAAI,KAAK;QACvB,GAAGA,IAAI;QACP,CAACpB,SAAS,GAAGkC;MACjB,CAAC,CAAC,CAAC;IACP,CAAC,EAAE,UAAUlC,SAAS,oBAAoBkC,IAAI,EAAE,CAAC;EACrD,CAAC;EAED,MAAMuI,0BAA0B,GAAGA,CAACvC,OAAO,EAAEwC,OAAO,KAAK;IACrD,MAAMC,aAAa,GAAG7M,cAAc,CAACgK,IAAI,CAACrC,KAAK,IAAIA,KAAK,CAACS,EAAE,KAAKgC,OAAO,CAAC;IACxEtG,aAAa,CAAC,MAAM;MAChB7D,iBAAiB,CAACqD,IAAI,IAClBA,IAAI,CAAC8C,GAAG,CAACuB,KAAK,IACVA,KAAK,CAACS,EAAE,KAAKgC,OAAO,GAAG;QAAE,GAAGzC,KAAK;QAAErC,SAAS,EAAEsH;MAAQ,CAAC,GAAGjF,KAC9D,CACJ,CAAC;IACL,CAAC,EAAE,UAAU,CAAAkF,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEvE,IAAI,KAAI,OAAO,oBAAoBsE,OAAO,EAAE,CAAC;EAC7E,CAAC;;EAED;EACA,MAAME,uBAAuB,GAAGA,CAAC1C,OAAO,EAAE2C,SAAS,KAAK;IACpD,MAAMF,aAAa,GAAG7M,cAAc,CAACgK,IAAI,CAACrC,KAAK,IAAIA,KAAK,CAACS,EAAE,KAAKgC,OAAO,CAAC;IACxEtG,aAAa,CAAC,MAAM;MAChB3C,qBAAqB,CAACmC,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAE,CAAC8G,OAAO,GAAG2C;MAAU,CAAC,CAAC,CAAC;;MAElE;MACA,MAAMC,kBAAkB,GAAGlM,aAAa,CAAC6C,MAAM,CAAC8F,IAAI,IAAIA,IAAI,CAACI,QAAQ,CAAC;MACtExI,cAAc,CAAC2L,kBAAkB,CAAC;IACtC,CAAC,EAAE,6BAA6B,CAAAH,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEvE,IAAI,KAAI,OAAO,EAAE,CAAC;EACrE,CAAC;;EAED;EACA,MAAM2E,wBAAwB,GAAGA,CAAChL,MAAM,EAAEiL,WAAW,EAAEC,UAAU,KAAK;IAClE;IACA,MAAMjF,SAAS,GAAGpH,aAAa,CAAC0I,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACrB,EAAE,KAAKnG,MAAM,CAAC;IACrE,IAAIiG,SAAS,KAAK,CAAC,CAAC,EAAE;IAEtB,MAAMuB,IAAI,GAAG3I,aAAa,CAACoH,SAAS,CAAC;IACrC,MAAMkF,QAAQ,GAAG3D,IAAI,CAACnB,IAAI,CAAC7D,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3C,MAAMvC,SAAS,GAAGuH,IAAI,CAACnB,IAAI,CAAC7D,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE5C;IACA,MAAMkD,KAAK,GAAG3H,cAAc,CAACgK,IAAI,CAACqD,CAAC,IAAIA,CAAC,CAAC/E,IAAI,KAAKpG,SAAS,CAAC;IAC5D,IAAI,CAACyF,KAAK,EAAE;IAEZ7D,aAAa,CAAC,MAAM;MAChB;MACA;MACA;MACA3C,qBAAqB,CAACmC,IAAI,IAAI;QAC1B,MAAMgK,gBAAgB,GAAGhK,IAAI,CAACqE,KAAK,CAACrB,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,OAAO;UACH,GAAGhD,IAAI;UACP,CAACqE,KAAK,CAACrB,IAAI,GAAG;YACV,GAAGgH,gBAAgB;YACnB,CAACF,QAAQ,GAAGF;UAChB;QACJ,CAAC;MACL,CAAC,CAAC;IACN,CAAC,EAAE,UAAUE,QAAQ,gBAAgBF,WAAW,OAAO,CAAC;EAC5D,CAAC;;EAED;EACA,MAAMK,mBAAmB,GAAIC,cAAc,IAAK;IAC5C,MAAM;MAAElF,IAAI;MAAEM,QAAQ;MAAEU;IAAkB,CAAC,GAAGkE,cAAc;IAE5DzK,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEwK,cAAc,CAAC;IAE/D1J,aAAa,CAAC,MAAM;MAChB;MACA,MAAM2J,SAAS,GAAG,eAAe/K,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MAE7C,MAAM+K,OAAO,GAAG;QACZtF,EAAE,EAAEqF,SAAS;QACbnF,IAAI,EAAE,WAAWA,IAAI,EAAE;QACvBM,QAAQ,EAAEA,QAAQ;QAClBU,iBAAiB,EAAEA,iBAAiB;QACpCO,QAAQ,EAAE,IAAI;QACdpB,QAAQ,EAAE;MACd,CAAC;MAED1F,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE0K,OAAO,CAAC;;MAEhD;MACArM,cAAc,CAACiC,IAAI,IAAI;QACnB,MAAMkI,OAAO,GAAG,CAAC,GAAGlI,IAAI,EAAEoK,OAAO,CAAC;QAClC3K,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEwI,OAAO,CAAC;QAC5C,OAAOA,OAAO;MAClB,CAAC,CAAC;;MAEF;MACA;IACJ,CAAC,EAAE,oBAAoBlD,IAAI,GAAG,CAAC;EACnC,CAAC;;EAEG;EACJ,MAAMqF,gBAAgB,GAAGA,CAACrI,SAAS,EAAEL,OAAO,KAAK;IAC7C,IAAI2I,KAAK,GAAG,CAAC;IACb,MAAMC,OAAO,GAAG,IAAInL,IAAI,CAAC4C,SAAS,CAAC;IACnC,MAAMkD,GAAG,GAAG,IAAI9F,IAAI,CAACuC,OAAO,CAAC;;IAE7B;IACA4I,OAAO,CAAChJ,OAAO,CAACgJ,OAAO,CAAC/I,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IAEtC,OAAO+I,OAAO,IAAIrF,GAAG,EAAE;MACnB,IAAI,CAACrE,eAAe,CAAC0J,OAAO,CAAC,EAAE;QAC3BD,KAAK,EAAE;MACX;MACAC,OAAO,CAAChJ,OAAO,CAACgJ,OAAO,CAAC/I,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IAC1C;IACA,OAAO8I,KAAK;EAChB,CAAC;;EAED;EACA,MAAME,2BAA2B,GAAGA,CAACxI,SAAS,EAAEL,OAAO,KAAK;IACxD,IAAI,CAACK,SAAS,IAAI,CAACL,OAAO,EAAE,OAAO,CAAC;IAEpC,MAAMsD,KAAK,GAAG,IAAI7F,IAAI,CAAC4C,SAAS,CAAC;IACjC,MAAMkD,GAAG,GAAG,IAAI9F,IAAI,CAACuC,OAAO,CAAC;IAE7B,IAAIsD,KAAK,IAAIC,GAAG,EAAE,OAAO,CAAC;IAE1B,IAAIuF,WAAW,GAAG,CAAC;IACnB,IAAI5I,WAAW,GAAG,IAAIzC,IAAI,CAAC6F,KAAK,CAAC;IAEjC,OAAOpD,WAAW,GAAGqD,GAAG,EAAE;MACtB,MAAMwF,SAAS,GAAG7I,WAAW,CAACb,MAAM,CAAC,CAAC;MACtC;MACA,IAAI0J,SAAS,KAAK,CAAC,IAAIA,SAAS,KAAK,CAAC,EAAE;QACpCD,WAAW,EAAE;MACjB;MACA5I,WAAW,CAACN,OAAO,CAACM,WAAW,CAACL,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IAClD;IAEA,OAAOiJ,WAAW;EACtB,CAAC;;EAED;EACA,MAAME,oBAAoB,GAAGA,CAAC3I,SAAS,EAAEsD,QAAQ,KAAK;IAClD,IAAI3D,OAAO,GAAG,IAAIvC,IAAI,CAAC4C,SAAS,CAAC;IACjC,IAAIF,aAAa,GAAGwD,QAAQ,GAAG,CAAC,CAAC,CAAC;;IAElC,OAAOxD,aAAa,GAAG,CAAC,EAAE;MACtBH,OAAO,CAACJ,OAAO,CAACI,OAAO,CAACH,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;MACtC,IAAI,CAACX,eAAe,CAACc,OAAO,CAAC,EAAE;QAC3BG,aAAa,EAAE;MACnB;IACJ;IAEA,OAAOH,OAAO,CAACT,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC9C,CAAC;;EAED;EACA,MAAMyJ,kCAAkC,GAAGA,CAAA,KAAM;IAC7C,IAAI,CAAChO,cAAc,IAAIY,aAAa,CAACsC,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;IAE5D,MAAMgE,KAAK,GAAG,IAAI1E,IAAI,CAAC,CAAC;IACxB0E,KAAK,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAE1B,MAAM8G,WAAW,GAAG,EAAE;;IAEtB;IACAnO,cAAc,CAAC0H,OAAO,CAACC,KAAK,IAAI;MAC5B,MAAMyG,eAAe,GAAG5N,oBAAoB,CAACmH,KAAK,CAACS,EAAE,CAAC;MACtD,IAAIgG,eAAe,IAAIxN,UAAU,CAAC8D,QAAQ,CAACiD,KAAK,CAACS,EAAE,CAAC,EAAE;QAClD,MAAM9C,SAAS,GAAG,IAAI5C,IAAI,CAAC0L,eAAe,CAAC;QAC3C,MAAMC,UAAU,GAAGP,2BAA2B,CAACxI,SAAS,EAAE8B,KAAK,CAAC;QAEhE,IAAIiH,UAAU,GAAG,CAAC,EAAE;UAChBF,WAAW,CAAClF,IAAI,CAAC;YACbmB,OAAO,EAAEzC,KAAK,CAACS,EAAE;YACjBlG,SAAS,EAAEyF,KAAK,CAACW,IAAI;YACrB2D,SAAS,EAAEtE,KAAK,CAACrB,IAAI;YACrBgI,UAAU,EAAED,UAAU;YACtBE,SAAS,EAAE,CAAC;YAAE;YACdjJ,SAAS,EAAE8I,eAAe;YAC1BI,UAAU,EAAEH,UAAU,GAAG,CAAC,CAAC;UAC/B,CAAC,CAAC;QACN;MACJ;IACJ,CAAC,CAAC;;IAEF;IACA,OAAOF,WAAW,CAACM,IAAI,CAAC,CAACpB,CAAC,EAAEqB,CAAC,KAAKA,CAAC,CAACJ,UAAU,GAAGjB,CAAC,CAACiB,UAAU,CAAC;EAClE,CAAC;;EAED;EACA,MAAMK,0BAA0B,GAAGA,CAAA,KAAM;IACrC,IAAI,CAACzO,cAAc,IAAIY,aAAa,CAACsC,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;IAE9D,MAAMgE,KAAK,GAAG,IAAI1E,IAAI,CAAC,CAAC;IACxB0E,KAAK,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;IAE1B;IACA,IAAIuH,eAAe,GAAG,CAAC;;IAEvB;IACA5O,cAAc,CAAC0H,OAAO,CAACC,KAAK,IAAI;MAC5B,MAAMyG,eAAe,GAAG5N,oBAAoB,CAACmH,KAAK,CAACS,EAAE,CAAC;MACtD,IAAIgG,eAAe,IAAIxN,UAAU,CAAC8D,QAAQ,CAACiD,KAAK,CAACS,EAAE,CAAC,EAAE;QAClD,MAAM9C,SAAS,GAAG,IAAI5C,IAAI,CAAC0L,eAAe,CAAC;QAC3CQ,eAAe,IAAId,2BAA2B,CAACxI,SAAS,EAAE8B,KAAK,CAAC;MACpE;IACJ,CAAC,CAAC;;IAEF;IACAtG,aAAa,CAAC4G,OAAO,CAAC+B,IAAI,IAAI;MAC1B,IAAIA,IAAI,CAACI,QAAQ,EAAE;QACf,MAAMgF,SAAS,GAAG,IAAInM,IAAI,CAAC+G,IAAI,CAAClB,KAAK,CAAC;QACtC,IAAIsG,SAAS,GAAGzH,KAAK,EAAE;UACnBwH,eAAe,IAAId,2BAA2B,CAACe,SAAS,EAAEzH,KAAK,CAAC;QACpE;MACJ;IACJ,CAAC,CAAC;IAEF,OAAO;MACH0H,SAAS,EAAE,CAAC;MAAE;MACdC,SAAS,EAAE,CAAC;MAAE;MACdC,MAAM,EAAEJ;IACZ,CAAC;EACL,CAAC;EAED,oBACInP,OAAA;IAAKwP,SAAS,EAAC,oCAAoC;IAAAC,QAAA,gBAC/CzP,OAAA;MAAQwP,SAAS,EAAC,oBAAoB;MAAAC,QAAA,eAClCzP,OAAA;QAAKwP,SAAS,EAAC,6BAA6B;QAAAC,QAAA,gBACxCzP,OAAA;UAAKwP,SAAS,EAAC,mCAAmC;UAAAC,QAAA,gBAC9CzP,OAAA;YAAIwP,SAAS,EAAC,kCAAkC;YAAAC,QAAA,EAAC;UAA0B;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAChF7P,OAAA;YAAKwP,SAAS,EAAC,6BAA6B;YAAAC,QAAA,gBACxCzP,OAAA;cACI8P,OAAO,EAAEpM,IAAK;cACdqM,QAAQ,EAAE5N,YAAY,IAAI,CAAE;cAC5BqN,SAAS,EAAC,sIAAsI;cAChJQ,KAAK,EAAC,eAAe;cAAAP,QAAA,EACxB;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACT7P,OAAA;cACI8P,OAAO,EAAE9L,IAAK;cACd+L,QAAQ,EAAE5N,YAAY,IAAIF,OAAO,CAAC0B,MAAM,GAAG,CAAE;cAC7C6L,SAAS,EAAC,sIAAsI;cAChJQ,KAAK,EAAC,eAAe;cAAAP,QAAA,EACxB;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,EAELtO,WAAW,iBACRvB,OAAA;UAAKwP,SAAS,EAAC,2FAA2F;UAAAC,QAAA,gBACtGzP,OAAA;YACIwP,SAAS,EAAC,+FAA+F;YACzGM,OAAO,EAAEA,CAAA,KAAM;cACXzL,aAAa,CAAC,MAAM7C,cAAc,CAAC,KAAK,CAAC,EAAE,mBAAmB,CAAC;YACnE,CAAE;YACF,cAAW,oBAAoB;YAAAiO,QAAA,EAClC;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT7P,OAAA;YAAAyP,QAAA,EAAQ;UAAoC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACrD7P,OAAA;YAAIwP,SAAS,EAAC,kCAAkC;YAAAC,QAAA,gBAC5CzP,OAAA;cAAAyP,QAAA,gBACIzP,OAAA;gBAAAyP,QAAA,EAAQ;cAAgC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAAA7P,OAAA;gBAAA0P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,0HACqD,eAAA7P,OAAA;gBAAA0P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,kGAEtH;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACL7P,OAAA;cAAAyP,QAAA,gBACIzP,OAAA;gBAAAyP,QAAA,EAAQ;cAAW;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAAA7P,OAAA;gBAAA0P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,2DACW,eAAA7P,OAAA;gBAAA0P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,qGAEvD;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACL7P,OAAA;cAAAyP,QAAA,gBACIzP,OAAA;gBAAAyP,QAAA,EAAQ;cAAiB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAAA7P,OAAA;gBAAA0P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,sFAC2B,eAAA7P,OAAA;gBAAA0P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,iDAE7E;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACL7P,OAAA;cAAAyP,QAAA,gBACIzP,OAAA;gBAAAyP,QAAA,EAAQ;cAAqB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAAA7P,OAAA;gBAAA0P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,yCACZ,eAAA7P,OAAA;gBAAA0P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,qEAE1C;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACL7P,OAAA;cAAAyP,QAAA,gBACIzP,OAAA;gBAAAyP,QAAA,EAAQ;cAA+B;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAAA7P,OAAA;gBAAA0P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,8GACqC,eAAA7P,OAAA;gBAAA0P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,qDACrD,eAAA7P,OAAA;gBAAA0P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,4HAEtD;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACL7P,OAAA;cAAAyP,QAAA,gBACIzP,OAAA;gBAAAyP,QAAA,EAAQ;cAAU;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAAA7P,OAAA;gBAAA0P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,+DAC0B,eAAA7P,OAAA;gBAAA0P,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,mEAErE;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CACR;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACT7P,OAAA;MAAMwP,SAAS,EAAC,uBAAuB;MAAAC,QAAA,eACnCzP,OAAA;QAAKwP,SAAS,EAAC,uCAAuC;QAAAC,QAAA,gBAElDzP,OAAA;UAClBwP,SAAS,EAAC,iEAAiE;UAC3ES,KAAK,EAAE;YAAEC,QAAQ,EAAE;UAAI,CAAE,CAAC;UAAA;UAAAT,QAAA,gBAEJzP,OAAA;YAAIwP,SAAS,EAAC,wDAAwD;YAAAC,QAAA,EAAC;UAAc;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC1F7P,OAAA,CAACH,aAAa;YACVY,cAAc,EAAEA,cAAe;YAC/B0P,sBAAsB,EAAGxL,IAAI,IAAK;cAC9BN,aAAa,CAAC,MAAM3D,iBAAiB,CAACiE,IAAI,CAAC,EAAE,iCAAiCA,IAAI,EAAE,CAAC;YACzF,CAAE;YACFhE,aAAa,EAAEA,aAAc;YAC7ByP,qBAAqB,EAAGC,SAAS,IAAK;cAClChM,aAAa,CAAC,MAAMzD,gBAAgB,CAACyP,SAAS,CAAC,EAAE,aAAaA,SAAS,GAAG,QAAQ,GAAG,YAAY,YAAY,CAAC;YAClH,CAAE;YACFpP,gBAAgB,EAAEA,gBAAiB;YACnCE,UAAU,EAAEA,UAAW;YACvBmP,iBAAiB,EAAEpB,0BAA0B,CAAC;UAAE;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnD,CAAC,eAC1B7P,OAAA,CAACJ,aAAa;YACV2Q,MAAM,EAAElQ,YAAY,IAAI,EAAG;YAC3BE,cAAc,EAAEA,cAAc,IAAI,EAAG;YACrCiQ,UAAU,EAAEjE,cAAe;YAC3BkE,aAAa,EAAE/D,iBAAkB;YACjC/L,aAAa,EAAEA,aAAc;YAC7BF,cAAc,EAAEA,cAAc,IAAI,EAAG;YACrCI,cAAc,EAAEA,cAAc,IAAI,CAAC,CAAE;YACrC6P,qBAAqB,EAAEzD,yBAA0B;YACjDlM,oBAAoB,EAAEA,oBAAoB,IAAI,CAAC,CAAE;YACjDI,UAAU,EAAEA,UAAU,IAAI,EAAG;YAC7BwP,aAAa,EAAE/D,iBAAkB;YACjCgE,sBAAsB,EAAE1D,0BAA2B;YACnD/M,OAAO,EAAEA,OAAQ;YACjB0Q,mBAAmB,EAAExD,uBAAwB;YAC7C3I,eAAe,EAAEA,eAAgB;YACjC2J,2BAA2B,EAAEA;UAA4B;YAAAqB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5D,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACuB,CAAC,eAGN7P,OAAA;UAClBwP,SAAS,EAAC,iDAAiD;UAC3DS,KAAK,EAAE;YAAEC,QAAQ,EAAE,CAAC;YAAEY,QAAQ,EAAE;UAAO,CAAE;UAAArB,QAAA,gBAEnBzP,OAAA;YAAIwP,SAAS,EAAC,wDAAwD;YAAAC,QAAA,EAAC;UAAkB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EAsB7FxO,aAAa,IAAIA,aAAa,CAACsC,MAAM,GAAG,CAAC,gBACd3D,OAAA,CAACF,UAAU;YACnCiR,KAAK,EAAE1P,aAAc;YACrBU,YAAY,EAAEA,YAAa;YAC3BiP,oBAAoB,EAAExD,wBAAyB;YAC/CyD,gBAAgB,EAAElE,gBAAiB;YACnCuD,iBAAiB,EAAEpB,0BAA0B,CAAC,CAAE;YAChDR,WAAW,EAAED,kCAAkC,CAAC,CAAE;YAClDyC,eAAe,EAAEpD;UAAoB;YAAA4B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxC,CAAC,gBAEE7P,OAAA;YAAKwP,SAAS,EAAC,iCAAiC;YAAAC,QAAA,gBAC5CzP,OAAA;cAAGwP,SAAS,EAAC,SAAS;cAAAC,QAAA,EAAC;YAA+B;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,eAC1D7P,OAAA;cAAGwP,SAAS,EAAC,SAAS;cAAAC,QAAA,EAAC;YAAgD;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1E,CACR;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd,CAAC;AAAC3P,EAAA,CArsCID,eAAe;AAAAkR,EAAA,GAAflR,eAAe;AAusCrB,eAAeA,eAAe;AAAC,IAAAkR,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}