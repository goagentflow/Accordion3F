{"ast":null,"code":"import React,{useState,useEffect}from'react';import Papa from'papaparse';import AssetSelector from'./components/AssetSelector';import CampaignSetup from'./components/CampaignSetup';import GanttChart from'./components/GanttChart';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TimelineBuilder=()=>{// CSV and asset data\nconst[csvData,setCsvData]=useState([]);const[uniqueAssets,setUniqueAssets]=useState([]);const[selectedAssets,setSelectedAssets]=useState([]);// Live date management\nconst[globalLiveDate,setGlobalLiveDate]=useState('');const[useGlobalDate,setUseGlobalDate]=useState(true);const[assetLiveDates,setAssetLiveDates]=useState({});// {assetName: 'YYYY-MM-DD'}\n// Calculated results\nconst[calculatedStartDates,setCalculatedStartDates]=useState({});// {assetName: 'YYYY-MM-DD'}\nconst[projectStartDate,setProjectStartDate]=useState('');// Earliest start date across all assets\nconst[dateErrors,setDateErrors]=useState([]);// Array of asset names that start before today\n// Final timeline for display\nconst[timelineTasks,setTimelineTasks]=useState([]);// Helper function to check if date is weekend\nconst isWeekend=date=>{const day=date.getDay();return day===0||day===6;// Sunday = 0, Saturday = 6\n};// Helper function to get previous working day\nconst getPreviousWorkingDay=date=>{let workingDate=new Date(date);do{workingDate.setDate(workingDate.getDate()-1);}while(isWeekend(workingDate));return workingDate;};// Helper function to get next working day\nconst getNextWorkingDay=date=>{let workingDate=new Date(date);do{workingDate.setDate(workingDate.getDate()+1);}while(isWeekend(workingDate));return workingDate;};// Helper function to subtract working days (backwards calculation)\nconst subtractWorkingDays=(endDate,workingDaysToSubtract)=>{let currentDate=new Date(endDate);let remainingDays=workingDaysToSubtract;// Subtract working days\nwhile(remainingDays>0){currentDate.setDate(currentDate.getDate()-1);// Only count non-weekend days\nif(!isWeekend(currentDate)){remainingDays--;}}return currentDate;};// Helper function to add working days (forward calculation for display)\nconst addWorkingDays=(startDate,workingDaysToAdd)=>{let currentDate=new Date(startDate);let remainingDays=workingDaysToAdd-1;// -1 because start date counts as day 1\n// Add working days\nwhile(remainingDays>0){currentDate.setDate(currentDate.getDate()+1);if(!isWeekend(currentDate)){remainingDays--;}}return currentDate;};// Load CSV data\nuseEffect(()=>{Papa.parse(`${window.location.origin}/Group_Asset_Task_Time.csv`,{download:true,header:true,skipEmptyLines:true,complete:results=>{const parsedData=results.data;setCsvData(parsedData);// Extract unique asset types from CSV\nconst assetTypes=[...new Set(parsedData.map(row=>row['Asset Type']))].filter(type=>type);setUniqueAssets(assetTypes);},error:error=>{console.error(\"Error parsing CSV file:\",error);}});},[]);// Calculate backwards timeline when live dates or assets change\nuseEffect(()=>{if(selectedAssets.length===0||csvData.length===0){setTimelineTasks([]);setCalculatedStartDates({});setProjectStartDate('');setDateErrors([]);return;}const today=new Date();today.setHours(0,0,0,0);// Reset time for accurate comparison\nconst newCalculatedStartDates={};const newDateErrors=[];const allStartDates=[];// Calculate for each selected asset\nselectedAssets.forEach(assetName=>{// Determine the correct live date without the incorrect fallback\nconst liveDate=useGlobalDate?globalLiveDate:assetLiveDates[assetName];// If no date is available for this asset, skip it\nif(!liveDate)return;// Get tasks for this asset\nconst assetTasks=csvData.filter(row=>row['Asset Type']===assetName);if(assetTasks.length===0)return;// Work backwards through tasks sequentially\nlet currentEndDate=new Date(liveDate);// Process tasks in reverse order (last task ends on live date)\nfor(let i=assetTasks.length-1;i>=0;i--){const task=assetTasks[i];const duration=parseInt(task['Duration (Days)'],10)||1;// Calculate when this task must start\nconst taskStartDate=subtractWorkingDays(currentEndDate,duration);// Next task ends the working day before this task starts\ncurrentEndDate=new Date(taskStartDate);currentEndDate.setDate(currentEndDate.getDate()-1);// Ensure end date is a working day\nif(isWeekend(currentEndDate)){currentEndDate=getPreviousWorkingDay(currentEndDate);}}// The project start date is the day after the last calculated end date\nlet calculatedStart=new Date(currentEndDate);calculatedStart.setDate(calculatedStart.getDate()+1);// Ensure start date is a working day\nif(isWeekend(calculatedStart)){calculatedStart=getNextWorkingDay(calculatedStart);}const calculatedStartDate=calculatedStart.toISOString().split('T')[0];newCalculatedStartDates[assetName]=calculatedStartDate;allStartDates.push(new Date(calculatedStartDate));// Check if start date is before today\nif(calculatedStart<today){newDateErrors.push(assetName);}});// Find earliest start date across all assets\nif(allStartDates.length>0){const earliestDate=new Date(Math.min(...allStartDates));setProjectStartDate(earliestDate.toISOString().split('T')[0]);}setCalculatedStartDates(newCalculatedStartDates);setDateErrors(newDateErrors);// Generate timeline tasks for display\ngenerateTimelineTasks(newCalculatedStartDates);},[selectedAssets,globalLiveDate,useGlobalDate,assetLiveDates,csvData]);// This new useEffect pre-populates individual dates when switching from global mode\nuseEffect(()=>{if(!useGlobalDate&&globalLiveDate&&selectedAssets.length>0){const newLiveDates={...assetLiveDates};let updated=false;selectedAssets.forEach(asset=>{// Pre-fill only if the asset doesn't have an individual date set\nif(!newLiveDates[asset]){newLiveDates[asset]=globalLiveDate;updated=true;}});if(updated){setAssetLiveDates(newLiveDates);}}},[useGlobalDate,globalLiveDate,selectedAssets,assetLiveDates]);// Generate timeline tasks for Gantt chart\nconst generateTimelineTasks=startDates=>{if(selectedAssets.length===0||Object.keys(startDates).length===0){setTimelineTasks([]);return;}const allTasks=[];let taskIndex=0;selectedAssets.forEach(assetName=>{const startDate=startDates[assetName];if(!startDate)return;const assetTasks=csvData.filter(row=>row['Asset Type']===assetName);let currentStartDate=new Date(startDate);// Ensure project starts on working day\nif(isWeekend(currentStartDate)){currentStartDate=getNextWorkingDay(currentStartDate);}assetTasks.forEach(taskInfo=>{const duration=parseInt(taskInfo['Duration (Days)'],10)||1;const taskStart=new Date(currentStartDate);const taskEnd=addWorkingDays(taskStart,duration);const ganttTask={id:`task-${taskIndex}`,name:`${taskInfo['Asset Type']}: ${taskInfo['Task']}`,start:taskStart.toISOString().split('T')[0],end:taskEnd.toISOString().split('T')[0],progress:0};allTasks.push(ganttTask);taskIndex++;// Move to next start date (day after current task ends)\ncurrentStartDate=new Date(taskEnd);currentStartDate.setDate(taskEnd.getDate()+1);// Ensure next start date is working day\nif(isWeekend(currentStartDate)){currentStartDate=getNextWorkingDay(currentStartDate);}});});setTimelineTasks(allTasks);};const handleAssetToggle=asset=>{setSelectedAssets(prev=>prev.includes(asset)?prev.filter(a=>a!==asset):[...prev,asset]);};const handleAssetLiveDateChange=(assetName,date)=>{setAssetLiveDates(prev=>({...prev,[assetName]:date}));};return/*#__PURE__*/_jsxs(\"div\",{className:\"bg-gray-100 min-h-screen font-sans\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"bg-white shadow-md\",children:/*#__PURE__*/_jsx(\"div\",{className:\"container mx-auto px-6 py-4\",children:/*#__PURE__*/_jsx(\"h1\",{className:\"text-3xl font-bold text-gray-800\",children:\"Accordion Timeline Builder\"})})}),/*#__PURE__*/_jsx(\"main\",{className:\"container mx-auto p-6\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-3 gap-8\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"lg:col-span-1 bg-white p-6 rounded-xl shadow-lg\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\",children:\"Timeline Setup\"}),/*#__PURE__*/_jsx(CampaignSetup,{globalLiveDate:globalLiveDate,onGlobalLiveDateChange:setGlobalLiveDate,useGlobalDate:useGlobalDate,onUseGlobalDateChange:setUseGlobalDate,projectStartDate:projectStartDate,dateErrors:dateErrors}),/*#__PURE__*/_jsx(AssetSelector,{assets:uniqueAssets||[],selectedAssets:selectedAssets||[],onAssetToggle:handleAssetToggle,useGlobalDate:useGlobalDate// <-- CORRECTED LINE\n,globalLiveDate:globalLiveDate||'',assetLiveDates:assetLiveDates||{},onAssetLiveDateChange:handleAssetLiveDateChange,calculatedStartDates:calculatedStartDates||{},dateErrors:dateErrors||[]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"lg:col-span-2 bg-white p-6 rounded-xl shadow-lg\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\",children:\"Generated Timeline\"}),timelineTasks&&timelineTasks.length>0?/*#__PURE__*/_jsx(GanttChart,{tasks:timelineTasks}):/*#__PURE__*/_jsxs(\"div\",{className:\"text-center text-gray-500 py-10\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"text-lg\",children:\"Your timeline will appear here.\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-sm\",children:\"Set a live date and select some assets to begin.\"})]})]})]})})]});};export default TimelineBuilder;","map":{"version":3,"names":["React","useState","useEffect","Papa","AssetSelector","CampaignSetup","GanttChart","jsx","_jsx","jsxs","_jsxs","TimelineBuilder","csvData","setCsvData","uniqueAssets","setUniqueAssets","selectedAssets","setSelectedAssets","globalLiveDate","setGlobalLiveDate","useGlobalDate","setUseGlobalDate","assetLiveDates","setAssetLiveDates","calculatedStartDates","setCalculatedStartDates","projectStartDate","setProjectStartDate","dateErrors","setDateErrors","timelineTasks","setTimelineTasks","isWeekend","date","day","getDay","getPreviousWorkingDay","workingDate","Date","setDate","getDate","getNextWorkingDay","subtractWorkingDays","endDate","workingDaysToSubtract","currentDate","remainingDays","addWorkingDays","startDate","workingDaysToAdd","parse","window","location","origin","download","header","skipEmptyLines","complete","results","parsedData","data","assetTypes","Set","map","row","filter","type","error","console","length","today","setHours","newCalculatedStartDates","newDateErrors","allStartDates","forEach","assetName","liveDate","assetTasks","currentEndDate","i","task","duration","parseInt","taskStartDate","calculatedStart","calculatedStartDate","toISOString","split","push","earliestDate","Math","min","generateTimelineTasks","newLiveDates","updated","asset","startDates","Object","keys","allTasks","taskIndex","currentStartDate","taskInfo","taskStart","taskEnd","ganttTask","id","name","start","end","progress","handleAssetToggle","prev","includes","a","handleAssetLiveDateChange","className","children","onGlobalLiveDateChange","onUseGlobalDateChange","assets","onAssetToggle","onAssetLiveDateChange","tasks"],"sources":["/Users/hamishnicklin/Desktop/Accordion/src/TimelineBuilder.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport AssetSelector from './components/AssetSelector';\nimport CampaignSetup from './components/CampaignSetup';\nimport GanttChart from './components/GanttChart';\n\nconst TimelineBuilder = () => {\n    // CSV and asset data\n    const [csvData, setCsvData] = useState([]);\n    const [uniqueAssets, setUniqueAssets] = useState([]);\n    const [selectedAssets, setSelectedAssets] = useState([]);\n    \n    // Live date management\n    const [globalLiveDate, setGlobalLiveDate] = useState('');\n    const [useGlobalDate, setUseGlobalDate] = useState(true);\n    const [assetLiveDates, setAssetLiveDates] = useState({}); // {assetName: 'YYYY-MM-DD'}\n    \n    // Calculated results\n    const [calculatedStartDates, setCalculatedStartDates] = useState({}); // {assetName: 'YYYY-MM-DD'}\n    const [projectStartDate, setProjectStartDate] = useState(''); // Earliest start date across all assets\n    const [dateErrors, setDateErrors] = useState([]); // Array of asset names that start before today\n    \n    // Final timeline for display\n    const [timelineTasks, setTimelineTasks] = useState([]);\n\n    // Helper function to check if date is weekend\n    const isWeekend = (date) => {\n        const day = date.getDay();\n        return day === 0 || day === 6; // Sunday = 0, Saturday = 6\n    };\n\n    // Helper function to get previous working day\n    const getPreviousWorkingDay = (date) => {\n        let workingDate = new Date(date);\n        do {\n            workingDate.setDate(workingDate.getDate() - 1);\n        } while (isWeekend(workingDate));\n        return workingDate;\n    };\n\n    // Helper function to get next working day\n    const getNextWorkingDay = (date) => {\n        let workingDate = new Date(date);\n        do {\n            workingDate.setDate(workingDate.getDate() + 1);\n        } while (isWeekend(workingDate));\n        return workingDate;\n    };\n\n    // Helper function to subtract working days (backwards calculation)\n    const subtractWorkingDays = (endDate, workingDaysToSubtract) => {\n        let currentDate = new Date(endDate);\n        let remainingDays = workingDaysToSubtract;\n        \n        // Subtract working days\n        while (remainingDays > 0) {\n            currentDate.setDate(currentDate.getDate() - 1);\n            \n            // Only count non-weekend days\n            if (!isWeekend(currentDate)) {\n                remainingDays--;\n            }\n        }\n        \n        return currentDate;\n    };\n\n    // Helper function to add working days (forward calculation for display)\n    const addWorkingDays = (startDate, workingDaysToAdd) => {\n        let currentDate = new Date(startDate);\n        let remainingDays = workingDaysToAdd - 1; // -1 because start date counts as day 1\n        \n        // Add working days\n        while (remainingDays > 0) {\n            currentDate.setDate(currentDate.getDate() + 1);\n            if (!isWeekend(currentDate)) {\n                remainingDays--;\n            }\n        }\n        \n        return currentDate;\n    };\n\n    // Load CSV data\n    useEffect(() => {\n        Papa.parse(`${window.location.origin}/Group_Asset_Task_Time.csv`, {\n            download: true,\n            header: true,\n            skipEmptyLines: true,\n            complete: (results) => {\n                const parsedData = results.data;\n                setCsvData(parsedData);\n                \n                // Extract unique asset types from CSV\n                const assetTypes = [...new Set(parsedData.map(row => row['Asset Type']))].filter(type => type);\n                setUniqueAssets(assetTypes);\n            },\n            error: (error) => {\n                console.error(\"Error parsing CSV file:\", error);\n            }\n        });\n    }, []);\n\n    // Calculate backwards timeline when live dates or assets change\n    useEffect(() => {\n        if (selectedAssets.length === 0 || csvData.length === 0) {\n            setTimelineTasks([]);\n            setCalculatedStartDates({});\n            setProjectStartDate('');\n            setDateErrors([]);\n            return;\n        }\n\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Reset time for accurate comparison\n        \n        const newCalculatedStartDates = {};\n        const newDateErrors = [];\n        const allStartDates = [];\n\n        // Calculate for each selected asset\n        selectedAssets.forEach(assetName => {\n    // Determine the correct live date without the incorrect fallback\n    const liveDate = useGlobalDate ? globalLiveDate : assetLiveDates[assetName];\n    \n    // If no date is available for this asset, skip it\n    if (!liveDate) return;\n\n            // Get tasks for this asset\n            const assetTasks = csvData.filter(row => row['Asset Type'] === assetName);\n            \n            if (assetTasks.length === 0) return;\n\n            // Work backwards through tasks sequentially\n            let currentEndDate = new Date(liveDate);\n            \n            // Process tasks in reverse order (last task ends on live date)\n            for (let i = assetTasks.length - 1; i >= 0; i--) {\n                const task = assetTasks[i];\n                const duration = parseInt(task['Duration (Days)'], 10) || 1;\n                \n                // Calculate when this task must start\n                const taskStartDate = subtractWorkingDays(currentEndDate, duration);\n                \n                // Next task ends the working day before this task starts\n                currentEndDate = new Date(taskStartDate);\n                currentEndDate.setDate(currentEndDate.getDate() - 1);\n                \n                // Ensure end date is a working day\n                if (isWeekend(currentEndDate)) {\n                    currentEndDate = getPreviousWorkingDay(currentEndDate);\n                }\n            }\n            \n            // The project start date is the day after the last calculated end date\n            let calculatedStart = new Date(currentEndDate);\n            calculatedStart.setDate(calculatedStart.getDate() + 1);\n            \n            // Ensure start date is a working day\n            if (isWeekend(calculatedStart)) {\n                calculatedStart = getNextWorkingDay(calculatedStart);\n            }\n            \n            const calculatedStartDate = calculatedStart.toISOString().split('T')[0];\n            newCalculatedStartDates[assetName] = calculatedStartDate;\n            allStartDates.push(new Date(calculatedStartDate));\n            \n            // Check if start date is before today\n            if (calculatedStart < today) {\n                newDateErrors.push(assetName);\n            }\n        });\n\n        // Find earliest start date across all assets\n        if (allStartDates.length > 0) {\n            const earliestDate = new Date(Math.min(...allStartDates));\n            setProjectStartDate(earliestDate.toISOString().split('T')[0]);\n        }\n\n        setCalculatedStartDates(newCalculatedStartDates);\n        setDateErrors(newDateErrors);\n\n        // Generate timeline tasks for display\n        generateTimelineTasks(newCalculatedStartDates);\n\n    }, [selectedAssets, globalLiveDate, useGlobalDate, assetLiveDates, csvData]);\n// This new useEffect pre-populates individual dates when switching from global mode\n    useEffect(() => {\n        if (!useGlobalDate && globalLiveDate && selectedAssets.length > 0) {\n            const newLiveDates = { ...assetLiveDates };\n            let updated = false;\n            selectedAssets.forEach(asset => {\n                // Pre-fill only if the asset doesn't have an individual date set\n                if (!newLiveDates[asset]) {\n                    newLiveDates[asset] = globalLiveDate;\n                    updated = true;\n                }\n            });\n            if (updated) {\n                setAssetLiveDates(newLiveDates);\n            }\n        }\n    }, [useGlobalDate, globalLiveDate, selectedAssets, assetLiveDates]);\n    // Generate timeline tasks for Gantt chart\n    const generateTimelineTasks = (startDates) => {\n        if (selectedAssets.length === 0 || Object.keys(startDates).length === 0) {\n            setTimelineTasks([]);\n            return;\n        }\n\n        const allTasks = [];\n        let taskIndex = 0;\n\n        selectedAssets.forEach(assetName => {\n            const startDate = startDates[assetName];\n            if (!startDate) return;\n\n            const assetTasks = csvData.filter(row => row['Asset Type'] === assetName);\n            let currentStartDate = new Date(startDate);\n\n            // Ensure project starts on working day\n            if (isWeekend(currentStartDate)) {\n                currentStartDate = getNextWorkingDay(currentStartDate);\n            }\n\n            assetTasks.forEach(taskInfo => {\n                const duration = parseInt(taskInfo['Duration (Days)'], 10) || 1;\n                \n                const taskStart = new Date(currentStartDate);\n                const taskEnd = addWorkingDays(taskStart, duration);\n                \n                const ganttTask = {\n                    id: `task-${taskIndex}`,\n                    name: `${taskInfo['Asset Type']}: ${taskInfo['Task']}`,\n                    start: taskStart.toISOString().split('T')[0],\n                    end: taskEnd.toISOString().split('T')[0],\n                    progress: 0,\n                };\n                \n                allTasks.push(ganttTask);\n                taskIndex++;\n                \n                // Move to next start date (day after current task ends)\n                currentStartDate = new Date(taskEnd);\n                currentStartDate.setDate(taskEnd.getDate() + 1);\n                \n                // Ensure next start date is working day\n                if (isWeekend(currentStartDate)) {\n                    currentStartDate = getNextWorkingDay(currentStartDate);\n                }\n            });\n        });\n\n        setTimelineTasks(allTasks);\n    };\n\n    const handleAssetToggle = (asset) => {\n        setSelectedAssets(prev => \n            prev.includes(asset) \n                ? prev.filter(a => a !== asset)\n                : [...prev, asset]\n        );\n    };\n\n    const handleAssetLiveDateChange = (assetName, date) => {\n        setAssetLiveDates(prev => ({\n            ...prev,\n            [assetName]: date\n        }));\n    };\n\n    return (\n        <div className=\"bg-gray-100 min-h-screen font-sans\">\n            <header className=\"bg-white shadow-md\">\n                <div className=\"container mx-auto px-6 py-4\">\n                    <h1 className=\"text-3xl font-bold text-gray-800\">Accordion Timeline Builder</h1>\n                </div>\n            </header>\n            <main className=\"container mx-auto p-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                    {/* LEFT COLUMN: CONTROLS */}\n                    <div className=\"lg:col-span-1 bg-white p-6 rounded-xl shadow-lg\">\n                        <h2 className=\"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\">Timeline Setup</h2>\n                        <CampaignSetup \n                            globalLiveDate={globalLiveDate}\n                            onGlobalLiveDateChange={setGlobalLiveDate}\n                            useGlobalDate={useGlobalDate}\n                            onUseGlobalDateChange={setUseGlobalDate}\n                            projectStartDate={projectStartDate}\n                            dateErrors={dateErrors}\n                        />\n<AssetSelector\n    assets={uniqueAssets || []}\n    selectedAssets={selectedAssets || []}\n    onAssetToggle={handleAssetToggle}\n    useGlobalDate={useGlobalDate} // <-- CORRECTED LINE\n    globalLiveDate={globalLiveDate || ''}\n    assetLiveDates={assetLiveDates || {}}\n    onAssetLiveDateChange={handleAssetLiveDateChange}\n    calculatedStartDates={calculatedStartDates || {}}\n    dateErrors={dateErrors || []}\n/>\n                    </div>\n                    \n                    {/* RIGHT COLUMN: TIMELINE */}\n                    <div className=\"lg:col-span-2 bg-white p-6 rounded-xl shadow-lg\">\n                        <h2 className=\"text-xl font-semibold mb-4 border-b pb-3 text-gray-700\">Generated Timeline</h2>\n                        \n                     {/* Error Messages - Temporarily Disabled */}\n{/* {dateErrors.length > 0 && (\n    <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-md\">\n        <h3 className=\"text-red-800 font-medium mb-2\">⚠️ Timeline Conflicts</h3>\n        <p className=\"text-red-700 text-sm mb-2\">\n            The following assets cannot be completed by their live dates:\n        </p>\n        <ul className=\"text-red-700 text-sm\">\n            {dateErrors.map(asset => (\n                <li key={asset} className=\"ml-4\">\n                    • {asset} (would need to start on {calculatedStartDates[asset]})\n                </li>\n            ))}\n        </ul>\n        <p className=\"text-red-700 text-sm mt-2 font-medium\">\n            Manual adjustment of task durations required.\n        </p>\n    </div>\n)} */}\n\n                        {timelineTasks && timelineTasks.length > 0 ? (\n                            <GanttChart tasks={timelineTasks} />\n                        ) : (\n                            <div className=\"text-center text-gray-500 py-10\">\n                                <p className=\"text-lg\">Your timeline will appear here.</p>\n                                <p className=\"text-sm\">Set a live date and select some assets to begin.</p>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </main>\n        </div>\n    );\n};\n\nexport default TimelineBuilder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}